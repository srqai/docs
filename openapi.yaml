openapi: "3.0.3"
info:
    version: "3.0.0"
    title: "Authlete API Explorer"
    description: "<div class=\"min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-6\">\n  <div class=\"flex justify-end mb-4\">\n    <label for=\"theme-toggle\" class=\"flex items-center cursor-pointer\">\n      <div class=\"relative\">Dark mode:\n        <input type=\"checkbox\" id=\"theme-toggle\" class=\"sr-only\" onchange=\"toggleTheme()\">\n        <div class=\"block bg-gray-600 w-14 h-8 rounded-full\"></div>\n        <div class=\"dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition\"></div>\n      </div>\n    </label>\n  </div>\n  <header class=\"bg-green-500 dark:bg-green-700 p-4 rounded-lg text-white text-center\">\n    <p>\n      Welcome to the <strong>Authlete API documentation</strong>. Authlete is an <strong>API-first service</strong>\n      where every aspect of the platform is configurable via API. This explorer provides a convenient way to\n      authenticate and interact with the API, allowing you to see Authlete in action quickly. \U0001F680\n    </p>\n    <p>\n      At a high level, the Authlete API is grouped into two categories:\n    </p>\n    <ul class=\"list-disc list-inside\">\n      <li><strong>Management APIs</strong>: Enable you to manage services and clients. \U0001F527</li>\n      <li><strong>Runtime APIs</strong>: Allow you to build your own Authorization Servers or Verifiable Credential (VC)\n        issuers. \U0001F510</li>\n    </ul>\n    <p>All API endpoints are secured using access tokens issued by Authlete's Identity Provider (IdP). If you already\n      have an Authlete account, simply use the <em>Get Token</em> option on the Authentication page to log in and obtain\n      an access token for API usage. If you don't have an account yet, <a href=\"https://console.authlete.com/register\">sign up\n        here</a> to get started.</p>\n  </header>\n  <main>\n    <section id=\"api-servers\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F310 API Servers</h2>\n      <p>Authlete is a global service with clusters available in multiple regions across the world.</p>\n      <p>Currently, our service is available in the following regions:</p>\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1FA\U0001F1F8 US</p>\n        </div>\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1EF\U0001F1F5 JP</p>\n        </div>\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1EA\U0001F1FA EU</p>\n        </div>\n        <div class=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow\">\n          <p class=\"text-center font-semibold\">\U0001F1E7\U0001F1F7 Brazil</p>\n        </div>\n      </div>\n      <p>Our customers can host their data in the region that best meets their requirements.</p>\n      <a href=\"#servers\" class=\"block mt-4 text-green-500 dark:text-green-300 hover:underline text-center\">Select your\n        preferred server</a>\n    </section>\n    <section id=\"authentication\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F511 Authentication</h2>\n      <p>The API Explorer requires an access token to call the API.</p>\n      <p>You can create the access token from the <a href=\"https://console.authlete.com\">Authlete Management Console</a> and set it in the HTTP Bearer section of Authentication page.</p>\n      <p>Alternatively, if you have an Authlete account, the API Explorer can log you in with your Authlete account and\n        automatically acquire the required access token.</p>\n      <div class=\"theme-admonition theme-admonition-warning admonition_o5H7 alert alert--warning\">\n        <div class=\"admonitionContent_Knsx\">\n          <p>⚠️ <strong>Important Note:</strong> When the API Explorer acquires the token after login, the access tokens\n            will have the same permissions as the user who logs in as part of this flow.</p>\n        </div>\n      </div>\n      <a href=\"#auth\" class=\"block mt-4 text-green-500 dark:text-green-300 hover:underline text-center\">Setup your\n        access token</a>\n    </section>\n    <section id=\"tutorials\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F393 Tutorials</h2>\n      <p>If you have successfully tested the API from the API Console and want to take the next step of integrating the\n        API into your application, or if you want to see a sample using Authlete APIs, follow the links below. These\n        resources will help you understand key concepts and how to integrate Authlete API into your applications.</p>\n      <div class=\"mt-4\">\n        <a href=\"https://www.authlete.com/developers/getting_started/\"\n          class=\"block text-green-500 dark:text-green-300 font-bold hover:underline mb-2\">\U0001F680 Getting Started with\n          Authlete</a>\n          </br>\n        <a href=\"https://www.authlete.com/developers/tutorial/signup/\"\n          class=\"block text-green-500 dark:text-green-300 font-bold hover:underline\">\U0001F511 From Sign-Up to the First API\n          Request</a>\n      </div>\n    </section>\n    <section id=\"support\" class=\"mb-10\">\n      <h2 class=\"text-2xl font-semibold mb-4\">\U0001F6E0 Contact Us</h2>\n      <p>If you have any questions or need assistance, our team is here to help.</p>\n      <a href=\"https://www.authlete.com/contact/\"\n        class=\"block mt-4 text-green-500 dark:text-green-300 font-bold hover:underline\">Contact Page</a>\n    </section>\n  </main>\n</div>\n"
    contact:
        name: "Shariq"
        email: "shariq@gmail.com"
        url: "shariq.com"
    license:
        url: "https://www.apache.org/licenses/LICENSE-2.0.html"
        name: "Apache 2.0"
servers:
    - url: "https://us.authlete.com"
      description: "\U0001F1FA\U0001F1F8 US Cluster"
    - url: "https://jp.authlete.com"
      description: "\U0001F1EF\U0001F1F5 Japan Cluster"
    - url: "https://eu.authlete.com"
      description: "\U0001F1EA\U0001F1FA Europe Cluster"
    - url: "https://br.authlete.com"
      description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
security:
    - authlete: []
    - bearer: []
tags:
    - name: "Service Management"
      description: "API endpoints for managing services, including creation, update, and deletion of services."
      x-tag-expanded: false
    - name: "Client Management"
      description: "API endpoints for managing OAuth clients, including creation, update, and deletion of clients."
      x-tag-expanded: false
    - name: "Authorization Endpoint"
      description: "API endpoints for implementing OAuth 2.0 Authorization Endpoint."
      x-tag-expanded: false
    - name: "Pushed Authorization Endpoint"
      description: "API endpoints for implementing OAuth 2.0 Pushed Authorization Requests (PAR)."
      x-tag-expanded: false
    - name: "Token Endpoint"
      description: "API endpoints for implementing OAuth 2.0 Token Endpoint."
      x-tag-expanded: false
    - name: "Token Operations"
      description: "API endpoints for various token related operations, including creating, revoking and deleting access_tokens with specified scopes."
      x-tag-expanded: false
    - name: "Introspection Endpoint"
      description: "API endpoints for implementing OAuth 2.0 Introspection Endpoint."
      x-tag-expanded: false
    - name: "Revocation Endpoint"
      description: "API endpoint for implementing OAuth 2.0 Revocation Endpoint."
      x-tag-expanded: false
    - name: "UserInfo Endpoint"
      description: "API endpoints for implementing OpenID Connect UserInfo Endpoint."
      x-tag-expanded: false
    - name: "JWK Set Endpoint"
      description: "API endpoints for to generate JSON Web Key Set (JWKS) for a service."
      x-tag-expanded: false
    - name: "Discovery Endpoint"
      description: "API endpoints for implementing OpenID Connect Discovery."
      x-tag-expanded: false
    - name: "Configuration Endpoint"
      description: "API endpoint for accessing configuration settings for a service."
      x-tag-expanded: false
    - name: "Dynamic Client Registration"
      description: "API endpoints for implementing OAuth 2.0 Dynamic Client Registration."
      x-tag-expanded: false
    - name: "CIBA"
      description: "API endpoints for implementing Client-Initiated Backchannel Authentication (CIBA)."
      x-tag-expanded: false
    - name: "Grant Management Endpoint"
      description: "API endpoint for implementing OAuth 2.0 grants, including grant management actions like updating and revoking grants."
      x-tag-expanded: false
    - name: "Jose Object"
      description: "API endpoints for JOSE objects."
      x-tag-expanded: false
    - name: "Device Flow"
      description: "API endpoints for implementing OAuth 2.0 Device Flow"
      x-tag-expanded: false
    - name: "Federation Endpoint"
      description: "API endpoints for implementing OpenID Federation using Authlete."
      x-tag-expanded: false
    - name: "Verifiable Credential Issuer"
      description: "API endpoints for implementing and running a Verifiable Credential Issuer (VCI)."
      x-tag-expanded: false
    - name: "Hardware Security Key"
      description: "API endpoints for managing hardware security keys (HSK)."
      x-tag-expanded: false
    - name: "Utility Endpoints"
      description: "API endpoints for various utility operations."
      x-tag-expanded: false
paths:
    "/api/{serviceId}/service/get":
        get:
            tags:
                - "Service Management"
            summary: "Get Service"
            description: "Get a service.\n\nIf the access token can only view or modify clients underneath this service, but does not\nhave access to view this service directly, a limited view of the service will be returned.\n"
            operationId: "service_get_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "number":
                                        type: "integer"
                                        description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                        format: "int32"
                                        readOnly: true
                                    "serviceName":
                                        type: "string"
                                        description: "The name of this service."
                                    "issuer":
                                        type: "string"
                                        description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    "description":
                                        type: "string"
                                        description: "The description about the service."
                                    "apiKey":
                                        type: "integer"
                                        description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                        format: "int64"
                                        readOnly: true
                                    "clientIdAliasEnabled":
                                        type: "boolean"
                                        description: "Deprecated. Always `true`."
                                    "metadata":
                                        type: "array"
                                        description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "createdAt":
                                        type: "integer"
                                        description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                        format: "int64"
                                        readOnly: true
                                    "modifiedAt":
                                        type: "integer"
                                        description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                        format: "int64"
                                        readOnly: true
                                    "authenticationCallbackEndpoint":
                                        type: "string"
                                        description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                        format: "uri"
                                    "authenticationCallbackApiKey":
                                        type: "string"
                                        description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                    "authenticationCallbackApiSecret":
                                        type: "string"
                                        description: "API secret for `basic` authentication at the authentication callback endpoint."
                                    "supportedAcrs":
                                        type: "array"
                                        description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        readOnly: true
                                        items:
                                            type: "string"
                                    "supportedGrantTypes":
                                        type: "array"
                                        description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "AUTHORIZATION_CODE"
                                                - "IMPLICIT"
                                                - "PASSWORD"
                                                - "CLIENT_CREDENTIALS"
                                                - "REFRESH_TOKEN"
                                                - "CIBA"
                                                - "DEVICE_CODE"
                                                - "TOKEN_EXCHANGE"
                                                - "JWT_BEARER"
                                            description: "The grant type of the access token when the access token was created.\n"
                                            x-stoplight: {"id": "033u82mqvyogn"}
                                    "supportedResponseTypes":
                                        type: "array"
                                        description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "CODE"
                                                - "TOKEN"
                                                - "ID_TOKEN"
                                                - "CODE_TOKEN"
                                                - "CODE_ID_TOKEN"
                                                - "ID_TOKEN_TOKEN"
                                                - "CODE_ID_TOKEN_TOKEN"
                                            x-stoplight: {"id": "t7wed2d7tkpy7"}
                                    "supportedAuthorizationDetailsTypes":
                                        type: "array"
                                        description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                        items:
                                            type: "string"
                                    "supportedServiceProfiles":
                                        type: "array"
                                        description: "The profiles that this service supports.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "FAPI"
                                                - "OPEN_BANKING"
                                            x-stoplight: {"id": "snodce1oa3g4u"}
                                    "errorDescriptionOmitted":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                    "errorUriOmitted":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                    "authorizationEndpoint":
                                        type: "string"
                                        description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directAuthorizationEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                    "supportedUiLocales":
                                        type: "array"
                                        description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                    "supportedDisplays":
                                        type: "array"
                                        description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "PAGE"
                                                - "POPUP"
                                                - "TOUCH"
                                                - "WAP"
                                            description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                            x-stoplight: {"id": "269jffv4dhxg8"}
                                    "pkceRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                    "pkceS256Required":
                                        type: "boolean"
                                        description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                    "authorizationResponseDuration":
                                        type: "integer"
                                        description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                        format: "int64"
                                    "tokenEndpoint":
                                        type: "string"
                                        description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directTokenEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                    "supportedTokenAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "missingClientIdAllowed":
                                        type: "boolean"
                                        description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                    "revocationEndpoint":
                                        type: "string"
                                        description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                        format: "uri"
                                    "directRevocationEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                    "supportedRevocationAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported at the revocation endpoint.\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            type: "string"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "introspectionEndpoint":
                                        type: "string"
                                        description: "The URI of the introspection endpoint."
                                        format: "uri"
                                    "directIntrospectionEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                    "supportedIntrospectionAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported at the introspection endpoint.\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            type: "string"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "pushedAuthReqEndpoint":
                                        type: "string"
                                        description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                        format: "uri"
                                    "pushedAuthReqDuration":
                                        type: "integer"
                                        description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                        format: "int64"
                                    "parRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                    "requestObjectRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                    "traditionalRequestObjectProcessingApplied":
                                        type: "boolean"
                                        description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                    "mutualTlsValidatePkiCertChain":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                    "trustedRootCertificates":
                                        type: "array"
                                        description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                        items:
                                            type: "string"
                                    "mtlsEndpointAliases":
                                        type: "array"
                                        description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                "uri":
                                                    type: "string"
                                                    format: "uri"
                                            x-stoplight: {"id": "nze0lsoxbeeyf"}
                                    "accessTokenType":
                                        type: "string"
                                        description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                    "tlsClientCertificateBoundAccessTokens":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                        format: "int64"
                                    "singleAccessTokenPerSubject":
                                        type: "boolean"
                                        description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                    "accessTokenSignAlg":
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "accessTokenSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                    "refreshTokenDuration":
                                        type: "integer"
                                        description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                        format: "int64"
                                    "refreshTokenDurationKept":
                                        type: "boolean"
                                        description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                    "refreshTokenDurationReset":
                                        type: "boolean"
                                        description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                    "refreshTokenKept":
                                        type: "boolean"
                                        description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                    "supportedScopes":
                                        type: "array"
                                        description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "scopeRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                    "idTokenDuration":
                                        type: "integer"
                                        description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                        format: "int64"
                                    "allowableClockSkew":
                                        type: "integer"
                                        description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                        format: "int32"
                                    "supportedClaimTypes":
                                        type: "array"
                                        description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NORMAL"
                                                - "AGGREGATED"
                                                - "DISTRIBUTED"
                                            x-stoplight: {"id": "d2fcz22i8zrtf"}
                                    "supportedClaimLocales":
                                        type: "array"
                                        description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                    "supportedClaims":
                                        type: "array"
                                        description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                        items:
                                            type: "string"
                                    "claimShortcutRestrictive":
                                        type: "boolean"
                                        description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                    "jwksUri":
                                        type: "string"
                                        description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directJwksEndpointEnabled":
                                        type: "boolean"
                                        description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                    "jwks":
                                        type: "string"
                                        description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                    "idTokenSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                    "userInfoSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                    "authorizationSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                    "userInfoEndpoint":
                                        type: "string"
                                        description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directUserInfoEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                    "dynamicRegistrationSupported":
                                        type: "boolean"
                                        description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                    "registrationEndpoint":
                                        type: "string"
                                        description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "registrationManagementEndpoint":
                                        type: "string"
                                        description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                        format: "uri"
                                    "policyUri":
                                        type: "string"
                                        description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "tosUri":
                                        type: "string"
                                        description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "serviceDocumentation":
                                        type: "string"
                                        description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "backchannelAuthenticationEndpoint":
                                        type: "string"
                                        description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                        format: "uri"
                                    "supportedBackchannelTokenDeliveryModes":
                                        type: "array"
                                        description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "PING"
                                                - "POLL"
                                                - "PUSH"
                                            x-stoplight: {"id": "rnu65zla2rf18"}
                                    "backchannelAuthReqIdDuration":
                                        type: "integer"
                                        description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                        format: "int32"
                                    "backchannelPollingInterval":
                                        type: "integer"
                                        description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                        format: "int32"
                                    "backchannelUserCodeParameterSupported":
                                        type: "boolean"
                                        description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                    "backchannelBindingMessageRequiredInFapi":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                    "deviceAuthorizationEndpoint":
                                        type: "string"
                                        description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                        format: "uri"
                                    "deviceVerificationUri":
                                        type: "string"
                                        description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                        format: "uri"
                                    "deviceVerificationUriComplete":
                                        type: "string"
                                        description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                        format: "uri"
                                    "deviceFlowCodeDuration":
                                        type: "integer"
                                        description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                        format: "int32"
                                    "deviceFlowPollingInterval":
                                        type: "integer"
                                        description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                        format: "int32"
                                    "userCodeCharset":
                                        type: "string"
                                        enum:
                                            - "BASE20"
                                            - "NUMERIC"
                                        description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                        x-stoplight: {"id": "xcfsjhdfggoez"}
                                    "userCodeLength":
                                        type: "integer"
                                        description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                        format: "int32"
                                    "supportedTrustFrameworks":
                                        type: "array"
                                        description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedEvidence":
                                        type: "array"
                                        description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedIdentityDocuments":
                                        type: "array"
                                        description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedVerificationMethods":
                                        type: "array"
                                        description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedVerifiedClaims":
                                        type: "array"
                                        description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "verifiedClaimsValidationSchemaSet":
                                        type: "string"
                                        enum:
                                            - "standard"
                                            - "standard+id_document"
                                        description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                    "attributes":
                                        type: "array"
                                        description: "The attributes of this service.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "nbfOptional":
                                        type: "boolean"
                                        description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                    "issSuppressed":
                                        type: "boolean"
                                        description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                    "supportedCustomClientMetadata":
                                        type: "array"
                                        description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                        items:
                                            type: "string"
                                    "tokenExpirationLinked":
                                        type: "boolean"
                                        description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                    "frontChannelRequestObjectEncryptionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                    "requestObjectEncryptionAlgMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                    "requestObjectEncryptionEncMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                    "hsmEnabled":
                                        type: "boolean"
                                        description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                    "hsks":
                                        type: "array"
                                        description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                        items:
                                            type: "object"
                                            description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                            properties:
                                                "kty":
                                                    type: "string"
                                                    description: "The key type (EC or RSA)\n"
                                                "use":
                                                    type: "string"
                                                    description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                                "kid":
                                                    type: "string"
                                                    description: "Key ID for the key on the HSM.\n"
                                                "hsmName":
                                                    type: "string"
                                                    description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                                "handle":
                                                    type: "string"
                                                    description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                                "publicKey":
                                                    type: "string"
                                                    description: "The public key that corresponds to the key on the HSM.\n"
                                            x-stoplight: {"id": "1trqwclfmbcwp"}
                                    "grantManagementEndpoint":
                                        type: "string"
                                        description: "The URL of the grant management endpoint.\n"
                                    "grantManagementActionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                    "unauthorizedOnClientConfigSupported":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                    "dcrScopeUsedAsRequestable":
                                        type: "boolean"
                                        description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                    "endSessionEndpoint":
                                        type: "string"
                                        description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "loopbackRedirectionUriVariable":
                                        type: "boolean"
                                        description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                    "requestObjectAudienceChecked":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                    "accessTokenForExternalAttachmentEmbedded":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                    "authorityHints":
                                        type: "array"
                                        description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                        items:
                                            type: "string"
                                    "federationEnabled":
                                        type: "boolean"
                                        description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                    "federationJwks":
                                        type: "string"
                                        description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                    "federationSignatureKeyId":
                                        type: "string"
                                        description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                    "federationConfigurationDuration":
                                        type: "integer"
                                        description: "The duration of the entity configuration in seconds.\n"
                                    "federationRegistrationEndpoint":
                                        type: "string"
                                        description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    "organizationName":
                                        type: "string"
                                        description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                    "predefinedTransformedClaims":
                                        type: "string"
                                        description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                    "refreshTokenIdempotent":
                                        type: "boolean"
                                        description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                    "signedJwksUri":
                                        type: "string"
                                        description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                    "supportedAttachments":
                                        type: "array"
                                        description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "EMBEDDED"
                                                - "EXTERNAL"
                                            description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                    "supportedDigestAlgorithms":
                                        type: "array"
                                        description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                        items:
                                            type: "string"
                                    "supportedDocuments":
                                        type: "array"
                                        description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsMethods":
                                        type: "array"
                                        description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsValidationMethods":
                                        type: "array"
                                        description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsVerificationMethods":
                                        type: "array"
                                        description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedElectronicRecords":
                                        type: "array"
                                        description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedClientRegistrationTypes":
                                        type: "array"
                                        items:
                                            type: "string"
                                            enum:
                                                - "AUTOMATIC"
                                                - "EXPLICIT"
                                            description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                    "tokenExchangeByIdentifiableClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                    "tokenExchangeByConfidentialClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                    "tokenExchangeByPermittedClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                    "tokenExchangeEncryptedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                    "tokenExchangeUnsignedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                    "jwtGrantByIdentifiableClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "jwtGrantEncryptedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "jwtGrantUnsignedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "dcrDuplicateSoftwareIdBlocked":
                                        type: "boolean"
                                        description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                    "trustAnchors":
                                        type: "array"
                                        description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "entityId":
                                                    type: "string"
                                                    description: "the entity ID of the trust anchor\n"
                                                "jwks":
                                                    type: "string"
                                                    description: "the JWK Set document containing public keys of the trust anchor\n"
                                    "openidDroppedOnRefreshWithoutOfflineAccess":
                                        type: "boolean"
                                        description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                    "supportedDocumentsCheckMethods":
                                        type: "array"
                                        description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                        items:
                                            type: "string"
                                    "rsResponseSigned":
                                        type: "boolean"
                                        description: "The flag indicating whether this service signs responses from the resource server.\n"
                                    "cnonceDuration":
                                        type: "integer"
                                        description: "The duration of `c_nonce`.\n"
                                        format: "int64"
                                    "dpopNonceRequired":
                                        type: "boolean"
                                        description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                    "verifiableCredentialsEnabled":
                                        type: "boolean"
                                        description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                    "credentialJwksUri":
                                        type: "string"
                                        description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                    "credentialOfferDuration":
                                        type: "integer"
                                        description: "The default duration of credential offers in seconds.\n"
                                        format: "int64"
                                    "dpopNonceDuration":
                                        type: "integer"
                                        description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                        format: "int64"
                                    "preAuthorizedGrantAnonymousAccessSupported":
                                        type: "boolean"
                                        description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                    "credentialTransactionDuration":
                                        type: "integer"
                                        description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                        format: "int64"
                                    "introspectionSignatureKeyId":
                                        type: "string"
                                        description: "The key ID of the key for signing introspection responses.\n"
                                    "resourceSignatureKeyId":
                                        type: "string"
                                        description: "The key ID of the key for signing introspection responses.\n"
                                    "userPinLength":
                                        type: "integer"
                                        description: "The default length of user PINs.\n"
                                        format: "int32"
                                    "supportedPromptValues":
                                        type: "array"
                                        description: "The supported `prompt` values.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "LOGIN"
                                                - "CONSENT"
                                                - "SELECT_ACCOUNT"
                                            description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                            x-stoplight: {"id": "wtedd4f92crd8"}
                                    "idTokenReissuable":
                                        type: "boolean"
                                        description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                    "credentialJwks":
                                        type: "string"
                                        description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                    "fapiModes":
                                        type: "array"
                                        description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "FAPI1_ADVANCED"
                                                - "FAPI1_BASELINE"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                - "FAPI2_SECURITY"
                                    "credentialDuration":
                                        type: "integer"
                                        description: "The default duration of verifiable credentials in seconds.\n"
                                        format: "int64"
                                    "credentialIssuerMetadata":
                                        type: "object"
                                        properties:
                                            "credentialIssuer":
                                                type: "string"
                                                description: "The identifier of a credential request."
                                            "authorizationServer":
                                                type: "string"
                                                description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                            "credentialEndpoint":
                                                type: "boolean"
                                                description: "The URL of the credential endpoint of the credential issuer."
                                            "batchCredentialEndpoint":
                                                type: "integer"
                                                description: "The URL of the batch credential endpoint of the credential issuer."
                                                format: "int64"
                                            "deferredCredentialEndpoint":
                                                type: "string"
                                                description: "The URL of the deferred credential endpoint of the credential issuer."
                                            "credentialsSupported":
                                                type: "boolean"
                                                description: "A JSON array describing supported credentials."
                                        x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                    "idTokenAudType":
                                        type: "string"
                                        description: "The type of the `aud` claim in ID tokens.\n"
                                x-stoplight: {"id": "906lx1kk8hpxi"}
                            examples:
                                "full":
                                    summary: "Example showing the full service object."
                                    value: {"accessTokenDuration": 3600, "accessTokenType": "Bearer", "allowableClockSkew": 0, "apiKey": 21653835348762, "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authorizationEndpoint": "https://my-service.example.com/authz", "authorizationResponseDuration": 0, "backchannelAuthReqIdDuration": 0, "backchannelBindingMessageRequiredInFapi": false, "backchannelPollingInterval": 0, "backchannelUserCodeParameterSupported": false, "claimShortcutRestrictive": false, "clientIdAliasEnabled": true, "clientsPerDeveloper": 0, "createdAt": 1639373421000, "dcrScopeUsedAsRequestable": false, "deviceFlowCodeDuration": 0, "deviceFlowPollingInterval": 0, "directAuthorizationEndpointEnabled": false, "directIntrospectionEndpointEnabled": false, "directJwksEndpointEnabled": false, "directRevocationEndpointEnabled": false, "directTokenEndpointEnabled": false, "directUserInfoEndpointEnabled": false, "dynamicRegistrationSupported": false, "errorDescriptionOmitted": false, "errorUriOmitted": false, "frontChannelRequestObjectEncryptionRequired": false, "grantManagementActionRequired": false, "hsmEnabled": false, "idTokenDuration": 0, "introspectionEndpoint": "https://my-service.example.com/introspection", "issSuppressed": false, "issuer": "https://my-service.example.com", "metadata": [{"key": "clientCount", "value": "1"}], "missingClientIdAllowed": false, "modifiedAt": 1639373421000, "mutualTlsValidatePkiCertChain": false, "nbfOptional": false, "number": 5041, "parRequired": false, "pkceRequired": true, "pkceS256Required": false, "pushedAuthReqDuration": 0, "refreshTokenDuration": 3600, "refreshTokenDurationKept": false, "refreshTokenDurationReset": false, "refreshTokenKept": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "revocationEndpoint": "https://my-service.example.com/revocation", "scopeRequired": false, "serviceName": "My service", "serviceOwnerNumber": 2, "singleAccessTokenPerSubject": false, "supportedClaimTypes": ["NORMAL"], "supportedDisplays": ["PAGE"], "supportedGrantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "supportedIntrospectionAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedResponseTypes": ["CODE"], "supportedRevocationAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedScopes": [{"defaultEntry": false, "description": "A permission to read your history.", "name": "history.read"}, {"defaultEntry": false, "description": "A permission to read your timeline.", "name": "timeline.read"}], "supportedTokenAuthMethods": ["CLIENT_SECRET_BASIC"], "tlsClientCertificateBoundAccessTokens": false, "tokenEndpoint": "https://my-service.example.com/token", "tokenExpirationLinked": false, "traditionalRequestObjectProcessingApplied": false, "unauthorizedOnClientConfigSupported": false, "userCodeLength": 0}
                                "limited":
                                    summary: "Example showing the limited service object."
                                    value: {"apiKey": 21653835348762, "description": "This Service.", "number": 5041, "serviceName": "My service"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/service/get \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong serviceId = ...;\n\napi.getService(serviceId);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nserviceId = ...\n\napi.getService(serviceId)\n"}]
            x-stoplight: {"id": "i9ati1mrscuil"}
    "/api/service/get/list":
        get:
            tags:
                - "Service Management"
            summary: "List Services"
            description: "Get a list of services.\n\nIf the access token can only view or modify clients underneath a service, but does not\nhave access to view that service directly, a limited view of the service will be returned.\nOtherwise, all properties of the service are returned.\n\nIf the access token is an administrative token, this returns a list of all services on the Authlete instance.\nOtherwise, all services that the access token can view, even in a limited fashion, are returned.\n"
            operationId: "service_get_list_api"
            parameters:
                - name: "start"
                  in: "query"
                  description: "Start index (inclusive) of the result set. The default value is 0. Must not be a negative number."
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "end"
                  in: "query"
                  description: "End index (exclusive) of the result set. The default value is 5. Must not be a negative number."
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "start":
                                        type: "integer"
                                        description: "Start index (inclusive) of the result set. The default value is 0. Must not be a negative\nnumber.\n"
                                        format: "int32"
                                    "end":
                                        type: "integer"
                                        description: "Start index (inclusive) of the result set. The default value is 0. Must not be a negative\nnumber.\n"
                                        format: "int32"
                                    "totalCount":
                                        type: "integer"
                                        description: "Total number of services owned by the service owner. This doesn't mean the number of services\ncontained in the response.\n"
                                        format: "int32"
                                    "services":
                                        type: "array"
                                        description: "An array of services.\n"
                                        items:
                                            properties:
                                                "number":
                                                    type: "integer"
                                                    description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                                    format: "int32"
                                                    readOnly: true
                                                "serviceName":
                                                    type: "string"
                                                    description: "The name of this service."
                                                "issuer":
                                                    type: "string"
                                                    description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                "description":
                                                    type: "string"
                                                    description: "The description about the service."
                                                "apiKey":
                                                    type: "integer"
                                                    description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                                    format: "int64"
                                                    readOnly: true
                                                "clientIdAliasEnabled":
                                                    type: "boolean"
                                                    description: "Deprecated. Always `true`."
                                                "metadata":
                                                    type: "array"
                                                    description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                                "createdAt":
                                                    type: "integer"
                                                    description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                                    format: "int64"
                                                    readOnly: true
                                                "modifiedAt":
                                                    type: "integer"
                                                    description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                                    format: "int64"
                                                    readOnly: true
                                                "authenticationCallbackEndpoint":
                                                    type: "string"
                                                    description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                                    format: "uri"
                                                "authenticationCallbackApiKey":
                                                    type: "string"
                                                    description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                                "authenticationCallbackApiSecret":
                                                    type: "string"
                                                    description: "API secret for `basic` authentication at the authentication callback endpoint."
                                                "supportedAcrs":
                                                    type: "array"
                                                    description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    readOnly: true
                                                    items:
                                                        type: "string"
                                                "supportedGrantTypes":
                                                    type: "array"
                                                    description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "AUTHORIZATION_CODE"
                                                            - "IMPLICIT"
                                                            - "PASSWORD"
                                                            - "CLIENT_CREDENTIALS"
                                                            - "REFRESH_TOKEN"
                                                            - "CIBA"
                                                            - "DEVICE_CODE"
                                                            - "TOKEN_EXCHANGE"
                                                            - "JWT_BEARER"
                                                        description: "The grant type of the access token when the access token was created.\n"
                                                        x-stoplight: {"id": "033u82mqvyogn"}
                                                "supportedResponseTypes":
                                                    type: "array"
                                                    description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "NONE"
                                                            - "CODE"
                                                            - "TOKEN"
                                                            - "ID_TOKEN"
                                                            - "CODE_TOKEN"
                                                            - "CODE_ID_TOKEN"
                                                            - "ID_TOKEN_TOKEN"
                                                            - "CODE_ID_TOKEN_TOKEN"
                                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                                "supportedAuthorizationDetailsTypes":
                                                    type: "array"
                                                    description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                                    items:
                                                        type: "string"
                                                "supportedServiceProfiles":
                                                    type: "array"
                                                    description: "The profiles that this service supports.\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "FAPI"
                                                            - "OPEN_BANKING"
                                                        x-stoplight: {"id": "snodce1oa3g4u"}
                                                "errorDescriptionOmitted":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                                "errorUriOmitted":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                                "authorizationEndpoint":
                                                    type: "string"
                                                    description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "directAuthorizationEndpointEnabled":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                                "supportedUiLocales":
                                                    type: "array"
                                                    description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                "supportedDisplays":
                                                    type: "array"
                                                    description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "PAGE"
                                                            - "POPUP"
                                                            - "TOUCH"
                                                            - "WAP"
                                                        description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                                        x-stoplight: {"id": "269jffv4dhxg8"}
                                                "pkceRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                                "pkceS256Required":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                                "authorizationResponseDuration":
                                                    type: "integer"
                                                    description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                                    format: "int64"
                                                "tokenEndpoint":
                                                    type: "string"
                                                    description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "directTokenEndpointEnabled":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                                "supportedTokenAuthMethods":
                                                    type: "array"
                                                    description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "NONE"
                                                            - "CLIENT_SECRET_BASIC"
                                                            - "CLIENT_SECRET_POST"
                                                            - "CLIENT_SECRET_JWT"
                                                            - "PRIVATE_KEY_JWT"
                                                            - "TLS_CLIENT_AUTH"
                                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                                "missingClientIdAllowed":
                                                    type: "boolean"
                                                    description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                                "revocationEndpoint":
                                                    type: "string"
                                                    description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                                    format: "uri"
                                                "directRevocationEndpointEnabled":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                                "supportedRevocationAuthMethods":
                                                    type: "array"
                                                    description: "Client authentication methods supported at the revocation endpoint.\n"
                                                    items:
                                                        enum:
                                                            - "NONE"
                                                            - "CLIENT_SECRET_BASIC"
                                                            - "CLIENT_SECRET_POST"
                                                            - "CLIENT_SECRET_JWT"
                                                            - "PRIVATE_KEY_JWT"
                                                            - "TLS_CLIENT_AUTH"
                                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                        type: "string"
                                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                                "introspectionEndpoint":
                                                    type: "string"
                                                    description: "The URI of the introspection endpoint."
                                                    format: "uri"
                                                "directIntrospectionEndpointEnabled":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                                "supportedIntrospectionAuthMethods":
                                                    type: "array"
                                                    description: "Client authentication methods supported at the introspection endpoint.\n"
                                                    items:
                                                        enum:
                                                            - "NONE"
                                                            - "CLIENT_SECRET_BASIC"
                                                            - "CLIENT_SECRET_POST"
                                                            - "CLIENT_SECRET_JWT"
                                                            - "PRIVATE_KEY_JWT"
                                                            - "TLS_CLIENT_AUTH"
                                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                        type: "string"
                                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                                "pushedAuthReqEndpoint":
                                                    type: "string"
                                                    description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                                    format: "uri"
                                                "pushedAuthReqDuration":
                                                    type: "integer"
                                                    description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                                    format: "int64"
                                                "parRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                                "requestObjectRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                                "traditionalRequestObjectProcessingApplied":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                                "mutualTlsValidatePkiCertChain":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                                "trustedRootCertificates":
                                                    type: "array"
                                                    description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                                    items:
                                                        type: "string"
                                                "mtlsEndpointAliases":
                                                    type: "array"
                                                    description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "name":
                                                                type: "string"
                                                            "uri":
                                                                type: "string"
                                                                format: "uri"
                                                        x-stoplight: {"id": "nze0lsoxbeeyf"}
                                                "accessTokenType":
                                                    type: "string"
                                                    description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                                "tlsClientCertificateBoundAccessTokens":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                                "accessTokenDuration":
                                                    type: "integer"
                                                    description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                                    format: "int64"
                                                "singleAccessTokenPerSubject":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                                "accessTokenSignAlg":
                                                    type: "string"
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "accessTokenSignatureKeyId":
                                                    type: "string"
                                                    description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                                "refreshTokenDuration":
                                                    type: "integer"
                                                    description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                                    format: "int64"
                                                "refreshTokenDurationKept":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                                "refreshTokenDurationReset":
                                                    type: "boolean"
                                                    description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                                "refreshTokenKept":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                                "supportedScopes":
                                                    type: "array"
                                                    description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "name":
                                                                type: "string"
                                                                description: "The name of the scope."
                                                            "defaultEntry":
                                                                type: "boolean"
                                                                description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                            "description":
                                                                type: "string"
                                                                description: "The description about the scope."
                                                            "descriptions":
                                                                type: "array"
                                                                description: "The descriptions about this scope in multiple languages."
                                                                items:
                                                                    type: "object"
                                                                    properties:
                                                                        "tag":
                                                                            type: "string"
                                                                            description: "The language tag part."
                                                                        "value":
                                                                            type: "string"
                                                                            description: "The value part."
                                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                                            "attributes":
                                                                type: "array"
                                                                description: "The attributes of the scope."
                                                                items:
                                                                    properties:
                                                                        "key":
                                                                            type: "string"
                                                                            description: "The key part."
                                                                        "value":
                                                                            type: "string"
                                                                            description: "The value part."
                                                                    type: "object"
                                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                                        x-stoplight: {"id": "2l5ay2evehuem"}
                                                "scopeRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                                "idTokenDuration":
                                                    type: "integer"
                                                    description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                                    format: "int64"
                                                "allowableClockSkew":
                                                    type: "integer"
                                                    description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                                    format: "int32"
                                                "supportedClaimTypes":
                                                    type: "array"
                                                    description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "NORMAL"
                                                            - "AGGREGATED"
                                                            - "DISTRIBUTED"
                                                        x-stoplight: {"id": "d2fcz22i8zrtf"}
                                                "supportedClaimLocales":
                                                    type: "array"
                                                    description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    items:
                                                        type: "string"
                                                "supportedClaims":
                                                    type: "array"
                                                    description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                                    items:
                                                        type: "string"
                                                "claimShortcutRestrictive":
                                                    type: "boolean"
                                                    description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                                "jwksUri":
                                                    type: "string"
                                                    description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "directJwksEndpointEnabled":
                                                    type: "boolean"
                                                    description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                                "jwks":
                                                    type: "string"
                                                    description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                                "idTokenSignatureKeyId":
                                                    type: "string"
                                                    description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                                "userInfoSignatureKeyId":
                                                    type: "string"
                                                    description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                                "authorizationSignatureKeyId":
                                                    type: "string"
                                                    description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                                "userInfoEndpoint":
                                                    type: "string"
                                                    description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "directUserInfoEndpointEnabled":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                                "dynamicRegistrationSupported":
                                                    type: "boolean"
                                                    description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                                "registrationEndpoint":
                                                    type: "string"
                                                    description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "registrationManagementEndpoint":
                                                    type: "string"
                                                    description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                                    format: "uri"
                                                "policyUri":
                                                    type: "string"
                                                    description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "tosUri":
                                                    type: "string"
                                                    description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "serviceDocumentation":
                                                    type: "string"
                                                    description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "backchannelAuthenticationEndpoint":
                                                    type: "string"
                                                    description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                                    format: "uri"
                                                "supportedBackchannelTokenDeliveryModes":
                                                    type: "array"
                                                    description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "PING"
                                                            - "POLL"
                                                            - "PUSH"
                                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                                "backchannelAuthReqIdDuration":
                                                    type: "integer"
                                                    description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                                    format: "int32"
                                                "backchannelPollingInterval":
                                                    type: "integer"
                                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                                    format: "int32"
                                                "backchannelUserCodeParameterSupported":
                                                    type: "boolean"
                                                    description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                                "backchannelBindingMessageRequiredInFapi":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                                "deviceAuthorizationEndpoint":
                                                    type: "string"
                                                    description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                                    format: "uri"
                                                "deviceVerificationUri":
                                                    type: "string"
                                                    description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                                    format: "uri"
                                                "deviceVerificationUriComplete":
                                                    type: "string"
                                                    description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                                    format: "uri"
                                                "deviceFlowCodeDuration":
                                                    type: "integer"
                                                    description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                                    format: "int32"
                                                "deviceFlowPollingInterval":
                                                    type: "integer"
                                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                                    format: "int32"
                                                "userCodeCharset":
                                                    type: "string"
                                                    enum:
                                                        - "BASE20"
                                                        - "NUMERIC"
                                                    description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                                    x-stoplight: {"id": "xcfsjhdfggoez"}
                                                "userCodeLength":
                                                    type: "integer"
                                                    description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                                    format: "int32"
                                                "supportedTrustFrameworks":
                                                    type: "array"
                                                    description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                    items:
                                                        type: "string"
                                                "supportedEvidence":
                                                    type: "array"
                                                    description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                    items:
                                                        type: "string"
                                                "supportedIdentityDocuments":
                                                    type: "array"
                                                    description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                    items:
                                                        type: "string"
                                                "supportedVerificationMethods":
                                                    type: "array"
                                                    description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                    items:
                                                        type: "string"
                                                "supportedVerifiedClaims":
                                                    type: "array"
                                                    description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                    items:
                                                        type: "string"
                                                "verifiedClaimsValidationSchemaSet":
                                                    type: "string"
                                                    enum:
                                                        - "standard"
                                                        - "standard+id_document"
                                                    description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of this service.\n"
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                                "nbfOptional":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                                "issSuppressed":
                                                    type: "boolean"
                                                    description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                                "supportedCustomClientMetadata":
                                                    type: "array"
                                                    description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                                    items:
                                                        type: "string"
                                                "tokenExpirationLinked":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                                "frontChannelRequestObjectEncryptionRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                                "requestObjectEncryptionAlgMatchRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                                "requestObjectEncryptionEncMatchRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                                "hsmEnabled":
                                                    type: "boolean"
                                                    description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                                "hsks":
                                                    type: "array"
                                                    description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                                    items:
                                                        type: "object"
                                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                                        properties:
                                                            "kty":
                                                                type: "string"
                                                                description: "The key type (EC or RSA)\n"
                                                            "use":
                                                                type: "string"
                                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                                            "kid":
                                                                type: "string"
                                                                description: "Key ID for the key on the HSM.\n"
                                                            "hsmName":
                                                                type: "string"
                                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                                            "handle":
                                                                type: "string"
                                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                                            "publicKey":
                                                                type: "string"
                                                                description: "The public key that corresponds to the key on the HSM.\n"
                                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                                                "grantManagementEndpoint":
                                                    type: "string"
                                                    description: "The URL of the grant management endpoint.\n"
                                                "grantManagementActionRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                                "unauthorizedOnClientConfigSupported":
                                                    type: "boolean"
                                                    description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                                "dcrScopeUsedAsRequestable":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                                "endSessionEndpoint":
                                                    type: "string"
                                                    description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                    format: "uri"
                                                "loopbackRedirectionUriVariable":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                                "requestObjectAudienceChecked":
                                                    type: "boolean"
                                                    description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                                "accessTokenForExternalAttachmentEmbedded":
                                                    type: "boolean"
                                                    description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                                "authorityHints":
                                                    type: "array"
                                                    description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                                    items:
                                                        type: "string"
                                                "federationEnabled":
                                                    type: "boolean"
                                                    description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                                "federationJwks":
                                                    type: "string"
                                                    description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                                "federationSignatureKeyId":
                                                    type: "string"
                                                    description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                                "federationConfigurationDuration":
                                                    type: "integer"
                                                    description: "The duration of the entity configuration in seconds.\n"
                                                "federationRegistrationEndpoint":
                                                    type: "string"
                                                    description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                                "organizationName":
                                                    type: "string"
                                                    description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                                "predefinedTransformedClaims":
                                                    type: "string"
                                                    description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                                "refreshTokenIdempotent":
                                                    type: "boolean"
                                                    description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                                "signedJwksUri":
                                                    type: "string"
                                                    description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                                "supportedAttachments":
                                                    type: "array"
                                                    description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "EMBEDDED"
                                                            - "EXTERNAL"
                                                        description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                                "supportedDigestAlgorithms":
                                                    type: "array"
                                                    description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                                    items:
                                                        type: "string"
                                                "supportedDocuments":
                                                    type: "array"
                                                    description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                                    items:
                                                        type: "string"
                                                "supportedDocumentsMethods":
                                                    type: "array"
                                                    description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                                    items:
                                                        type: "string"
                                                "supportedDocumentsValidationMethods":
                                                    type: "array"
                                                    description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                                    items:
                                                        type: "string"
                                                "supportedDocumentsVerificationMethods":
                                                    type: "array"
                                                    description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                                    items:
                                                        type: "string"
                                                "supportedElectronicRecords":
                                                    type: "array"
                                                    description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                                    items:
                                                        type: "string"
                                                "supportedClientRegistrationTypes":
                                                    type: "array"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "AUTOMATIC"
                                                            - "EXPLICIT"
                                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                                "tokenExchangeByIdentifiableClientsOnly":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                                "tokenExchangeByConfidentialClientsOnly":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                                "tokenExchangeByPermittedClientsOnly":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                                "tokenExchangeEncryptedJwtRejected":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                                "tokenExchangeUnsignedJwtRejected":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                                "jwtGrantByIdentifiableClientsOnly":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                                "jwtGrantEncryptedJwtRejected":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                                "jwtGrantUnsignedJwtRejected":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                                "dcrDuplicateSoftwareIdBlocked":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                                "trustAnchors":
                                                    type: "array"
                                                    description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "entityId":
                                                                type: "string"
                                                                description: "the entity ID of the trust anchor\n"
                                                            "jwks":
                                                                type: "string"
                                                                description: "the JWK Set document containing public keys of the trust anchor\n"
                                                "openidDroppedOnRefreshWithoutOfflineAccess":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                                "supportedDocumentsCheckMethods":
                                                    type: "array"
                                                    description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                                    items:
                                                        type: "string"
                                                "rsResponseSigned":
                                                    type: "boolean"
                                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                                "cnonceDuration":
                                                    type: "integer"
                                                    description: "The duration of `c_nonce`.\n"
                                                    format: "int64"
                                                "dpopNonceRequired":
                                                    type: "boolean"
                                                    description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                                "verifiableCredentialsEnabled":
                                                    type: "boolean"
                                                    description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                                "credentialJwksUri":
                                                    type: "string"
                                                    description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                                "credentialOfferDuration":
                                                    type: "integer"
                                                    description: "The default duration of credential offers in seconds.\n"
                                                    format: "int64"
                                                "dpopNonceDuration":
                                                    type: "integer"
                                                    description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                                    format: "int64"
                                                "preAuthorizedGrantAnonymousAccessSupported":
                                                    type: "boolean"
                                                    description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                                "credentialTransactionDuration":
                                                    type: "integer"
                                                    description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                                    format: "int64"
                                                "introspectionSignatureKeyId":
                                                    type: "string"
                                                    description: "The key ID of the key for signing introspection responses.\n"
                                                "resourceSignatureKeyId":
                                                    type: "string"
                                                    description: "The key ID of the key for signing introspection responses.\n"
                                                "userPinLength":
                                                    type: "integer"
                                                    description: "The default length of user PINs.\n"
                                                    format: "int32"
                                                "supportedPromptValues":
                                                    type: "array"
                                                    description: "The supported `prompt` values.\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "NONE"
                                                            - "LOGIN"
                                                            - "CONSENT"
                                                            - "SELECT_ACCOUNT"
                                                        description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                                        x-stoplight: {"id": "wtedd4f92crd8"}
                                                "idTokenReissuable":
                                                    type: "boolean"
                                                    description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                                "credentialJwks":
                                                    type: "string"
                                                    description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                                "fapiModes":
                                                    type: "array"
                                                    description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "FAPI1_ADVANCED"
                                                            - "FAPI1_BASELINE"
                                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                            - "FAPI2_SECURITY"
                                                "credentialDuration":
                                                    type: "integer"
                                                    description: "The default duration of verifiable credentials in seconds.\n"
                                                    format: "int64"
                                                "credentialIssuerMetadata":
                                                    type: "object"
                                                    properties:
                                                        "credentialIssuer":
                                                            type: "string"
                                                            description: "The identifier of a credential request."
                                                        "authorizationServer":
                                                            type: "string"
                                                            description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                                        "credentialEndpoint":
                                                            type: "boolean"
                                                            description: "The URL of the credential endpoint of the credential issuer."
                                                        "batchCredentialEndpoint":
                                                            type: "integer"
                                                            description: "The URL of the batch credential endpoint of the credential issuer."
                                                            format: "int64"
                                                        "deferredCredentialEndpoint":
                                                            type: "string"
                                                            description: "The URL of the deferred credential endpoint of the credential issuer."
                                                        "credentialsSupported":
                                                            type: "boolean"
                                                            description: "A JSON array describing supported credentials."
                                                    x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                                "idTokenAudType":
                                                    type: "string"
                                                    description: "The type of the `aud` claim in ID tokens.\n"
                                            type: "object"
                                            x-stoplight: {"id": "906lx1kk8hpxi"}
                            examples:
                                "full":
                                    summary: "Example showing the full service view."
                                    value: {"start": 0, "end": 5, "totalCount": 1, "services": [{"accessTokenDuration": 3600, "accessTokenType": "Bearer", "allowableClockSkew": 0, "apiKey": 21653835348762, "apiSecret": "uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authorizationEndpoint": "https://as.example.com/authz", "authorizationResponseDuration": 0, "backchannelAuthReqIdDuration": 0, "backchannelBindingMessageRequiredInFapi": false, "backchannelPollingInterval": 0, "backchannelUserCodeParameterSupported": false, "claimShortcutRestrictive": false, "clientIdAliasEnabled": true, "createdAt": 1639373421000, "dcrScopeUsedAsRequestable": false, "deviceFlowCodeDuration": 0, "deviceFlowPollingInterval": 0, "directAuthorizationEndpointEnabled": false, "directIntrospectionEndpointEnabled": false, "directJwksEndpointEnabled": false, "directRevocationEndpointEnabled": false, "directTokenEndpointEnabled": false, "directUserInfoEndpointEnabled": false, "dynamicRegistrationSupported": false, "errorDescriptionOmitted": false, "errorUriOmitted": false, "frontChannelRequestObjectEncryptionRequired": false, "grantManagementActionRequired": false, "hsmEnabled": false, "idTokenDuration": 0, "introspectionEndpoint": "https://my-service.example.com/introspection", "issSuppressed": false, "issuer": "https://my-service.example.com", "metadata": [{"key": "clientCount", "value": "1"}], "missingClientIdAllowed": false, "modifiedAt": 1639373421000, "mutualTlsValidatePkiCertChain": false, "nbfOptional": false, "number": 5041, "parRequired": false, "pkceRequired": true, "pkceS256Required": false, "pushedAuthReqDuration": 0, "refreshTokenDuration": 3600, "refreshTokenDurationKept": false, "refreshTokenDurationReset": false, "refreshTokenKept": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "revocationEndpoint": "https://my-service.example.com/revocation", "scopeRequired": false, "serviceName": "My service", "serviceOwnerNumber": 2, "singleAccessTokenPerSubject": false, "supportedClaimTypes": ["NORMAL"], "supportedDisplays": ["PAGE"], "supportedGrantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "supportedIntrospectionAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedResponseTypes": ["CODE"], "supportedRevocationAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedScopes": [{"defaultEntry": false, "description": "A permission to read your history.", "name": "history.read"}, {"defaultEntry": false, "description": "A permission to read your timeline.", "name": "timeline.read"}], "supportedTokenAuthMethods": ["CLIENT_SECRET_BASIC"], "tlsClientCertificateBoundAccessTokens": false, "tokenEndpoint": "https://my-service.example.com/token", "tokenExpirationLinked": false, "traditionalRequestObjectProcessingApplied": false, "unauthorizedOnClientConfigSupported": false, "userCodeLength": 0}]}
                                "limited":
                                    summary: "Example showing the limited service view."
                                    value: {"start": 0, "end": 5, "totalCount": 1, "services": [{"apiKey": 21653835348762, "clientIdAliasEnabled": true, "number": 5041, "serviceName": "My service"}]}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/9503564192/service/get/list?start=0\\&end=5 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nint start = 0;\nint end = 5;\n\napi.getServiceList(start, end);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nstart = 0\nend = 5\n\napi.getServiceList(start, end)\n"}]
            x-stoplight: {"id": "uybtwpv9n3ndi"}
    "/api/service/create":
        post:
            tags:
                - "Service Management"
            summary: "Create Service"
            description: "Create a new service.\n"
            operationId: "service_create_api"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                    format: "int32"
                                    readOnly: true
                                "serviceName":
                                    type: "string"
                                    description: "The name of this service."
                                "issuer":
                                    type: "string"
                                    description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                "description":
                                    type: "string"
                                    description: "The description about the service."
                                "apiKey":
                                    type: "integer"
                                    description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always `true`."
                                "metadata":
                                    type: "array"
                                    description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                    format: "int64"
                                    readOnly: true
                                "authenticationCallbackEndpoint":
                                    type: "string"
                                    description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                    format: "uri"
                                "authenticationCallbackApiKey":
                                    type: "string"
                                    description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                "authenticationCallbackApiSecret":
                                    type: "string"
                                    description: "API secret for `basic` authentication at the authentication callback endpoint."
                                "supportedAcrs":
                                    type: "array"
                                    description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    readOnly: true
                                    items:
                                        type: "string"
                                "supportedGrantTypes":
                                    type: "array"
                                    description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "supportedResponseTypes":
                                    type: "array"
                                    description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "supportedAuthorizationDetailsTypes":
                                    type: "array"
                                    description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                    items:
                                        type: "string"
                                "supportedServiceProfiles":
                                    type: "array"
                                    description: "The profiles that this service supports.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI"
                                            - "OPEN_BANKING"
                                        x-stoplight: {"id": "snodce1oa3g4u"}
                                "errorDescriptionOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                "errorUriOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                "authorizationEndpoint":
                                    type: "string"
                                    description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directAuthorizationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                "supportedUiLocales":
                                    type: "array"
                                    description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedDisplays":
                                    type: "array"
                                    description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PAGE"
                                            - "POPUP"
                                            - "TOUCH"
                                            - "WAP"
                                        description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                        x-stoplight: {"id": "269jffv4dhxg8"}
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "authorizationResponseDuration":
                                    type: "integer"
                                    description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                    format: "int64"
                                "tokenEndpoint":
                                    type: "string"
                                    description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directTokenEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                "supportedTokenAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "missingClientIdAllowed":
                                    type: "boolean"
                                    description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                "revocationEndpoint":
                                    type: "string"
                                    description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                    format: "uri"
                                "directRevocationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                "supportedRevocationAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the revocation endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "introspectionEndpoint":
                                    type: "string"
                                    description: "The URI of the introspection endpoint."
                                    format: "uri"
                                "directIntrospectionEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                "supportedIntrospectionAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the introspection endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "pushedAuthReqEndpoint":
                                    type: "string"
                                    description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                    format: "uri"
                                "pushedAuthReqDuration":
                                    type: "integer"
                                    description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                    format: "int64"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                "traditionalRequestObjectProcessingApplied":
                                    type: "boolean"
                                    description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                "mutualTlsValidatePkiCertChain":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                "trustedRootCertificates":
                                    type: "array"
                                    description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                    items:
                                        type: "string"
                                "mtlsEndpointAliases":
                                    type: "array"
                                    description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                            "uri":
                                                type: "string"
                                                format: "uri"
                                        x-stoplight: {"id": "nze0lsoxbeeyf"}
                                "accessTokenType":
                                    type: "string"
                                    description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                "accessTokenDuration":
                                    type: "integer"
                                    description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                    format: "int64"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                "accessTokenSignAlg":
                                    type: "string"
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "accessTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                "refreshTokenDuration":
                                    type: "integer"
                                    description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                    format: "int64"
                                "refreshTokenDurationKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                "refreshTokenDurationReset":
                                    type: "boolean"
                                    description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                "refreshTokenKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                "supportedScopes":
                                    type: "array"
                                    description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                                description: "The name of the scope."
                                            "defaultEntry":
                                                type: "boolean"
                                                description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                            "description":
                                                type: "string"
                                                description: "The description about the scope."
                                            "descriptions":
                                                type: "array"
                                                description: "The descriptions about this scope in multiple languages."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of the scope."
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                        x-stoplight: {"id": "2l5ay2evehuem"}
                                "scopeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                "idTokenDuration":
                                    type: "integer"
                                    description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                    format: "int64"
                                "allowableClockSkew":
                                    type: "integer"
                                    description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                    format: "int32"
                                "supportedClaimTypes":
                                    type: "array"
                                    description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NORMAL"
                                            - "AGGREGATED"
                                            - "DISTRIBUTED"
                                        x-stoplight: {"id": "d2fcz22i8zrtf"}
                                "supportedClaimLocales":
                                    type: "array"
                                    description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedClaims":
                                    type: "array"
                                    description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                    items:
                                        type: "string"
                                "claimShortcutRestrictive":
                                    type: "boolean"
                                    description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                "jwksUri":
                                    type: "string"
                                    description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directJwksEndpointEnabled":
                                    type: "boolean"
                                    description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                "idTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "userInfoSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "authorizationSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                "userInfoEndpoint":
                                    type: "string"
                                    description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directUserInfoEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                "dynamicRegistrationSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                "registrationEndpoint":
                                    type: "string"
                                    description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "registrationManagementEndpoint":
                                    type: "string"
                                    description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                    format: "uri"
                                "policyUri":
                                    type: "string"
                                    description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "tosUri":
                                    type: "string"
                                    description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "serviceDocumentation":
                                    type: "string"
                                    description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "backchannelAuthenticationEndpoint":
                                    type: "string"
                                    description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    format: "uri"
                                "supportedBackchannelTokenDeliveryModes":
                                    type: "array"
                                    description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PING"
                                            - "POLL"
                                            - "PUSH"
                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                "backchannelAuthReqIdDuration":
                                    type: "integer"
                                    description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                    format: "int32"
                                "backchannelPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                    format: "int32"
                                "backchannelUserCodeParameterSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                "backchannelBindingMessageRequiredInFapi":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                "deviceAuthorizationEndpoint":
                                    type: "string"
                                    description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                    format: "uri"
                                "deviceVerificationUri":
                                    type: "string"
                                    description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                    format: "uri"
                                "deviceVerificationUriComplete":
                                    type: "string"
                                    description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                    format: "uri"
                                "deviceFlowCodeDuration":
                                    type: "integer"
                                    description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                    format: "int32"
                                "deviceFlowPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                    format: "int32"
                                "userCodeCharset":
                                    type: "string"
                                    enum:
                                        - "BASE20"
                                        - "NUMERIC"
                                    description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                    x-stoplight: {"id": "xcfsjhdfggoez"}
                                "userCodeLength":
                                    type: "integer"
                                    description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                    format: "int32"
                                "supportedTrustFrameworks":
                                    type: "array"
                                    description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedEvidence":
                                    type: "array"
                                    description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedIdentityDocuments":
                                    type: "array"
                                    description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerificationMethods":
                                    type: "array"
                                    description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerifiedClaims":
                                    type: "array"
                                    description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "verifiedClaimsValidationSchemaSet":
                                    type: "string"
                                    enum:
                                        - "standard"
                                        - "standard+id_document"
                                    description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this service.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "nbfOptional":
                                    type: "boolean"
                                    description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                "issSuppressed":
                                    type: "boolean"
                                    description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                "supportedCustomClientMetadata":
                                    type: "array"
                                    description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                    items:
                                        type: "string"
                                "tokenExpirationLinked":
                                    type: "boolean"
                                    description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                "hsmEnabled":
                                    type: "boolean"
                                    description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                "hsks":
                                    type: "array"
                                    description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                    items:
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                                "grantManagementEndpoint":
                                    type: "string"
                                    description: "The URL of the grant management endpoint.\n"
                                "grantManagementActionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                "unauthorizedOnClientConfigSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                "dcrScopeUsedAsRequestable":
                                    type: "boolean"
                                    description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                "endSessionEndpoint":
                                    type: "string"
                                    description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "loopbackRedirectionUriVariable":
                                    type: "boolean"
                                    description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                "requestObjectAudienceChecked":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                "accessTokenForExternalAttachmentEmbedded":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                "authorityHints":
                                    type: "array"
                                    description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    items:
                                        type: "string"
                                "federationEnabled":
                                    type: "boolean"
                                    description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                "federationJwks":
                                    type: "string"
                                    description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                "federationSignatureKeyId":
                                    type: "string"
                                    description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                "federationConfigurationDuration":
                                    type: "integer"
                                    description: "The duration of the entity configuration in seconds.\n"
                                "federationRegistrationEndpoint":
                                    type: "string"
                                    description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "predefinedTransformedClaims":
                                    type: "string"
                                    description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                "refreshTokenIdempotent":
                                    type: "boolean"
                                    description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                "supportedAttachments":
                                    type: "array"
                                    description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "EMBEDDED"
                                            - "EXTERNAL"
                                        description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                "supportedDigestAlgorithms":
                                    type: "array"
                                    description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "supportedDocuments":
                                    type: "array"
                                    description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsMethods":
                                    type: "array"
                                    description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsValidationMethods":
                                    type: "array"
                                    description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsVerificationMethods":
                                    type: "array"
                                    description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedElectronicRecords":
                                    type: "array"
                                    description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedClientRegistrationTypes":
                                    type: "array"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "tokenExchangeByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                "tokenExchangeByConfidentialClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                "tokenExchangeByPermittedClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                "tokenExchangeEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                "tokenExchangeUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                "jwtGrantByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "dcrDuplicateSoftwareIdBlocked":
                                    type: "boolean"
                                    description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                "trustAnchors":
                                    type: "array"
                                    description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of the trust anchor\n"
                                            "jwks":
                                                type: "string"
                                                description: "the JWK Set document containing public keys of the trust anchor\n"
                                "openidDroppedOnRefreshWithoutOfflineAccess":
                                    type: "boolean"
                                    description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                "supportedDocumentsCheckMethods":
                                    type: "array"
                                    description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "rsResponseSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "cnonceDuration":
                                    type: "integer"
                                    description: "The duration of `c_nonce`.\n"
                                    format: "int64"
                                "dpopNonceRequired":
                                    type: "boolean"
                                    description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                "verifiableCredentialsEnabled":
                                    type: "boolean"
                                    description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                "credentialJwksUri":
                                    type: "string"
                                    description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                "credentialOfferDuration":
                                    type: "integer"
                                    description: "The default duration of credential offers in seconds.\n"
                                    format: "int64"
                                "dpopNonceDuration":
                                    type: "integer"
                                    description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                    format: "int64"
                                "preAuthorizedGrantAnonymousAccessSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                "credentialTransactionDuration":
                                    type: "integer"
                                    description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                    format: "int64"
                                "introspectionSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "resourceSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "userPinLength":
                                    type: "integer"
                                    description: "The default length of user PINs.\n"
                                    format: "int32"
                                "supportedPromptValues":
                                    type: "array"
                                    description: "The supported `prompt` values.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "LOGIN"
                                            - "CONSENT"
                                            - "SELECT_ACCOUNT"
                                        description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                        x-stoplight: {"id": "wtedd4f92crd8"}
                                "idTokenReissuable":
                                    type: "boolean"
                                    description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                "credentialJwks":
                                    type: "string"
                                    description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                "credentialDuration":
                                    type: "integer"
                                    description: "The default duration of verifiable credentials in seconds.\n"
                                    format: "int64"
                                "credentialIssuerMetadata":
                                    type: "object"
                                    properties:
                                        "credentialIssuer":
                                            type: "string"
                                            description: "The identifier of a credential request."
                                        "authorizationServer":
                                            type: "string"
                                            description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                        "credentialEndpoint":
                                            type: "boolean"
                                            description: "The URL of the credential endpoint of the credential issuer."
                                        "batchCredentialEndpoint":
                                            type: "integer"
                                            description: "The URL of the batch credential endpoint of the credential issuer."
                                            format: "int64"
                                        "deferredCredentialEndpoint":
                                            type: "string"
                                            description: "The URL of the deferred credential endpoint of the credential issuer."
                                        "credentialsSupported":
                                            type: "boolean"
                                            description: "A JSON array describing supported credentials."
                                    x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                "idTokenAudType":
                                    type: "string"
                                    description: "The type of the `aud` claim in ID tokens.\n"
                            type: "object"
                            x-stoplight: {"id": "906lx1kk8hpxi"}
                        examples:
                            "default":
                                value: {"serviceName": "My service", "issuer": "https://my-service.example.com", "clientIdAliasEnabled": true, "supportedGrantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "supportedResponseTypes": ["CODE"], "authorizationEndpoint": "https://my-service.example.com/authz", "pkceRequired": true, "tokenEndpoint": "https://my-service.example.com/token", "supportedTokenAuthMethods": ["CLIENT_SECRET_BASIC"], "revocationEndpoint": "https://my-service.example.com/revocation", "supportedRevocationAuthMethods": ["CLIENT_SECRET_BASIC"], "introspectionEndpoint": "https://my-service.example.com/introspection", "supportedIntrospectionAuthMethods": ["CLIENT_SECRET_BASIC"], "accessTokenType": "Bearer", "accessTokenDuration": 3600, "refreshTokenDuration": 3600, "supportedScopes": [{"name": "timeline.read", "defaultEntry": false, "description": "A permission to read your timeline."}, {"name": "history.read", "defaultEntry": false, "description": "A permission to read your history."}], "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}]}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                    format: "int32"
                                    readOnly: true
                                "serviceName":
                                    type: "string"
                                    description: "The name of this service."
                                "issuer":
                                    type: "string"
                                    description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                "description":
                                    type: "string"
                                    description: "The description about the service."
                                "apiKey":
                                    type: "integer"
                                    description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always `true`."
                                "metadata":
                                    type: "array"
                                    description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                    format: "int64"
                                    readOnly: true
                                "authenticationCallbackEndpoint":
                                    type: "string"
                                    description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                    format: "uri"
                                "authenticationCallbackApiKey":
                                    type: "string"
                                    description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                "authenticationCallbackApiSecret":
                                    type: "string"
                                    description: "API secret for `basic` authentication at the authentication callback endpoint."
                                "supportedAcrs":
                                    type: "array"
                                    description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    readOnly: true
                                    items:
                                        type: "string"
                                "supportedGrantTypes":
                                    type: "array"
                                    description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "supportedResponseTypes":
                                    type: "array"
                                    description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "supportedAuthorizationDetailsTypes":
                                    type: "array"
                                    description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                    items:
                                        type: "string"
                                "supportedServiceProfiles":
                                    type: "array"
                                    description: "The profiles that this service supports.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI"
                                            - "OPEN_BANKING"
                                        x-stoplight: {"id": "snodce1oa3g4u"}
                                "errorDescriptionOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                "errorUriOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                "authorizationEndpoint":
                                    type: "string"
                                    description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directAuthorizationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                "supportedUiLocales":
                                    type: "array"
                                    description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedDisplays":
                                    type: "array"
                                    description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PAGE"
                                            - "POPUP"
                                            - "TOUCH"
                                            - "WAP"
                                        description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                        x-stoplight: {"id": "269jffv4dhxg8"}
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "authorizationResponseDuration":
                                    type: "integer"
                                    description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                    format: "int64"
                                "tokenEndpoint":
                                    type: "string"
                                    description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directTokenEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                "supportedTokenAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "missingClientIdAllowed":
                                    type: "boolean"
                                    description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                "revocationEndpoint":
                                    type: "string"
                                    description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                    format: "uri"
                                "directRevocationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                "supportedRevocationAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the revocation endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "introspectionEndpoint":
                                    type: "string"
                                    description: "The URI of the introspection endpoint."
                                    format: "uri"
                                "directIntrospectionEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                "supportedIntrospectionAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the introspection endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "pushedAuthReqEndpoint":
                                    type: "string"
                                    description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                    format: "uri"
                                "pushedAuthReqDuration":
                                    type: "integer"
                                    description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                    format: "int64"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                "traditionalRequestObjectProcessingApplied":
                                    type: "boolean"
                                    description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                "mutualTlsValidatePkiCertChain":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                "trustedRootCertificates":
                                    type: "array"
                                    description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                    items:
                                        type: "string"
                                "mtlsEndpointAliases":
                                    type: "array"
                                    description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                            "uri":
                                                type: "string"
                                                format: "uri"
                                        x-stoplight: {"id": "nze0lsoxbeeyf"}
                                "accessTokenType":
                                    type: "string"
                                    description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                "accessTokenDuration":
                                    type: "integer"
                                    description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                    format: "int64"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                "accessTokenSignAlg":
                                    type: "string"
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "accessTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                "refreshTokenDuration":
                                    type: "integer"
                                    description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                    format: "int64"
                                "refreshTokenDurationKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                "refreshTokenDurationReset":
                                    type: "boolean"
                                    description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                "refreshTokenKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                "supportedScopes":
                                    type: "array"
                                    description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                                description: "The name of the scope."
                                            "defaultEntry":
                                                type: "boolean"
                                                description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                            "description":
                                                type: "string"
                                                description: "The description about the scope."
                                            "descriptions":
                                                type: "array"
                                                description: "The descriptions about this scope in multiple languages."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of the scope."
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                        x-stoplight: {"id": "2l5ay2evehuem"}
                                "scopeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                "idTokenDuration":
                                    type: "integer"
                                    description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                    format: "int64"
                                "allowableClockSkew":
                                    type: "integer"
                                    description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                    format: "int32"
                                "supportedClaimTypes":
                                    type: "array"
                                    description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NORMAL"
                                            - "AGGREGATED"
                                            - "DISTRIBUTED"
                                        x-stoplight: {"id": "d2fcz22i8zrtf"}
                                "supportedClaimLocales":
                                    type: "array"
                                    description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedClaims":
                                    type: "array"
                                    description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                    items:
                                        type: "string"
                                "claimShortcutRestrictive":
                                    type: "boolean"
                                    description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                "jwksUri":
                                    type: "string"
                                    description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directJwksEndpointEnabled":
                                    type: "boolean"
                                    description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                "idTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "userInfoSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "authorizationSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                "userInfoEndpoint":
                                    type: "string"
                                    description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directUserInfoEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                "dynamicRegistrationSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                "registrationEndpoint":
                                    type: "string"
                                    description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "registrationManagementEndpoint":
                                    type: "string"
                                    description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                    format: "uri"
                                "policyUri":
                                    type: "string"
                                    description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "tosUri":
                                    type: "string"
                                    description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "serviceDocumentation":
                                    type: "string"
                                    description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "backchannelAuthenticationEndpoint":
                                    type: "string"
                                    description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    format: "uri"
                                "supportedBackchannelTokenDeliveryModes":
                                    type: "array"
                                    description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PING"
                                            - "POLL"
                                            - "PUSH"
                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                "backchannelAuthReqIdDuration":
                                    type: "integer"
                                    description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                    format: "int32"
                                "backchannelPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                    format: "int32"
                                "backchannelUserCodeParameterSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                "backchannelBindingMessageRequiredInFapi":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                "deviceAuthorizationEndpoint":
                                    type: "string"
                                    description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                    format: "uri"
                                "deviceVerificationUri":
                                    type: "string"
                                    description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                    format: "uri"
                                "deviceVerificationUriComplete":
                                    type: "string"
                                    description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                    format: "uri"
                                "deviceFlowCodeDuration":
                                    type: "integer"
                                    description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                    format: "int32"
                                "deviceFlowPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                    format: "int32"
                                "userCodeCharset":
                                    type: "string"
                                    enum:
                                        - "BASE20"
                                        - "NUMERIC"
                                    description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                    x-stoplight: {"id": "xcfsjhdfggoez"}
                                "userCodeLength":
                                    type: "integer"
                                    description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                    format: "int32"
                                "supportedTrustFrameworks":
                                    type: "array"
                                    description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedEvidence":
                                    type: "array"
                                    description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedIdentityDocuments":
                                    type: "array"
                                    description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerificationMethods":
                                    type: "array"
                                    description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerifiedClaims":
                                    type: "array"
                                    description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "verifiedClaimsValidationSchemaSet":
                                    type: "string"
                                    enum:
                                        - "standard"
                                        - "standard+id_document"
                                    description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this service.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "nbfOptional":
                                    type: "boolean"
                                    description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                "issSuppressed":
                                    type: "boolean"
                                    description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                "supportedCustomClientMetadata":
                                    type: "array"
                                    description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                    items:
                                        type: "string"
                                "tokenExpirationLinked":
                                    type: "boolean"
                                    description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                "hsmEnabled":
                                    type: "boolean"
                                    description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                "hsks":
                                    type: "array"
                                    description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                    items:
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                                "grantManagementEndpoint":
                                    type: "string"
                                    description: "The URL of the grant management endpoint.\n"
                                "grantManagementActionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                "unauthorizedOnClientConfigSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                "dcrScopeUsedAsRequestable":
                                    type: "boolean"
                                    description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                "endSessionEndpoint":
                                    type: "string"
                                    description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "loopbackRedirectionUriVariable":
                                    type: "boolean"
                                    description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                "requestObjectAudienceChecked":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                "accessTokenForExternalAttachmentEmbedded":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                "authorityHints":
                                    type: "array"
                                    description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    items:
                                        type: "string"
                                "federationEnabled":
                                    type: "boolean"
                                    description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                "federationJwks":
                                    type: "string"
                                    description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                "federationSignatureKeyId":
                                    type: "string"
                                    description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                "federationConfigurationDuration":
                                    type: "integer"
                                    description: "The duration of the entity configuration in seconds.\n"
                                "federationRegistrationEndpoint":
                                    type: "string"
                                    description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "predefinedTransformedClaims":
                                    type: "string"
                                    description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                "refreshTokenIdempotent":
                                    type: "boolean"
                                    description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                "supportedAttachments":
                                    type: "array"
                                    description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "EMBEDDED"
                                            - "EXTERNAL"
                                        description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                "supportedDigestAlgorithms":
                                    type: "array"
                                    description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "supportedDocuments":
                                    type: "array"
                                    description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsMethods":
                                    type: "array"
                                    description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsValidationMethods":
                                    type: "array"
                                    description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsVerificationMethods":
                                    type: "array"
                                    description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedElectronicRecords":
                                    type: "array"
                                    description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedClientRegistrationTypes":
                                    type: "array"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "tokenExchangeByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                "tokenExchangeByConfidentialClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                "tokenExchangeByPermittedClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                "tokenExchangeEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                "tokenExchangeUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                "jwtGrantByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "dcrDuplicateSoftwareIdBlocked":
                                    type: "boolean"
                                    description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                "trustAnchors":
                                    type: "array"
                                    description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of the trust anchor\n"
                                            "jwks":
                                                type: "string"
                                                description: "the JWK Set document containing public keys of the trust anchor\n"
                                "openidDroppedOnRefreshWithoutOfflineAccess":
                                    type: "boolean"
                                    description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                "supportedDocumentsCheckMethods":
                                    type: "array"
                                    description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "rsResponseSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "cnonceDuration":
                                    type: "integer"
                                    description: "The duration of `c_nonce`.\n"
                                    format: "int64"
                                "dpopNonceRequired":
                                    type: "boolean"
                                    description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                "verifiableCredentialsEnabled":
                                    type: "boolean"
                                    description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                "credentialJwksUri":
                                    type: "string"
                                    description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                "credentialOfferDuration":
                                    type: "integer"
                                    description: "The default duration of credential offers in seconds.\n"
                                    format: "int64"
                                "dpopNonceDuration":
                                    type: "integer"
                                    description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                    format: "int64"
                                "preAuthorizedGrantAnonymousAccessSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                "credentialTransactionDuration":
                                    type: "integer"
                                    description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                    format: "int64"
                                "introspectionSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "resourceSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "userPinLength":
                                    type: "integer"
                                    description: "The default length of user PINs.\n"
                                    format: "int32"
                                "supportedPromptValues":
                                    type: "array"
                                    description: "The supported `prompt` values.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "LOGIN"
                                            - "CONSENT"
                                            - "SELECT_ACCOUNT"
                                        description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                        x-stoplight: {"id": "wtedd4f92crd8"}
                                "idTokenReissuable":
                                    type: "boolean"
                                    description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                "credentialJwks":
                                    type: "string"
                                    description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                "credentialDuration":
                                    type: "integer"
                                    description: "The default duration of verifiable credentials in seconds.\n"
                                    format: "int64"
                                "credentialIssuerMetadata":
                                    type: "object"
                                    properties:
                                        "credentialIssuer":
                                            type: "string"
                                            description: "The identifier of a credential request."
                                        "authorizationServer":
                                            type: "string"
                                            description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                        "credentialEndpoint":
                                            type: "boolean"
                                            description: "The URL of the credential endpoint of the credential issuer."
                                        "batchCredentialEndpoint":
                                            type: "integer"
                                            description: "The URL of the batch credential endpoint of the credential issuer."
                                            format: "int64"
                                        "deferredCredentialEndpoint":
                                            type: "string"
                                            description: "The URL of the deferred credential endpoint of the credential issuer."
                                        "credentialsSupported":
                                            type: "boolean"
                                            description: "A JSON array describing supported credentials."
                                    x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                "idTokenAudType":
                                    type: "string"
                                    description: "The type of the `aud` claim in ID tokens.\n"
                            type: "object"
                            x-stoplight: {"id": "906lx1kk8hpxi"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "number":
                                        type: "integer"
                                        description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                        format: "int32"
                                        readOnly: true
                                    "serviceName":
                                        type: "string"
                                        description: "The name of this service."
                                    "issuer":
                                        type: "string"
                                        description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    "description":
                                        type: "string"
                                        description: "The description about the service."
                                    "apiKey":
                                        type: "integer"
                                        description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                        format: "int64"
                                        readOnly: true
                                    "clientIdAliasEnabled":
                                        type: "boolean"
                                        description: "Deprecated. Always `true`."
                                    "metadata":
                                        type: "array"
                                        description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "createdAt":
                                        type: "integer"
                                        description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                        format: "int64"
                                        readOnly: true
                                    "modifiedAt":
                                        type: "integer"
                                        description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                        format: "int64"
                                        readOnly: true
                                    "authenticationCallbackEndpoint":
                                        type: "string"
                                        description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                        format: "uri"
                                    "authenticationCallbackApiKey":
                                        type: "string"
                                        description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                    "authenticationCallbackApiSecret":
                                        type: "string"
                                        description: "API secret for `basic` authentication at the authentication callback endpoint."
                                    "supportedAcrs":
                                        type: "array"
                                        description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        readOnly: true
                                        items:
                                            type: "string"
                                    "supportedGrantTypes":
                                        type: "array"
                                        description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "AUTHORIZATION_CODE"
                                                - "IMPLICIT"
                                                - "PASSWORD"
                                                - "CLIENT_CREDENTIALS"
                                                - "REFRESH_TOKEN"
                                                - "CIBA"
                                                - "DEVICE_CODE"
                                                - "TOKEN_EXCHANGE"
                                                - "JWT_BEARER"
                                            description: "The grant type of the access token when the access token was created.\n"
                                            x-stoplight: {"id": "033u82mqvyogn"}
                                    "supportedResponseTypes":
                                        type: "array"
                                        description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "CODE"
                                                - "TOKEN"
                                                - "ID_TOKEN"
                                                - "CODE_TOKEN"
                                                - "CODE_ID_TOKEN"
                                                - "ID_TOKEN_TOKEN"
                                                - "CODE_ID_TOKEN_TOKEN"
                                            x-stoplight: {"id": "t7wed2d7tkpy7"}
                                    "supportedAuthorizationDetailsTypes":
                                        type: "array"
                                        description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                        items:
                                            type: "string"
                                    "supportedServiceProfiles":
                                        type: "array"
                                        description: "The profiles that this service supports.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "FAPI"
                                                - "OPEN_BANKING"
                                            x-stoplight: {"id": "snodce1oa3g4u"}
                                    "errorDescriptionOmitted":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                    "errorUriOmitted":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                    "authorizationEndpoint":
                                        type: "string"
                                        description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directAuthorizationEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                    "supportedUiLocales":
                                        type: "array"
                                        description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                    "supportedDisplays":
                                        type: "array"
                                        description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "PAGE"
                                                - "POPUP"
                                                - "TOUCH"
                                                - "WAP"
                                            description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                            x-stoplight: {"id": "269jffv4dhxg8"}
                                    "pkceRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                    "pkceS256Required":
                                        type: "boolean"
                                        description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                    "authorizationResponseDuration":
                                        type: "integer"
                                        description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                        format: "int64"
                                    "tokenEndpoint":
                                        type: "string"
                                        description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directTokenEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                    "supportedTokenAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "missingClientIdAllowed":
                                        type: "boolean"
                                        description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                    "revocationEndpoint":
                                        type: "string"
                                        description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                        format: "uri"
                                    "directRevocationEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                    "supportedRevocationAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported at the revocation endpoint.\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            type: "string"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "introspectionEndpoint":
                                        type: "string"
                                        description: "The URI of the introspection endpoint."
                                        format: "uri"
                                    "directIntrospectionEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                    "supportedIntrospectionAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported at the introspection endpoint.\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            type: "string"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "pushedAuthReqEndpoint":
                                        type: "string"
                                        description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                        format: "uri"
                                    "pushedAuthReqDuration":
                                        type: "integer"
                                        description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                        format: "int64"
                                    "parRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                    "requestObjectRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                    "traditionalRequestObjectProcessingApplied":
                                        type: "boolean"
                                        description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                    "mutualTlsValidatePkiCertChain":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                    "trustedRootCertificates":
                                        type: "array"
                                        description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                        items:
                                            type: "string"
                                    "mtlsEndpointAliases":
                                        type: "array"
                                        description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                "uri":
                                                    type: "string"
                                                    format: "uri"
                                            x-stoplight: {"id": "nze0lsoxbeeyf"}
                                    "accessTokenType":
                                        type: "string"
                                        description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                    "tlsClientCertificateBoundAccessTokens":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                        format: "int64"
                                    "singleAccessTokenPerSubject":
                                        type: "boolean"
                                        description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                    "accessTokenSignAlg":
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "accessTokenSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                    "refreshTokenDuration":
                                        type: "integer"
                                        description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                        format: "int64"
                                    "refreshTokenDurationKept":
                                        type: "boolean"
                                        description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                    "refreshTokenDurationReset":
                                        type: "boolean"
                                        description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                    "refreshTokenKept":
                                        type: "boolean"
                                        description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                    "supportedScopes":
                                        type: "array"
                                        description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "scopeRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                    "idTokenDuration":
                                        type: "integer"
                                        description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                        format: "int64"
                                    "allowableClockSkew":
                                        type: "integer"
                                        description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                        format: "int32"
                                    "supportedClaimTypes":
                                        type: "array"
                                        description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NORMAL"
                                                - "AGGREGATED"
                                                - "DISTRIBUTED"
                                            x-stoplight: {"id": "d2fcz22i8zrtf"}
                                    "supportedClaimLocales":
                                        type: "array"
                                        description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                    "supportedClaims":
                                        type: "array"
                                        description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                        items:
                                            type: "string"
                                    "claimShortcutRestrictive":
                                        type: "boolean"
                                        description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                    "jwksUri":
                                        type: "string"
                                        description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directJwksEndpointEnabled":
                                        type: "boolean"
                                        description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                    "jwks":
                                        type: "string"
                                        description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                    "idTokenSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                    "userInfoSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                    "authorizationSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                    "userInfoEndpoint":
                                        type: "string"
                                        description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directUserInfoEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                    "dynamicRegistrationSupported":
                                        type: "boolean"
                                        description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                    "registrationEndpoint":
                                        type: "string"
                                        description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "registrationManagementEndpoint":
                                        type: "string"
                                        description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                        format: "uri"
                                    "policyUri":
                                        type: "string"
                                        description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "tosUri":
                                        type: "string"
                                        description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "serviceDocumentation":
                                        type: "string"
                                        description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "backchannelAuthenticationEndpoint":
                                        type: "string"
                                        description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                        format: "uri"
                                    "supportedBackchannelTokenDeliveryModes":
                                        type: "array"
                                        description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "PING"
                                                - "POLL"
                                                - "PUSH"
                                            x-stoplight: {"id": "rnu65zla2rf18"}
                                    "backchannelAuthReqIdDuration":
                                        type: "integer"
                                        description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                        format: "int32"
                                    "backchannelPollingInterval":
                                        type: "integer"
                                        description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                        format: "int32"
                                    "backchannelUserCodeParameterSupported":
                                        type: "boolean"
                                        description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                    "backchannelBindingMessageRequiredInFapi":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                    "deviceAuthorizationEndpoint":
                                        type: "string"
                                        description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                        format: "uri"
                                    "deviceVerificationUri":
                                        type: "string"
                                        description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                        format: "uri"
                                    "deviceVerificationUriComplete":
                                        type: "string"
                                        description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                        format: "uri"
                                    "deviceFlowCodeDuration":
                                        type: "integer"
                                        description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                        format: "int32"
                                    "deviceFlowPollingInterval":
                                        type: "integer"
                                        description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                        format: "int32"
                                    "userCodeCharset":
                                        type: "string"
                                        enum:
                                            - "BASE20"
                                            - "NUMERIC"
                                        description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                        x-stoplight: {"id": "xcfsjhdfggoez"}
                                    "userCodeLength":
                                        type: "integer"
                                        description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                        format: "int32"
                                    "supportedTrustFrameworks":
                                        type: "array"
                                        description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedEvidence":
                                        type: "array"
                                        description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedIdentityDocuments":
                                        type: "array"
                                        description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedVerificationMethods":
                                        type: "array"
                                        description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedVerifiedClaims":
                                        type: "array"
                                        description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "verifiedClaimsValidationSchemaSet":
                                        type: "string"
                                        enum:
                                            - "standard"
                                            - "standard+id_document"
                                        description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                    "attributes":
                                        type: "array"
                                        description: "The attributes of this service.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "nbfOptional":
                                        type: "boolean"
                                        description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                    "issSuppressed":
                                        type: "boolean"
                                        description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                    "supportedCustomClientMetadata":
                                        type: "array"
                                        description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                        items:
                                            type: "string"
                                    "tokenExpirationLinked":
                                        type: "boolean"
                                        description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                    "frontChannelRequestObjectEncryptionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                    "requestObjectEncryptionAlgMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                    "requestObjectEncryptionEncMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                    "hsmEnabled":
                                        type: "boolean"
                                        description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                    "hsks":
                                        type: "array"
                                        description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                        items:
                                            type: "object"
                                            description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                            properties:
                                                "kty":
                                                    type: "string"
                                                    description: "The key type (EC or RSA)\n"
                                                "use":
                                                    type: "string"
                                                    description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                                "kid":
                                                    type: "string"
                                                    description: "Key ID for the key on the HSM.\n"
                                                "hsmName":
                                                    type: "string"
                                                    description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                                "handle":
                                                    type: "string"
                                                    description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                                "publicKey":
                                                    type: "string"
                                                    description: "The public key that corresponds to the key on the HSM.\n"
                                            x-stoplight: {"id": "1trqwclfmbcwp"}
                                    "grantManagementEndpoint":
                                        type: "string"
                                        description: "The URL of the grant management endpoint.\n"
                                    "grantManagementActionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                    "unauthorizedOnClientConfigSupported":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                    "dcrScopeUsedAsRequestable":
                                        type: "boolean"
                                        description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                    "endSessionEndpoint":
                                        type: "string"
                                        description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "loopbackRedirectionUriVariable":
                                        type: "boolean"
                                        description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                    "requestObjectAudienceChecked":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                    "accessTokenForExternalAttachmentEmbedded":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                    "authorityHints":
                                        type: "array"
                                        description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                        items:
                                            type: "string"
                                    "federationEnabled":
                                        type: "boolean"
                                        description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                    "federationJwks":
                                        type: "string"
                                        description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                    "federationSignatureKeyId":
                                        type: "string"
                                        description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                    "federationConfigurationDuration":
                                        type: "integer"
                                        description: "The duration of the entity configuration in seconds.\n"
                                    "federationRegistrationEndpoint":
                                        type: "string"
                                        description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    "organizationName":
                                        type: "string"
                                        description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                    "predefinedTransformedClaims":
                                        type: "string"
                                        description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                    "refreshTokenIdempotent":
                                        type: "boolean"
                                        description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                    "signedJwksUri":
                                        type: "string"
                                        description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                    "supportedAttachments":
                                        type: "array"
                                        description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "EMBEDDED"
                                                - "EXTERNAL"
                                            description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                    "supportedDigestAlgorithms":
                                        type: "array"
                                        description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                        items:
                                            type: "string"
                                    "supportedDocuments":
                                        type: "array"
                                        description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsMethods":
                                        type: "array"
                                        description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsValidationMethods":
                                        type: "array"
                                        description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsVerificationMethods":
                                        type: "array"
                                        description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedElectronicRecords":
                                        type: "array"
                                        description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedClientRegistrationTypes":
                                        type: "array"
                                        items:
                                            type: "string"
                                            enum:
                                                - "AUTOMATIC"
                                                - "EXPLICIT"
                                            description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                    "tokenExchangeByIdentifiableClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                    "tokenExchangeByConfidentialClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                    "tokenExchangeByPermittedClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                    "tokenExchangeEncryptedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                    "tokenExchangeUnsignedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                    "jwtGrantByIdentifiableClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "jwtGrantEncryptedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "jwtGrantUnsignedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "dcrDuplicateSoftwareIdBlocked":
                                        type: "boolean"
                                        description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                    "trustAnchors":
                                        type: "array"
                                        description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "entityId":
                                                    type: "string"
                                                    description: "the entity ID of the trust anchor\n"
                                                "jwks":
                                                    type: "string"
                                                    description: "the JWK Set document containing public keys of the trust anchor\n"
                                    "openidDroppedOnRefreshWithoutOfflineAccess":
                                        type: "boolean"
                                        description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                    "supportedDocumentsCheckMethods":
                                        type: "array"
                                        description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                        items:
                                            type: "string"
                                    "rsResponseSigned":
                                        type: "boolean"
                                        description: "The flag indicating whether this service signs responses from the resource server.\n"
                                    "cnonceDuration":
                                        type: "integer"
                                        description: "The duration of `c_nonce`.\n"
                                        format: "int64"
                                    "dpopNonceRequired":
                                        type: "boolean"
                                        description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                    "verifiableCredentialsEnabled":
                                        type: "boolean"
                                        description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                    "credentialJwksUri":
                                        type: "string"
                                        description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                    "credentialOfferDuration":
                                        type: "integer"
                                        description: "The default duration of credential offers in seconds.\n"
                                        format: "int64"
                                    "dpopNonceDuration":
                                        type: "integer"
                                        description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                        format: "int64"
                                    "preAuthorizedGrantAnonymousAccessSupported":
                                        type: "boolean"
                                        description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                    "credentialTransactionDuration":
                                        type: "integer"
                                        description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                        format: "int64"
                                    "introspectionSignatureKeyId":
                                        type: "string"
                                        description: "The key ID of the key for signing introspection responses.\n"
                                    "resourceSignatureKeyId":
                                        type: "string"
                                        description: "The key ID of the key for signing introspection responses.\n"
                                    "userPinLength":
                                        type: "integer"
                                        description: "The default length of user PINs.\n"
                                        format: "int32"
                                    "supportedPromptValues":
                                        type: "array"
                                        description: "The supported `prompt` values.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "LOGIN"
                                                - "CONSENT"
                                                - "SELECT_ACCOUNT"
                                            description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                            x-stoplight: {"id": "wtedd4f92crd8"}
                                    "idTokenReissuable":
                                        type: "boolean"
                                        description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                    "credentialJwks":
                                        type: "string"
                                        description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                    "fapiModes":
                                        type: "array"
                                        description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "FAPI1_ADVANCED"
                                                - "FAPI1_BASELINE"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                - "FAPI2_SECURITY"
                                    "credentialDuration":
                                        type: "integer"
                                        description: "The default duration of verifiable credentials in seconds.\n"
                                        format: "int64"
                                    "credentialIssuerMetadata":
                                        type: "object"
                                        properties:
                                            "credentialIssuer":
                                                type: "string"
                                                description: "The identifier of a credential request."
                                            "authorizationServer":
                                                type: "string"
                                                description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                            "credentialEndpoint":
                                                type: "boolean"
                                                description: "The URL of the credential endpoint of the credential issuer."
                                            "batchCredentialEndpoint":
                                                type: "integer"
                                                description: "The URL of the batch credential endpoint of the credential issuer."
                                                format: "int64"
                                            "deferredCredentialEndpoint":
                                                type: "string"
                                                description: "The URL of the deferred credential endpoint of the credential issuer."
                                            "credentialsSupported":
                                                type: "boolean"
                                                description: "A JSON array describing supported credentials."
                                        x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                    "idTokenAudType":
                                        type: "string"
                                        description: "The type of the `aud` claim in ID tokens.\n"
                                type: "object"
                                x-stoplight: {"id": "906lx1kk8hpxi"}
                            examples:
                                "default":
                                    value: {"accessTokenDuration": 3600, "accessTokenType": "Bearer", "allowableClockSkew": 0, "apiKey": 21653835348762, "apiSecret": "uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authorizationEndpoint": "https://my-service.example.com/authz", "authorizationResponseDuration": 0, "backchannelAuthReqIdDuration": 0, "backchannelBindingMessageRequiredInFapi": false, "backchannelPollingInterval": 0, "backchannelUserCodeParameterSupported": false, "claimShortcutRestrictive": false, "clientIdAliasEnabled": true, "clientsPerDeveloper": 0, "createdAt": 1639373421000, "dcrScopeUsedAsRequestable": false, "deviceFlowCodeDuration": 0, "deviceFlowPollingInterval": 0, "directAuthorizationEndpointEnabled": false, "directIntrospectionEndpointEnabled": false, "directJwksEndpointEnabled": false, "directRevocationEndpointEnabled": false, "directTokenEndpointEnabled": false, "directUserInfoEndpointEnabled": false, "dynamicRegistrationSupported": false, "errorDescriptionOmitted": false, "errorUriOmitted": false, "frontChannelRequestObjectEncryptionRequired": false, "grantManagementActionRequired": false, "hsmEnabled": false, "idTokenDuration": 0, "introspectionEndpoint": "https://my-service.example.com/introspection", "issSuppressed": false, "issuer": "https://my-service.example.com", "metadata": [{"key": "clientCount", "value": "0"}], "missingClientIdAllowed": false, "modifiedAt": 1639373421000, "mutualTlsValidatePkiCertChain": false, "nbfOptional": false, "number": 5041, "parRequired": false, "pkceRequired": true, "pkceS256Required": false, "pushedAuthReqDuration": 0, "refreshTokenDuration": 3600, "refreshTokenDurationKept": false, "refreshTokenDurationReset": false, "refreshTokenKept": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "revocationEndpoint": "https://my-service.example.com/revocation", "scopeRequired": false, "serviceName": "My service", "serviceOwnerNumber": 2, "singleAccessTokenPerSubject": false, "supportedClaimTypes": ["NORMAL"], "supportedDisplays": ["PAGE"], "supportedGrantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "supportedIntrospectionAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedResponseTypes": ["CODE"], "supportedRevocationAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedScopes": [{"defaultEntry": false, "description": "A permission to read your history.", "name": "history.read"}, {"defaultEntry": false, "description": "A permission to read your timeline.", "name": "timeline.read"}], "supportedTokenAuthMethods": ["CLIENT_SECRET_BASIC"], "tlsClientCertificateBoundAccessTokens": false, "tokenEndpoint": "https://my-service.example.com/token", "tokenExpirationLinked": false, "traditionalRequestObjectProcessingApplied": false, "unauthorizedOnClientConfigSupported": false, "userCodeLength": 0}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/service/create \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"serviceName\": \"My Service\", ... }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nService service = new Service();\nservice.setServiceName(\"My Service\");\n...\n\napi.createService(service);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nservice = Service()\nservice.serviceName = 'My Service'\n...\n\napi.createService(service)\n"}]
            x-stoplight: {"id": "bgk21p6nq1qia"}
    "/api/{serviceId}/service/update":
        post:
            tags:
                - "Service Management"
            summary: "Update Service"
            description: "Update a service.\n"
            operationId: "service_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                    format: "int32"
                                    readOnly: true
                                "serviceName":
                                    type: "string"
                                    description: "The name of this service."
                                "issuer":
                                    type: "string"
                                    description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                "description":
                                    type: "string"
                                    description: "The description about the service."
                                "apiKey":
                                    type: "integer"
                                    description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always `true`."
                                "metadata":
                                    type: "array"
                                    description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                    format: "int64"
                                    readOnly: true
                                "authenticationCallbackEndpoint":
                                    type: "string"
                                    description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                    format: "uri"
                                "authenticationCallbackApiKey":
                                    type: "string"
                                    description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                "authenticationCallbackApiSecret":
                                    type: "string"
                                    description: "API secret for `basic` authentication at the authentication callback endpoint."
                                "supportedAcrs":
                                    type: "array"
                                    description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    readOnly: true
                                    items:
                                        type: "string"
                                "supportedGrantTypes":
                                    type: "array"
                                    description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "supportedResponseTypes":
                                    type: "array"
                                    description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "supportedAuthorizationDetailsTypes":
                                    type: "array"
                                    description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                    items:
                                        type: "string"
                                "supportedServiceProfiles":
                                    type: "array"
                                    description: "The profiles that this service supports.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI"
                                            - "OPEN_BANKING"
                                        x-stoplight: {"id": "snodce1oa3g4u"}
                                "errorDescriptionOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                "errorUriOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                "authorizationEndpoint":
                                    type: "string"
                                    description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directAuthorizationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                "supportedUiLocales":
                                    type: "array"
                                    description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedDisplays":
                                    type: "array"
                                    description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PAGE"
                                            - "POPUP"
                                            - "TOUCH"
                                            - "WAP"
                                        description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                        x-stoplight: {"id": "269jffv4dhxg8"}
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "authorizationResponseDuration":
                                    type: "integer"
                                    description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                    format: "int64"
                                "tokenEndpoint":
                                    type: "string"
                                    description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directTokenEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                "supportedTokenAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "missingClientIdAllowed":
                                    type: "boolean"
                                    description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                "revocationEndpoint":
                                    type: "string"
                                    description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                    format: "uri"
                                "directRevocationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                "supportedRevocationAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the revocation endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "introspectionEndpoint":
                                    type: "string"
                                    description: "The URI of the introspection endpoint."
                                    format: "uri"
                                "directIntrospectionEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                "supportedIntrospectionAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the introspection endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "pushedAuthReqEndpoint":
                                    type: "string"
                                    description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                    format: "uri"
                                "pushedAuthReqDuration":
                                    type: "integer"
                                    description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                    format: "int64"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                "traditionalRequestObjectProcessingApplied":
                                    type: "boolean"
                                    description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                "mutualTlsValidatePkiCertChain":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                "trustedRootCertificates":
                                    type: "array"
                                    description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                    items:
                                        type: "string"
                                "mtlsEndpointAliases":
                                    type: "array"
                                    description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                            "uri":
                                                type: "string"
                                                format: "uri"
                                        x-stoplight: {"id": "nze0lsoxbeeyf"}
                                "accessTokenType":
                                    type: "string"
                                    description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                "accessTokenDuration":
                                    type: "integer"
                                    description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                    format: "int64"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                "accessTokenSignAlg":
                                    type: "string"
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "accessTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                "refreshTokenDuration":
                                    type: "integer"
                                    description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                    format: "int64"
                                "refreshTokenDurationKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                "refreshTokenDurationReset":
                                    type: "boolean"
                                    description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                "refreshTokenKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                "supportedScopes":
                                    type: "array"
                                    description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                                description: "The name of the scope."
                                            "defaultEntry":
                                                type: "boolean"
                                                description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                            "description":
                                                type: "string"
                                                description: "The description about the scope."
                                            "descriptions":
                                                type: "array"
                                                description: "The descriptions about this scope in multiple languages."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of the scope."
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                        x-stoplight: {"id": "2l5ay2evehuem"}
                                "scopeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                "idTokenDuration":
                                    type: "integer"
                                    description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                    format: "int64"
                                "allowableClockSkew":
                                    type: "integer"
                                    description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                    format: "int32"
                                "supportedClaimTypes":
                                    type: "array"
                                    description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NORMAL"
                                            - "AGGREGATED"
                                            - "DISTRIBUTED"
                                        x-stoplight: {"id": "d2fcz22i8zrtf"}
                                "supportedClaimLocales":
                                    type: "array"
                                    description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedClaims":
                                    type: "array"
                                    description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                    items:
                                        type: "string"
                                "claimShortcutRestrictive":
                                    type: "boolean"
                                    description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                "jwksUri":
                                    type: "string"
                                    description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directJwksEndpointEnabled":
                                    type: "boolean"
                                    description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                "idTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "userInfoSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "authorizationSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                "userInfoEndpoint":
                                    type: "string"
                                    description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directUserInfoEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                "dynamicRegistrationSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                "registrationEndpoint":
                                    type: "string"
                                    description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "registrationManagementEndpoint":
                                    type: "string"
                                    description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                    format: "uri"
                                "policyUri":
                                    type: "string"
                                    description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "tosUri":
                                    type: "string"
                                    description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "serviceDocumentation":
                                    type: "string"
                                    description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "backchannelAuthenticationEndpoint":
                                    type: "string"
                                    description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    format: "uri"
                                "supportedBackchannelTokenDeliveryModes":
                                    type: "array"
                                    description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PING"
                                            - "POLL"
                                            - "PUSH"
                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                "backchannelAuthReqIdDuration":
                                    type: "integer"
                                    description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                    format: "int32"
                                "backchannelPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                    format: "int32"
                                "backchannelUserCodeParameterSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                "backchannelBindingMessageRequiredInFapi":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                "deviceAuthorizationEndpoint":
                                    type: "string"
                                    description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                    format: "uri"
                                "deviceVerificationUri":
                                    type: "string"
                                    description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                    format: "uri"
                                "deviceVerificationUriComplete":
                                    type: "string"
                                    description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                    format: "uri"
                                "deviceFlowCodeDuration":
                                    type: "integer"
                                    description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                    format: "int32"
                                "deviceFlowPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                    format: "int32"
                                "userCodeCharset":
                                    type: "string"
                                    enum:
                                        - "BASE20"
                                        - "NUMERIC"
                                    description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                    x-stoplight: {"id": "xcfsjhdfggoez"}
                                "userCodeLength":
                                    type: "integer"
                                    description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                    format: "int32"
                                "supportedTrustFrameworks":
                                    type: "array"
                                    description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedEvidence":
                                    type: "array"
                                    description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedIdentityDocuments":
                                    type: "array"
                                    description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerificationMethods":
                                    type: "array"
                                    description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerifiedClaims":
                                    type: "array"
                                    description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "verifiedClaimsValidationSchemaSet":
                                    type: "string"
                                    enum:
                                        - "standard"
                                        - "standard+id_document"
                                    description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this service.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "nbfOptional":
                                    type: "boolean"
                                    description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                "issSuppressed":
                                    type: "boolean"
                                    description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                "supportedCustomClientMetadata":
                                    type: "array"
                                    description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                    items:
                                        type: "string"
                                "tokenExpirationLinked":
                                    type: "boolean"
                                    description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                "hsmEnabled":
                                    type: "boolean"
                                    description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                "hsks":
                                    type: "array"
                                    description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                    items:
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                                "grantManagementEndpoint":
                                    type: "string"
                                    description: "The URL of the grant management endpoint.\n"
                                "grantManagementActionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                "unauthorizedOnClientConfigSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                "dcrScopeUsedAsRequestable":
                                    type: "boolean"
                                    description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                "endSessionEndpoint":
                                    type: "string"
                                    description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "loopbackRedirectionUriVariable":
                                    type: "boolean"
                                    description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                "requestObjectAudienceChecked":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                "accessTokenForExternalAttachmentEmbedded":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                "authorityHints":
                                    type: "array"
                                    description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    items:
                                        type: "string"
                                "federationEnabled":
                                    type: "boolean"
                                    description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                "federationJwks":
                                    type: "string"
                                    description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                "federationSignatureKeyId":
                                    type: "string"
                                    description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                "federationConfigurationDuration":
                                    type: "integer"
                                    description: "The duration of the entity configuration in seconds.\n"
                                "federationRegistrationEndpoint":
                                    type: "string"
                                    description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "predefinedTransformedClaims":
                                    type: "string"
                                    description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                "refreshTokenIdempotent":
                                    type: "boolean"
                                    description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                "supportedAttachments":
                                    type: "array"
                                    description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "EMBEDDED"
                                            - "EXTERNAL"
                                        description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                "supportedDigestAlgorithms":
                                    type: "array"
                                    description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "supportedDocuments":
                                    type: "array"
                                    description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsMethods":
                                    type: "array"
                                    description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsValidationMethods":
                                    type: "array"
                                    description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsVerificationMethods":
                                    type: "array"
                                    description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedElectronicRecords":
                                    type: "array"
                                    description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedClientRegistrationTypes":
                                    type: "array"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "tokenExchangeByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                "tokenExchangeByConfidentialClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                "tokenExchangeByPermittedClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                "tokenExchangeEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                "tokenExchangeUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                "jwtGrantByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "dcrDuplicateSoftwareIdBlocked":
                                    type: "boolean"
                                    description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                "trustAnchors":
                                    type: "array"
                                    description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of the trust anchor\n"
                                            "jwks":
                                                type: "string"
                                                description: "the JWK Set document containing public keys of the trust anchor\n"
                                "openidDroppedOnRefreshWithoutOfflineAccess":
                                    type: "boolean"
                                    description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                "supportedDocumentsCheckMethods":
                                    type: "array"
                                    description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "rsResponseSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "cnonceDuration":
                                    type: "integer"
                                    description: "The duration of `c_nonce`.\n"
                                    format: "int64"
                                "dpopNonceRequired":
                                    type: "boolean"
                                    description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                "verifiableCredentialsEnabled":
                                    type: "boolean"
                                    description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                "credentialJwksUri":
                                    type: "string"
                                    description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                "credentialOfferDuration":
                                    type: "integer"
                                    description: "The default duration of credential offers in seconds.\n"
                                    format: "int64"
                                "dpopNonceDuration":
                                    type: "integer"
                                    description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                    format: "int64"
                                "preAuthorizedGrantAnonymousAccessSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                "credentialTransactionDuration":
                                    type: "integer"
                                    description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                    format: "int64"
                                "introspectionSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "resourceSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "userPinLength":
                                    type: "integer"
                                    description: "The default length of user PINs.\n"
                                    format: "int32"
                                "supportedPromptValues":
                                    type: "array"
                                    description: "The supported `prompt` values.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "LOGIN"
                                            - "CONSENT"
                                            - "SELECT_ACCOUNT"
                                        description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                        x-stoplight: {"id": "wtedd4f92crd8"}
                                "idTokenReissuable":
                                    type: "boolean"
                                    description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                "credentialJwks":
                                    type: "string"
                                    description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                "credentialDuration":
                                    type: "integer"
                                    description: "The default duration of verifiable credentials in seconds.\n"
                                    format: "int64"
                                "credentialIssuerMetadata":
                                    type: "object"
                                    properties:
                                        "credentialIssuer":
                                            type: "string"
                                            description: "The identifier of a credential request."
                                        "authorizationServer":
                                            type: "string"
                                            description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                        "credentialEndpoint":
                                            type: "boolean"
                                            description: "The URL of the credential endpoint of the credential issuer."
                                        "batchCredentialEndpoint":
                                            type: "integer"
                                            description: "The URL of the batch credential endpoint of the credential issuer."
                                            format: "int64"
                                        "deferredCredentialEndpoint":
                                            type: "string"
                                            description: "The URL of the deferred credential endpoint of the credential issuer."
                                        "credentialsSupported":
                                            type: "boolean"
                                            description: "A JSON array describing supported credentials."
                                    x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                "idTokenAudType":
                                    type: "string"
                                    description: "The type of the `aud` claim in ID tokens.\n"
                            type: "object"
                            x-stoplight: {"id": "906lx1kk8hpxi"}
                        examples:
                            "default":
                                value: {"accessTokenDuration": 3600, "accessTokenType": "Bearer", "allowableClockSkew": 0, "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authorizationEndpoint": "https://my-service.example.com/authz", "authorizationResponseDuration": 0, "backchannelAuthReqIdDuration": 0, "backchannelBindingMessageRequiredInFapi": false, "backchannelPollingInterval": 0, "backchannelUserCodeParameterSupported": false, "claimShortcutRestrictive": false, "clientIdAliasEnabled": true, "clientsPerDeveloper": 0, "dcrScopeUsedAsRequestable": false, "deviceFlowCodeDuration": 0, "deviceFlowPollingInterval": 0, "directAuthorizationEndpointEnabled": false, "directIntrospectionEndpointEnabled": false, "directJwksEndpointEnabled": false, "directRevocationEndpointEnabled": false, "directTokenEndpointEnabled": false, "directUserInfoEndpointEnabled": false, "dynamicRegistrationSupported": false, "errorDescriptionOmitted": false, "errorUriOmitted": false, "frontChannelRequestObjectEncryptionRequired": false, "grantManagementActionRequired": false, "hsmEnabled": false, "idTokenDuration": 0, "introspectionEndpoint": "https://my-service.example.com/introspection", "issSuppressed": false, "issuer": "https://my-service.example.com", "missingClientIdAllowed": false, "mutualTlsValidatePkiCertChain": false, "nbfOptional": false, "parRequired": false, "pkceRequired": true, "pkceS256Required": false, "pushedAuthReqDuration": 0, "refreshTokenDuration": 3600, "refreshTokenDurationKept": false, "refreshTokenDurationReset": false, "refreshTokenKept": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "revocationEndpoint": "https://my-service.example.com/revocation", "scopeRequired": false, "serviceName": "My updated service", "singleAccessTokenPerSubject": false, "supportedClaimTypes": ["NORMAL"], "supportedDisplays": ["PAGE"], "supportedGrantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "supportedIntrospectionAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedResponseTypes": ["CODE"], "supportedRevocationAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedScopes": [{"defaultEntry": false, "description": "A permission to read your history.", "name": "history.read"}, {"defaultEntry": false, "description": "A permission to read your timeline.", "name": "timeline.read"}], "supportedTokenAuthMethods": ["CLIENT_SECRET_BASIC"], "tlsClientCertificateBoundAccessTokens": false, "tokenEndpoint": "https://my-service.example.com/token", "tokenExpirationLinked": false, "traditionalRequestObjectProcessingApplied": false, "unauthorizedOnClientConfigSupported": false, "userCodeLength": 0}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                    format: "int32"
                                    readOnly: true
                                "serviceName":
                                    type: "string"
                                    description: "The name of this service."
                                "issuer":
                                    type: "string"
                                    description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                "description":
                                    type: "string"
                                    description: "The description about the service."
                                "apiKey":
                                    type: "integer"
                                    description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always `true`."
                                "metadata":
                                    type: "array"
                                    description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                    format: "int64"
                                    readOnly: true
                                "authenticationCallbackEndpoint":
                                    type: "string"
                                    description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                    format: "uri"
                                "authenticationCallbackApiKey":
                                    type: "string"
                                    description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                "authenticationCallbackApiSecret":
                                    type: "string"
                                    description: "API secret for `basic` authentication at the authentication callback endpoint."
                                "supportedAcrs":
                                    type: "array"
                                    description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    readOnly: true
                                    items:
                                        type: "string"
                                "supportedGrantTypes":
                                    type: "array"
                                    description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "supportedResponseTypes":
                                    type: "array"
                                    description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "supportedAuthorizationDetailsTypes":
                                    type: "array"
                                    description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                    items:
                                        type: "string"
                                "supportedServiceProfiles":
                                    type: "array"
                                    description: "The profiles that this service supports.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI"
                                            - "OPEN_BANKING"
                                        x-stoplight: {"id": "snodce1oa3g4u"}
                                "errorDescriptionOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                "errorUriOmitted":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                "authorizationEndpoint":
                                    type: "string"
                                    description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directAuthorizationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                "supportedUiLocales":
                                    type: "array"
                                    description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedDisplays":
                                    type: "array"
                                    description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PAGE"
                                            - "POPUP"
                                            - "TOUCH"
                                            - "WAP"
                                        description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                        x-stoplight: {"id": "269jffv4dhxg8"}
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "authorizationResponseDuration":
                                    type: "integer"
                                    description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                    format: "int64"
                                "tokenEndpoint":
                                    type: "string"
                                    description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directTokenEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                "supportedTokenAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "missingClientIdAllowed":
                                    type: "boolean"
                                    description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                "revocationEndpoint":
                                    type: "string"
                                    description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                    format: "uri"
                                "directRevocationEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                "supportedRevocationAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the revocation endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "introspectionEndpoint":
                                    type: "string"
                                    description: "The URI of the introspection endpoint."
                                    format: "uri"
                                "directIntrospectionEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                "supportedIntrospectionAuthMethods":
                                    type: "array"
                                    description: "Client authentication methods supported at the introspection endpoint.\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "pushedAuthReqEndpoint":
                                    type: "string"
                                    description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                    format: "uri"
                                "pushedAuthReqDuration":
                                    type: "integer"
                                    description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                    format: "int64"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                "traditionalRequestObjectProcessingApplied":
                                    type: "boolean"
                                    description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                "mutualTlsValidatePkiCertChain":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                "trustedRootCertificates":
                                    type: "array"
                                    description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                    items:
                                        type: "string"
                                "mtlsEndpointAliases":
                                    type: "array"
                                    description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                            "uri":
                                                type: "string"
                                                format: "uri"
                                        x-stoplight: {"id": "nze0lsoxbeeyf"}
                                "accessTokenType":
                                    type: "string"
                                    description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                "accessTokenDuration":
                                    type: "integer"
                                    description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                    format: "int64"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                "accessTokenSignAlg":
                                    type: "string"
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "accessTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                "refreshTokenDuration":
                                    type: "integer"
                                    description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                    format: "int64"
                                "refreshTokenDurationKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                "refreshTokenDurationReset":
                                    type: "boolean"
                                    description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                "refreshTokenKept":
                                    type: "boolean"
                                    description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                "supportedScopes":
                                    type: "array"
                                    description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "name":
                                                type: "string"
                                                description: "The name of the scope."
                                            "defaultEntry":
                                                type: "boolean"
                                                description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                            "description":
                                                type: "string"
                                                description: "The description about the scope."
                                            "descriptions":
                                                type: "array"
                                                description: "The descriptions about this scope in multiple languages."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of the scope."
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                        x-stoplight: {"id": "2l5ay2evehuem"}
                                "scopeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                "idTokenDuration":
                                    type: "integer"
                                    description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                    format: "int64"
                                "allowableClockSkew":
                                    type: "integer"
                                    description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                    format: "int32"
                                "supportedClaimTypes":
                                    type: "array"
                                    description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NORMAL"
                                            - "AGGREGATED"
                                            - "DISTRIBUTED"
                                        x-stoplight: {"id": "d2fcz22i8zrtf"}
                                "supportedClaimLocales":
                                    type: "array"
                                    description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    items:
                                        type: "string"
                                "supportedClaims":
                                    type: "array"
                                    description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                    items:
                                        type: "string"
                                "claimShortcutRestrictive":
                                    type: "boolean"
                                    description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                "jwksUri":
                                    type: "string"
                                    description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directJwksEndpointEnabled":
                                    type: "boolean"
                                    description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                "idTokenSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "userInfoSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                "authorizationSignatureKeyId":
                                    type: "string"
                                    description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                "userInfoEndpoint":
                                    type: "string"
                                    description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "directUserInfoEndpointEnabled":
                                    type: "boolean"
                                    description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                "dynamicRegistrationSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                "registrationEndpoint":
                                    type: "string"
                                    description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "registrationManagementEndpoint":
                                    type: "string"
                                    description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                    format: "uri"
                                "policyUri":
                                    type: "string"
                                    description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "tosUri":
                                    type: "string"
                                    description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "serviceDocumentation":
                                    type: "string"
                                    description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "backchannelAuthenticationEndpoint":
                                    type: "string"
                                    description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    format: "uri"
                                "supportedBackchannelTokenDeliveryModes":
                                    type: "array"
                                    description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "PING"
                                            - "POLL"
                                            - "PUSH"
                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                "backchannelAuthReqIdDuration":
                                    type: "integer"
                                    description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                    format: "int32"
                                "backchannelPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                    format: "int32"
                                "backchannelUserCodeParameterSupported":
                                    type: "boolean"
                                    description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                "backchannelBindingMessageRequiredInFapi":
                                    type: "boolean"
                                    description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                "deviceAuthorizationEndpoint":
                                    type: "string"
                                    description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                    format: "uri"
                                "deviceVerificationUri":
                                    type: "string"
                                    description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                    format: "uri"
                                "deviceVerificationUriComplete":
                                    type: "string"
                                    description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                    format: "uri"
                                "deviceFlowCodeDuration":
                                    type: "integer"
                                    description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                    format: "int32"
                                "deviceFlowPollingInterval":
                                    type: "integer"
                                    description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                    format: "int32"
                                "userCodeCharset":
                                    type: "string"
                                    enum:
                                        - "BASE20"
                                        - "NUMERIC"
                                    description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                    x-stoplight: {"id": "xcfsjhdfggoez"}
                                "userCodeLength":
                                    type: "integer"
                                    description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                    format: "int32"
                                "supportedTrustFrameworks":
                                    type: "array"
                                    description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedEvidence":
                                    type: "array"
                                    description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedIdentityDocuments":
                                    type: "array"
                                    description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerificationMethods":
                                    type: "array"
                                    description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "supportedVerifiedClaims":
                                    type: "array"
                                    description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                    items:
                                        type: "string"
                                "verifiedClaimsValidationSchemaSet":
                                    type: "string"
                                    enum:
                                        - "standard"
                                        - "standard+id_document"
                                    description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this service.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "nbfOptional":
                                    type: "boolean"
                                    description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                "issSuppressed":
                                    type: "boolean"
                                    description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                "supportedCustomClientMetadata":
                                    type: "array"
                                    description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                    items:
                                        type: "string"
                                "tokenExpirationLinked":
                                    type: "boolean"
                                    description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                "hsmEnabled":
                                    type: "boolean"
                                    description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                "hsks":
                                    type: "array"
                                    description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                    items:
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                                "grantManagementEndpoint":
                                    type: "string"
                                    description: "The URL of the grant management endpoint.\n"
                                "grantManagementActionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                "unauthorizedOnClientConfigSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                "dcrScopeUsedAsRequestable":
                                    type: "boolean"
                                    description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                "endSessionEndpoint":
                                    type: "string"
                                    description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    format: "uri"
                                "loopbackRedirectionUriVariable":
                                    type: "boolean"
                                    description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                "requestObjectAudienceChecked":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                "accessTokenForExternalAttachmentEmbedded":
                                    type: "boolean"
                                    description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                "authorityHints":
                                    type: "array"
                                    description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    items:
                                        type: "string"
                                "federationEnabled":
                                    type: "boolean"
                                    description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                "federationJwks":
                                    type: "string"
                                    description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                "federationSignatureKeyId":
                                    type: "string"
                                    description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                "federationConfigurationDuration":
                                    type: "integer"
                                    description: "The duration of the entity configuration in seconds.\n"
                                "federationRegistrationEndpoint":
                                    type: "string"
                                    description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "predefinedTransformedClaims":
                                    type: "string"
                                    description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                "refreshTokenIdempotent":
                                    type: "boolean"
                                    description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                "supportedAttachments":
                                    type: "array"
                                    description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "EMBEDDED"
                                            - "EXTERNAL"
                                        description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                "supportedDigestAlgorithms":
                                    type: "array"
                                    description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "supportedDocuments":
                                    type: "array"
                                    description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsMethods":
                                    type: "array"
                                    description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsValidationMethods":
                                    type: "array"
                                    description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedDocumentsVerificationMethods":
                                    type: "array"
                                    description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedElectronicRecords":
                                    type: "array"
                                    description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                    items:
                                        type: "string"
                                "supportedClientRegistrationTypes":
                                    type: "array"
                                    items:
                                        type: "string"
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "tokenExchangeByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                "tokenExchangeByConfidentialClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                "tokenExchangeByPermittedClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                "tokenExchangeEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                "tokenExchangeUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                "jwtGrantByIdentifiableClientsOnly":
                                    type: "boolean"
                                    description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantEncryptedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "jwtGrantUnsignedJwtRejected":
                                    type: "boolean"
                                    description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                "dcrDuplicateSoftwareIdBlocked":
                                    type: "boolean"
                                    description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                "trustAnchors":
                                    type: "array"
                                    description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                    items:
                                        type: "object"
                                        properties:
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of the trust anchor\n"
                                            "jwks":
                                                type: "string"
                                                description: "the JWK Set document containing public keys of the trust anchor\n"
                                "openidDroppedOnRefreshWithoutOfflineAccess":
                                    type: "boolean"
                                    description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                "supportedDocumentsCheckMethods":
                                    type: "array"
                                    description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                    items:
                                        type: "string"
                                "rsResponseSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "cnonceDuration":
                                    type: "integer"
                                    description: "The duration of `c_nonce`.\n"
                                    format: "int64"
                                "dpopNonceRequired":
                                    type: "boolean"
                                    description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                "verifiableCredentialsEnabled":
                                    type: "boolean"
                                    description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                "credentialJwksUri":
                                    type: "string"
                                    description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                "credentialOfferDuration":
                                    type: "integer"
                                    description: "The default duration of credential offers in seconds.\n"
                                    format: "int64"
                                "dpopNonceDuration":
                                    type: "integer"
                                    description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                    format: "int64"
                                "preAuthorizedGrantAnonymousAccessSupported":
                                    type: "boolean"
                                    description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                "credentialTransactionDuration":
                                    type: "integer"
                                    description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                    format: "int64"
                                "introspectionSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "resourceSignatureKeyId":
                                    type: "string"
                                    description: "The key ID of the key for signing introspection responses.\n"
                                "userPinLength":
                                    type: "integer"
                                    description: "The default length of user PINs.\n"
                                    format: "int32"
                                "supportedPromptValues":
                                    type: "array"
                                    description: "The supported `prompt` values.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "LOGIN"
                                            - "CONSENT"
                                            - "SELECT_ACCOUNT"
                                        description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                        x-stoplight: {"id": "wtedd4f92crd8"}
                                "idTokenReissuable":
                                    type: "boolean"
                                    description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                "credentialJwks":
                                    type: "string"
                                    description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                    items:
                                        type: "string"
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                "credentialDuration":
                                    type: "integer"
                                    description: "The default duration of verifiable credentials in seconds.\n"
                                    format: "int64"
                                "credentialIssuerMetadata":
                                    type: "object"
                                    properties:
                                        "credentialIssuer":
                                            type: "string"
                                            description: "The identifier of a credential request."
                                        "authorizationServer":
                                            type: "string"
                                            description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                        "credentialEndpoint":
                                            type: "boolean"
                                            description: "The URL of the credential endpoint of the credential issuer."
                                        "batchCredentialEndpoint":
                                            type: "integer"
                                            description: "The URL of the batch credential endpoint of the credential issuer."
                                            format: "int64"
                                        "deferredCredentialEndpoint":
                                            type: "string"
                                            description: "The URL of the deferred credential endpoint of the credential issuer."
                                        "credentialsSupported":
                                            type: "boolean"
                                            description: "A JSON array describing supported credentials."
                                    x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                "idTokenAudType":
                                    type: "string"
                                    description: "The type of the `aud` claim in ID tokens.\n"
                            type: "object"
                            x-stoplight: {"id": "906lx1kk8hpxi"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "number":
                                        type: "integer"
                                        description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                        format: "int32"
                                        readOnly: true
                                    "serviceName":
                                        type: "string"
                                        description: "The name of this service."
                                    "issuer":
                                        type: "string"
                                        description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                    "description":
                                        type: "string"
                                        description: "The description about the service."
                                    "apiKey":
                                        type: "integer"
                                        description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                        format: "int64"
                                        readOnly: true
                                    "clientIdAliasEnabled":
                                        type: "boolean"
                                        description: "Deprecated. Always `true`."
                                    "metadata":
                                        type: "array"
                                        description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "createdAt":
                                        type: "integer"
                                        description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                        format: "int64"
                                        readOnly: true
                                    "modifiedAt":
                                        type: "integer"
                                        description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                        format: "int64"
                                        readOnly: true
                                    "authenticationCallbackEndpoint":
                                        type: "string"
                                        description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                        format: "uri"
                                    "authenticationCallbackApiKey":
                                        type: "string"
                                        description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                    "authenticationCallbackApiSecret":
                                        type: "string"
                                        description: "API secret for `basic` authentication at the authentication callback endpoint."
                                    "supportedAcrs":
                                        type: "array"
                                        description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        readOnly: true
                                        items:
                                            type: "string"
                                    "supportedGrantTypes":
                                        type: "array"
                                        description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "AUTHORIZATION_CODE"
                                                - "IMPLICIT"
                                                - "PASSWORD"
                                                - "CLIENT_CREDENTIALS"
                                                - "REFRESH_TOKEN"
                                                - "CIBA"
                                                - "DEVICE_CODE"
                                                - "TOKEN_EXCHANGE"
                                                - "JWT_BEARER"
                                            description: "The grant type of the access token when the access token was created.\n"
                                            x-stoplight: {"id": "033u82mqvyogn"}
                                    "supportedResponseTypes":
                                        type: "array"
                                        description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "CODE"
                                                - "TOKEN"
                                                - "ID_TOKEN"
                                                - "CODE_TOKEN"
                                                - "CODE_ID_TOKEN"
                                                - "ID_TOKEN_TOKEN"
                                                - "CODE_ID_TOKEN_TOKEN"
                                            x-stoplight: {"id": "t7wed2d7tkpy7"}
                                    "supportedAuthorizationDetailsTypes":
                                        type: "array"
                                        description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                        items:
                                            type: "string"
                                    "supportedServiceProfiles":
                                        type: "array"
                                        description: "The profiles that this service supports.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "FAPI"
                                                - "OPEN_BANKING"
                                            x-stoplight: {"id": "snodce1oa3g4u"}
                                    "errorDescriptionOmitted":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                    "errorUriOmitted":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                    "authorizationEndpoint":
                                        type: "string"
                                        description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directAuthorizationEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                    "supportedUiLocales":
                                        type: "array"
                                        description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                    "supportedDisplays":
                                        type: "array"
                                        description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "PAGE"
                                                - "POPUP"
                                                - "TOUCH"
                                                - "WAP"
                                            description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                            x-stoplight: {"id": "269jffv4dhxg8"}
                                    "pkceRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                    "pkceS256Required":
                                        type: "boolean"
                                        description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                    "authorizationResponseDuration":
                                        type: "integer"
                                        description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                        format: "int64"
                                    "tokenEndpoint":
                                        type: "string"
                                        description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directTokenEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                    "supportedTokenAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "missingClientIdAllowed":
                                        type: "boolean"
                                        description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                    "revocationEndpoint":
                                        type: "string"
                                        description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                        format: "uri"
                                    "directRevocationEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                    "supportedRevocationAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported at the revocation endpoint.\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            type: "string"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "introspectionEndpoint":
                                        type: "string"
                                        description: "The URI of the introspection endpoint."
                                        format: "uri"
                                    "directIntrospectionEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                    "supportedIntrospectionAuthMethods":
                                        type: "array"
                                        description: "Client authentication methods supported at the introspection endpoint.\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CLIENT_SECRET_BASIC"
                                                - "CLIENT_SECRET_POST"
                                                - "CLIENT_SECRET_JWT"
                                                - "PRIVATE_KEY_JWT"
                                                - "TLS_CLIENT_AUTH"
                                                - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                            type: "string"
                                            description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "pushedAuthReqEndpoint":
                                        type: "string"
                                        description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                        format: "uri"
                                    "pushedAuthReqDuration":
                                        type: "integer"
                                        description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                        format: "int64"
                                    "parRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                    "requestObjectRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                    "traditionalRequestObjectProcessingApplied":
                                        type: "boolean"
                                        description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                    "mutualTlsValidatePkiCertChain":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                    "trustedRootCertificates":
                                        type: "array"
                                        description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                        items:
                                            type: "string"
                                    "mtlsEndpointAliases":
                                        type: "array"
                                        description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                "uri":
                                                    type: "string"
                                                    format: "uri"
                                            x-stoplight: {"id": "nze0lsoxbeeyf"}
                                    "accessTokenType":
                                        type: "string"
                                        description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                    "tlsClientCertificateBoundAccessTokens":
                                        type: "boolean"
                                        description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                        format: "int64"
                                    "singleAccessTokenPerSubject":
                                        type: "boolean"
                                        description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                    "accessTokenSignAlg":
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "accessTokenSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                    "refreshTokenDuration":
                                        type: "integer"
                                        description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                        format: "int64"
                                    "refreshTokenDurationKept":
                                        type: "boolean"
                                        description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                    "refreshTokenDurationReset":
                                        type: "boolean"
                                        description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                    "refreshTokenKept":
                                        type: "boolean"
                                        description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                    "supportedScopes":
                                        type: "array"
                                        description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "scopeRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                    "idTokenDuration":
                                        type: "integer"
                                        description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                        format: "int64"
                                    "allowableClockSkew":
                                        type: "integer"
                                        description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                        format: "int32"
                                    "supportedClaimTypes":
                                        type: "array"
                                        description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NORMAL"
                                                - "AGGREGATED"
                                                - "DISTRIBUTED"
                                            x-stoplight: {"id": "d2fcz22i8zrtf"}
                                    "supportedClaimLocales":
                                        type: "array"
                                        description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        items:
                                            type: "string"
                                    "supportedClaims":
                                        type: "array"
                                        description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                        items:
                                            type: "string"
                                    "claimShortcutRestrictive":
                                        type: "boolean"
                                        description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                    "jwksUri":
                                        type: "string"
                                        description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directJwksEndpointEnabled":
                                        type: "boolean"
                                        description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                    "jwks":
                                        type: "string"
                                        description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                    "idTokenSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                    "userInfoSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                    "authorizationSignatureKeyId":
                                        type: "string"
                                        description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                    "userInfoEndpoint":
                                        type: "string"
                                        description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "directUserInfoEndpointEnabled":
                                        type: "boolean"
                                        description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                    "dynamicRegistrationSupported":
                                        type: "boolean"
                                        description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                    "registrationEndpoint":
                                        type: "string"
                                        description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "registrationManagementEndpoint":
                                        type: "string"
                                        description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                        format: "uri"
                                    "policyUri":
                                        type: "string"
                                        description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "tosUri":
                                        type: "string"
                                        description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "serviceDocumentation":
                                        type: "string"
                                        description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "backchannelAuthenticationEndpoint":
                                        type: "string"
                                        description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                        format: "uri"
                                    "supportedBackchannelTokenDeliveryModes":
                                        type: "array"
                                        description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "PING"
                                                - "POLL"
                                                - "PUSH"
                                            x-stoplight: {"id": "rnu65zla2rf18"}
                                    "backchannelAuthReqIdDuration":
                                        type: "integer"
                                        description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                        format: "int32"
                                    "backchannelPollingInterval":
                                        type: "integer"
                                        description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                        format: "int32"
                                    "backchannelUserCodeParameterSupported":
                                        type: "boolean"
                                        description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                    "backchannelBindingMessageRequiredInFapi":
                                        type: "boolean"
                                        description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                    "deviceAuthorizationEndpoint":
                                        type: "string"
                                        description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                        format: "uri"
                                    "deviceVerificationUri":
                                        type: "string"
                                        description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                        format: "uri"
                                    "deviceVerificationUriComplete":
                                        type: "string"
                                        description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                        format: "uri"
                                    "deviceFlowCodeDuration":
                                        type: "integer"
                                        description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                        format: "int32"
                                    "deviceFlowPollingInterval":
                                        type: "integer"
                                        description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                        format: "int32"
                                    "userCodeCharset":
                                        type: "string"
                                        enum:
                                            - "BASE20"
                                            - "NUMERIC"
                                        description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                        x-stoplight: {"id": "xcfsjhdfggoez"}
                                    "userCodeLength":
                                        type: "integer"
                                        description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                        format: "int32"
                                    "supportedTrustFrameworks":
                                        type: "array"
                                        description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedEvidence":
                                        type: "array"
                                        description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedIdentityDocuments":
                                        type: "array"
                                        description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedVerificationMethods":
                                        type: "array"
                                        description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "supportedVerifiedClaims":
                                        type: "array"
                                        description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                        items:
                                            type: "string"
                                    "verifiedClaimsValidationSchemaSet":
                                        type: "string"
                                        enum:
                                            - "standard"
                                            - "standard+id_document"
                                        description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                    "attributes":
                                        type: "array"
                                        description: "The attributes of this service.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "nbfOptional":
                                        type: "boolean"
                                        description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                    "issSuppressed":
                                        type: "boolean"
                                        description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                    "supportedCustomClientMetadata":
                                        type: "array"
                                        description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                        items:
                                            type: "string"
                                    "tokenExpirationLinked":
                                        type: "boolean"
                                        description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                    "frontChannelRequestObjectEncryptionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                    "requestObjectEncryptionAlgMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                    "requestObjectEncryptionEncMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                    "hsmEnabled":
                                        type: "boolean"
                                        description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                    "hsks":
                                        type: "array"
                                        description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                        items:
                                            type: "object"
                                            description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                            properties:
                                                "kty":
                                                    type: "string"
                                                    description: "The key type (EC or RSA)\n"
                                                "use":
                                                    type: "string"
                                                    description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                                "kid":
                                                    type: "string"
                                                    description: "Key ID for the key on the HSM.\n"
                                                "hsmName":
                                                    type: "string"
                                                    description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                                "handle":
                                                    type: "string"
                                                    description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                                "publicKey":
                                                    type: "string"
                                                    description: "The public key that corresponds to the key on the HSM.\n"
                                            x-stoplight: {"id": "1trqwclfmbcwp"}
                                    "grantManagementEndpoint":
                                        type: "string"
                                        description: "The URL of the grant management endpoint.\n"
                                    "grantManagementActionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                    "unauthorizedOnClientConfigSupported":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                    "dcrScopeUsedAsRequestable":
                                        type: "boolean"
                                        description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                    "endSessionEndpoint":
                                        type: "string"
                                        description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                        format: "uri"
                                    "loopbackRedirectionUriVariable":
                                        type: "boolean"
                                        description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                    "requestObjectAudienceChecked":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                    "accessTokenForExternalAttachmentEmbedded":
                                        type: "boolean"
                                        description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                    "authorityHints":
                                        type: "array"
                                        description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                        items:
                                            type: "string"
                                    "federationEnabled":
                                        type: "boolean"
                                        description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                    "federationJwks":
                                        type: "string"
                                        description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                    "federationSignatureKeyId":
                                        type: "string"
                                        description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                    "federationConfigurationDuration":
                                        type: "integer"
                                        description: "The duration of the entity configuration in seconds.\n"
                                    "federationRegistrationEndpoint":
                                        type: "string"
                                        description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                    "organizationName":
                                        type: "string"
                                        description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                    "predefinedTransformedClaims":
                                        type: "string"
                                        description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                    "refreshTokenIdempotent":
                                        type: "boolean"
                                        description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                    "signedJwksUri":
                                        type: "string"
                                        description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                    "supportedAttachments":
                                        type: "array"
                                        description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "EMBEDDED"
                                                - "EXTERNAL"
                                            description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                    "supportedDigestAlgorithms":
                                        type: "array"
                                        description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                        items:
                                            type: "string"
                                    "supportedDocuments":
                                        type: "array"
                                        description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsMethods":
                                        type: "array"
                                        description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsValidationMethods":
                                        type: "array"
                                        description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedDocumentsVerificationMethods":
                                        type: "array"
                                        description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedElectronicRecords":
                                        type: "array"
                                        description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                        items:
                                            type: "string"
                                    "supportedClientRegistrationTypes":
                                        type: "array"
                                        items:
                                            type: "string"
                                            enum:
                                                - "AUTOMATIC"
                                                - "EXPLICIT"
                                            description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                    "tokenExchangeByIdentifiableClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                    "tokenExchangeByConfidentialClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                    "tokenExchangeByPermittedClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                    "tokenExchangeEncryptedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                    "tokenExchangeUnsignedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                    "jwtGrantByIdentifiableClientsOnly":
                                        type: "boolean"
                                        description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "jwtGrantEncryptedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "jwtGrantUnsignedJwtRejected":
                                        type: "boolean"
                                        description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                    "dcrDuplicateSoftwareIdBlocked":
                                        type: "boolean"
                                        description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                    "trustAnchors":
                                        type: "array"
                                        description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "entityId":
                                                    type: "string"
                                                    description: "the entity ID of the trust anchor\n"
                                                "jwks":
                                                    type: "string"
                                                    description: "the JWK Set document containing public keys of the trust anchor\n"
                                    "openidDroppedOnRefreshWithoutOfflineAccess":
                                        type: "boolean"
                                        description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                    "supportedDocumentsCheckMethods":
                                        type: "array"
                                        description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                        items:
                                            type: "string"
                                    "rsResponseSigned":
                                        type: "boolean"
                                        description: "The flag indicating whether this service signs responses from the resource server.\n"
                                    "cnonceDuration":
                                        type: "integer"
                                        description: "The duration of `c_nonce`.\n"
                                        format: "int64"
                                    "dpopNonceRequired":
                                        type: "boolean"
                                        description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                    "verifiableCredentialsEnabled":
                                        type: "boolean"
                                        description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                    "credentialJwksUri":
                                        type: "string"
                                        description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                    "credentialOfferDuration":
                                        type: "integer"
                                        description: "The default duration of credential offers in seconds.\n"
                                        format: "int64"
                                    "dpopNonceDuration":
                                        type: "integer"
                                        description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                        format: "int64"
                                    "preAuthorizedGrantAnonymousAccessSupported":
                                        type: "boolean"
                                        description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                    "credentialTransactionDuration":
                                        type: "integer"
                                        description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                        format: "int64"
                                    "introspectionSignatureKeyId":
                                        type: "string"
                                        description: "The key ID of the key for signing introspection responses.\n"
                                    "resourceSignatureKeyId":
                                        type: "string"
                                        description: "The key ID of the key for signing introspection responses.\n"
                                    "userPinLength":
                                        type: "integer"
                                        description: "The default length of user PINs.\n"
                                        format: "int32"
                                    "supportedPromptValues":
                                        type: "array"
                                        description: "The supported `prompt` values.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "NONE"
                                                - "LOGIN"
                                                - "CONSENT"
                                                - "SELECT_ACCOUNT"
                                            description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                            x-stoplight: {"id": "wtedd4f92crd8"}
                                    "idTokenReissuable":
                                        type: "boolean"
                                        description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                    "credentialJwks":
                                        type: "string"
                                        description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                    "fapiModes":
                                        type: "array"
                                        description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                        items:
                                            type: "string"
                                            enum:
                                                - "FAPI1_ADVANCED"
                                                - "FAPI1_BASELINE"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                - "FAPI2_SECURITY"
                                    "credentialDuration":
                                        type: "integer"
                                        description: "The default duration of verifiable credentials in seconds.\n"
                                        format: "int64"
                                    "credentialIssuerMetadata":
                                        type: "object"
                                        properties:
                                            "credentialIssuer":
                                                type: "string"
                                                description: "The identifier of a credential request."
                                            "authorizationServer":
                                                type: "string"
                                                description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                            "credentialEndpoint":
                                                type: "boolean"
                                                description: "The URL of the credential endpoint of the credential issuer."
                                            "batchCredentialEndpoint":
                                                type: "integer"
                                                description: "The URL of the batch credential endpoint of the credential issuer."
                                                format: "int64"
                                            "deferredCredentialEndpoint":
                                                type: "string"
                                                description: "The URL of the deferred credential endpoint of the credential issuer."
                                            "credentialsSupported":
                                                type: "boolean"
                                                description: "A JSON array describing supported credentials."
                                        x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                    "idTokenAudType":
                                        type: "string"
                                        description: "The type of the `aud` claim in ID tokens.\n"
                                type: "object"
                                x-stoplight: {"id": "906lx1kk8hpxi"}
                            examples:
                                "default":
                                    value: {"accessTokenDuration": 3600, "accessTokenType": "Bearer", "allowableClockSkew": 0, "apiKey": 21653835348762, "apiSecret": "uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authorizationEndpoint": "https://my-service.example.com/authz", "authorizationResponseDuration": 0, "backchannelAuthReqIdDuration": 0, "backchannelBindingMessageRequiredInFapi": false, "backchannelPollingInterval": 0, "backchannelUserCodeParameterSupported": false, "claimShortcutRestrictive": false, "clientIdAliasEnabled": true, "clientsPerDeveloper": 0, "createdAt": 1639373421000, "dcrScopeUsedAsRequestable": false, "deviceFlowCodeDuration": 0, "deviceFlowPollingInterval": 0, "directAuthorizationEndpointEnabled": false, "directIntrospectionEndpointEnabled": false, "directJwksEndpointEnabled": false, "directRevocationEndpointEnabled": false, "directTokenEndpointEnabled": false, "directUserInfoEndpointEnabled": false, "dynamicRegistrationSupported": false, "errorDescriptionOmitted": false, "errorUriOmitted": false, "frontChannelRequestObjectEncryptionRequired": false, "grantManagementActionRequired": false, "hsmEnabled": false, "idTokenDuration": 0, "introspectionEndpoint": "https://my-service.example.com/introspection", "issSuppressed": false, "issuer": "https://my-service.example.com", "metadata": [{"key": "clientCount", "value": "1"}], "missingClientIdAllowed": false, "modifiedAt": 1639373420725, "mutualTlsValidatePkiCertChain": false, "nbfOptional": false, "number": 5041, "parRequired": false, "pkceRequired": true, "pkceS256Required": false, "pushedAuthReqDuration": 0, "refreshTokenDuration": 3600, "refreshTokenDurationKept": false, "refreshTokenDurationReset": false, "refreshTokenKept": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "revocationEndpoint": "https://my-service.example.com/revocation", "scopeRequired": false, "serviceName": "My updated service", "serviceOwnerNumber": 2, "singleAccessTokenPerSubject": false, "supportedClaimTypes": ["NORMAL"], "supportedDisplays": ["PAGE"], "supportedGrantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "supportedIntrospectionAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedResponseTypes": ["CODE"], "supportedRevocationAuthMethods": ["CLIENT_SECRET_BASIC"], "supportedScopes": [{"defaultEntry": false, "description": "A permission to read your history.", "name": "history.read"}, {"defaultEntry": false, "description": "A permission to read your timeline.", "name": "timeline.read"}], "supportedTokenAuthMethods": ["CLIENT_SECRET_BASIC"], "tlsClientCertificateBoundAccessTokens": false, "tokenEndpoint": "https://my-service.example.com/token", "tokenExpirationLinked": false, "traditionalRequestObjectProcessingApplied": false, "unauthorizedOnClientConfigSupported": false, "userCodeLength": 0}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/service/update \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"serviceName\": \"My updated service\", ... }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\n// Get an existing service.\nlong serviceId = ...;\nService service = api.getService(serviceId);\n\n// Update \"service name\".\nservice.setAServiceName(\"My updated service\");\n\napi.updateService(service);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\n# Get an existing service.\nserviceId = ...\nservice = api.getService(serviceId)\n\n# Update \"service name\".\nservice.serviceName = 'My updated service'\n\napi.updateService(service)\n"}]
            x-stoplight: {"id": "hu455u5xzww08"}
    "/api/{serviceId}/service/delete":
        delete:
            tags:
                - "Service Management"
            summary: "Delete Service ⚡"
            description: "Delete a service.\n"
            operationId: "service_delete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "204":
                    description: "The service was successfully deleted."
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X DELETE https://us.authlete.com/api/9503564192/service/delete/21653835348762 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong serviceId = ...;\n\napi.deleteService(serviceId);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nserviceId = ...\n\napi.deleteService(serviceId)\n"}]
            x-stoplight: {"id": "toml3i5htcbmi"}
    "/api/{serviceId}/client/get/{clientId}":
        get:
            tags:
                - "Client Management"
            summary: "Get Client"
            description: "Get a client.\n"
            operationId: "client_get_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "number":
                                        type: "integer"
                                        description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                        format: "int32"
                                        readOnly: true
                                    "serviceNumber":
                                        type: "integer"
                                        description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                        format: "int32"
                                        readOnly: true
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "clientNames":
                                        type: "array"
                                        description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "description":
                                        type: "string"
                                        description: "The description about the client application."
                                    "descriptions":
                                        type: "array"
                                        description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "clientId":
                                        type: "integer"
                                        description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                        format: "int64"
                                        readOnly: true
                                    "clientSecret":
                                        type: "string"
                                        description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                        readOnly: true
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                    "clientIdAliasEnabled":
                                        type: "boolean"
                                        description: "Deprecated. Always set to `true`."
                                    "clientType":
                                        type: "string"
                                        enum:
                                            - "PUBLIC"
                                            - "CONFIDENTIAL"
                                        description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                    "applicationType":
                                        type: "string"
                                        enum:
                                            - "WEB"
                                            - "NATIVE"
                                        description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                        x-stoplight: {"id": "44dohgvzte9r5"}
                                    "logoUri":
                                        type: "string"
                                        description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "logoUris":
                                        type: "array"
                                        description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "contacts":
                                        type: "array"
                                        description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            type: "string"
                                    "tlsClientCertificateBoundAccessTokens":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                    "dynamicallyRegistered":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                        readOnly: true
                                    "softwareId":
                                        type: "string"
                                        description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    "softwareVersion":
                                        type: "string"
                                        description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    "registrationAccessTokenHash":
                                        type: "string"
                                        description: "The hash of the registration access token for this client.\n"
                                    "createdAt":
                                        type: "integer"
                                        description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                        format: "int64"
                                        readOnly: true
                                    "modifiedAt":
                                        type: "integer"
                                        description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                        format: "int64"
                                        readOnly: true
                                    "grantTypes":
                                        type: "array"
                                        description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            enum:
                                                - "AUTHORIZATION_CODE"
                                                - "IMPLICIT"
                                                - "PASSWORD"
                                                - "CLIENT_CREDENTIALS"
                                                - "REFRESH_TOKEN"
                                                - "CIBA"
                                                - "DEVICE_CODE"
                                                - "TOKEN_EXCHANGE"
                                                - "JWT_BEARER"
                                            type: "string"
                                            description: "The grant type of the access token when the access token was created.\n"
                                            x-stoplight: {"id": "033u82mqvyogn"}
                                    "responseTypes":
                                        type: "array"
                                        description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CODE"
                                                - "TOKEN"
                                                - "ID_TOKEN"
                                                - "CODE_TOKEN"
                                                - "CODE_ID_TOKEN"
                                                - "ID_TOKEN_TOKEN"
                                                - "CODE_ID_TOKEN_TOKEN"
                                            type: "string"
                                            x-stoplight: {"id": "t7wed2d7tkpy7"}
                                    "redirectUris":
                                        type: "array"
                                        description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                        items:
                                            type: "string"
                                    "authorizationSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "authorizationEncryptionAlg":
                                        type: "string"
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "authorizationEncryptionEnc":
                                        type: "string"
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "tokenAuthMethod":
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "tokenAuthSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "selfSignedCertificateKeyId":
                                        type: "string"
                                        description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                    "tlsClientAuthSubjectDn":
                                        type: "string"
                                        description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanDns":
                                        type: "string"
                                        description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanUri":
                                        type: "string"
                                        description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanIp":
                                        type: "string"
                                        description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanEmail":
                                        type: "string"
                                        description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "parRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                    "requestObjectRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                    "requestSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "requestEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "requestEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "requestUris":
                                        type: "array"
                                        description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                        items:
                                            type: "string"
                                    "defaultMaxAge":
                                        type: "integer"
                                        description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        format: "int32"
                                    "defaultAcrs":
                                        type: "array"
                                        description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                        items:
                                            type: "string"
                                    "idTokenSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "idTokenEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "idTokenEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "authTimeRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "subjectType":
                                        type: "string"
                                        enum:
                                            - "PUBLIC"
                                            - "PAIRWISE"
                                        description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "zm5yes2y915ld"}
                                    "sectorIdentifierUri":
                                        type: "string"
                                        description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                    "derivedSectorIdentifier":
                                        type: "string"
                                        description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                        readOnly: true
                                    "jwksUri":
                                        type: "string"
                                        description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "jwks":
                                        type: "string"
                                        description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "userInfoSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "userInfoEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "userInfoEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "loginUri":
                                        type: "string"
                                        description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "tosUri":
                                        type: "string"
                                        description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "tosUris":
                                        type: "array"
                                        description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "policyUri":
                                        type: "string"
                                        description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "policyUris":
                                        type: "array"
                                        description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "clientUri":
                                        type: "string"
                                        description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "clientUris":
                                        type: "array"
                                        description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "bcDeliveryMode":
                                        type: "string"
                                        description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                    "bcNotificationEndpoint":
                                        type: "string"
                                        description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                    "bcRequestSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "bcUserCodeRequired":
                                        type: "boolean"
                                        description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                    "attributes":
                                        type: "array"
                                        description: "The attributes of this client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "extension":
                                        type: "object"
                                        properties:
                                            "requestableScopes":
                                                type: "array"
                                                description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                items:
                                                    type: "string"
                                            "requestableScopesEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                            "accessTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "refreshTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "idTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "tokenExchangePermitted":
                                                type: "boolean"
                                                description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                        x-stoplight: {"id": "0h8bpbau8xawc"}
                                    "authorizationDetailsTypes":
                                        type: "array"
                                        description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                        items:
                                            type: "string"
                                    "customMetadata":
                                        type: "string"
                                        description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                    "frontChannelRequestObjectEncryptionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                    "requestObjectEncryptionAlgMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                    "requestObjectEncryptionEncMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                    "digestAlgorithm":
                                        type: "string"
                                        description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                    "singleAccessTokenPerSubject":
                                        type: "boolean"
                                        description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                    "pkceRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                    "pkceS256Required":
                                        type: "boolean"
                                        description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                    "dpopRequired":
                                        type: "boolean"
                                        description: "If the DPoP is required for this client\n"
                                    "automaticallyRegistered":
                                        type: "boolean"
                                        description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                    "explicitlyRegistered":
                                        type: "boolean"
                                        description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                    "rsRequestSigned":
                                        type: "boolean"
                                        description: "The flag indicating whether this service signs responses from the resource server.\n"
                                    "rsSignedRequestKeyId":
                                        type: "string"
                                        description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                    "clientRegistrationTypes":
                                        type: "array"
                                        description: "The client registration types that the client has declared it may use.\n"
                                        items:
                                            enum:
                                                - "AUTOMATIC"
                                                - "EXPLICIT"
                                            type: "string"
                                            description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                    "organizationName":
                                        type: "string"
                                        description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                    "signedJwksUri":
                                        type: "string"
                                        description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                    "entityId":
                                        type: "string"
                                        description: "the entity ID of this client.\n"
                                    "trustAnchorId":
                                        type: "string"
                                        description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                    "trustChain":
                                        type: "array"
                                        description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                        items:
                                            type: "string"
                                    "trustChainExpiresAt":
                                        type: "integer"
                                        description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "trustChainUpdatedAt":
                                        type: "integer"
                                        description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                        format: "int64"
                                    "locked":
                                        type: "boolean"
                                        description: "The flag which indicates whether this client is locked.\n"
                                    "credentialOfferEndpoint":
                                        type: "string"
                                        description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                    "fapiModes":
                                        type: "array"
                                        description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                        items:
                                            enum:
                                                - "FAPI1_ADVANCED"
                                                - "FAPI1_BASELINE"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                - "FAPI2_SECURITY"
                                            type: "string"
                                    "responseModes":
                                        type: "array"
                                        description: "The response modes that this client may use."
                                        items:
                                            type: "string"
                                            enum:
                                                - "QUERY"
                                                - "FRAGMENT"
                                                - "FORM_POST"
                                                - "JWT"
                                                - "QUERY_JWT"
                                                - "FRAGMENT_JWT"
                                                - "FORM_POST_JWT"
                                    "credentialResponseEncryptionRequired":
                                        type: "boolean"
                                        description: "True if credential responses to this client must be always encrypted."
                                x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "default":
                                    value: {"applicationType": "WEB", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My client", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ", "clientType": "CONFIDENTIAL", "createdAt": 1639468356000, "defaultMaxAge": 0, "derivedSectorIdentifier": "my-client.example.com", "developer": "john", "dynamicallyRegistered": false, "frontChannelRequestObjectEncryptionRequired": false, "grantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "idTokenSignAlg": "RS256", "modifiedAt": 1639468356000, "number": 6164, "parRequired": false, "redirectUris": ["https://my-client.example.com/cb1", "https://my-client.example.com/cb2"], "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "responseTypes": ["CODE", "TOKEN"], "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/client/get/26478243745571 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong clientId = ...;\n\napi.getClient(clientId);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\n\napi.getClient(clientId)\n"}]
            x-stoplight: {"id": "b2v2b3fl2amhw"}
    "/api/{serviceId}/client/get/list":
        get:
            tags:
                - "Client Management"
            summary: "List Clients"
            description: "Get a list of clients on a service.\n\nIf the access token can view a full service (including an admin), all clients within the\nservice are returned. Otherwise, only clients that the access token can view within the\nservice are returned.\n- ViewClient: []\n"
            operationId: "client_get_list_api"
            parameters:
                - name: "developer"
                  in: "query"
                  description: "The developer of client applications. The default value is null. If this parameter is not set\nto `null`, client application of the specified developer are returned. Otherwise, all client\napplications that belong to the service are returned.\n"
                  required: false
                  schema:
                    type: "string"
                - name: "start"
                  in: "query"
                  description: "Start index (inclusive) of the result set. The default value is 0. Must not be a negative number."
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "end"
                  in: "query"
                  description: "End index (exclusive) of the result set. The default value is 5. Must not be a negative number."
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "start":
                                        type: "integer"
                                        description: "Start index (inclusive) of the result set of the query.\n"
                                        format: "int32"
                                    "end":
                                        type: "integer"
                                        description: "End index (exclusive) of the result set of the query.\n"
                                        format: "int32"
                                    "totalCount":
                                        type: "integer"
                                        description: "Total number of clients that belong to the service. This doesn't mean the number of clients\ncontained in the response.\n"
                                        format: "int32"
                                    "clients":
                                        type: "array"
                                        description: "An array of clients.\n"
                                        items:
                                            properties:
                                                "number":
                                                    type: "integer"
                                                    description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                    format: "int32"
                                                    readOnly: true
                                                "serviceNumber":
                                                    type: "integer"
                                                    description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                                    format: "int32"
                                                    readOnly: true
                                                "clientName":
                                                    type: "string"
                                                    description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "clientNames":
                                                    type: "array"
                                                    description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "description":
                                                    type: "string"
                                                    description: "The description about the client application."
                                                "descriptions":
                                                    type: "array"
                                                    description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "clientId":
                                                    type: "integer"
                                                    description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                    format: "int64"
                                                    readOnly: true
                                                "clientSecret":
                                                    type: "string"
                                                    description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                                    readOnly: true
                                                "clientIdAlias":
                                                    type: "string"
                                                    description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                                "clientIdAliasEnabled":
                                                    type: "boolean"
                                                    description: "Deprecated. Always set to `true`."
                                                "clientType":
                                                    type: "string"
                                                    enum:
                                                        - "PUBLIC"
                                                        - "CONFIDENTIAL"
                                                    description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                                "applicationType":
                                                    type: "string"
                                                    enum:
                                                        - "WEB"
                                                        - "NATIVE"
                                                    description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                                    x-stoplight: {"id": "44dohgvzte9r5"}
                                                "logoUri":
                                                    type: "string"
                                                    description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "logoUris":
                                                    type: "array"
                                                    description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "contacts":
                                                    type: "array"
                                                    description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    items:
                                                        type: "string"
                                                "tlsClientCertificateBoundAccessTokens":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                                "dynamicallyRegistered":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                    readOnly: true
                                                "softwareId":
                                                    type: "string"
                                                    description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                "softwareVersion":
                                                    type: "string"
                                                    description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                "registrationAccessTokenHash":
                                                    type: "string"
                                                    description: "The hash of the registration access token for this client.\n"
                                                "createdAt":
                                                    type: "integer"
                                                    description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                    format: "int64"
                                                    readOnly: true
                                                "modifiedAt":
                                                    type: "integer"
                                                    description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                    format: "int64"
                                                    readOnly: true
                                                "grantTypes":
                                                    type: "array"
                                                    description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    items:
                                                        enum:
                                                            - "AUTHORIZATION_CODE"
                                                            - "IMPLICIT"
                                                            - "PASSWORD"
                                                            - "CLIENT_CREDENTIALS"
                                                            - "REFRESH_TOKEN"
                                                            - "CIBA"
                                                            - "DEVICE_CODE"
                                                            - "TOKEN_EXCHANGE"
                                                            - "JWT_BEARER"
                                                        type: "string"
                                                        description: "The grant type of the access token when the access token was created.\n"
                                                        x-stoplight: {"id": "033u82mqvyogn"}
                                                "responseTypes":
                                                    type: "array"
                                                    description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    items:
                                                        enum:
                                                            - "NONE"
                                                            - "CODE"
                                                            - "TOKEN"
                                                            - "ID_TOKEN"
                                                            - "CODE_TOKEN"
                                                            - "CODE_ID_TOKEN"
                                                            - "ID_TOKEN_TOKEN"
                                                            - "CODE_ID_TOKEN_TOKEN"
                                                        type: "string"
                                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                                "redirectUris":
                                                    type: "array"
                                                    description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                                    items:
                                                        type: "string"
                                                "authorizationSignAlg":
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    type: "string"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "authorizationEncryptionAlg":
                                                    type: "string"
                                                    enum:
                                                        - "RSA1_5"
                                                        - "RSA_OAEP"
                                                        - "RSA_OAEP_256"
                                                        - "A128KW"
                                                        - "A192KW"
                                                        - "A256KW"
                                                        - "DIR"
                                                        - "ECDH_ES"
                                                        - "ECDH_ES_A128KW"
                                                        - "ECDH_ES_A192KW"
                                                        - "ECDH_ES_A256KW"
                                                        - "A128GCMKW"
                                                        - "A192GCMKW"
                                                        - "A256GCMKW"
                                                        - "PBES2_HS256_A128KW"
                                                        - "PBES2_HS384_A192KW"
                                                        - "PBES2_HS512_A256KW"
                                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                    x-stoplight: {"id": "vxygld830b5on"}
                                                "authorizationEncryptionEnc":
                                                    type: "string"
                                                    enum:
                                                        - "A128CBC_HS256"
                                                        - "A192CBC_HS384"
                                                        - "A256CBC_HS512"
                                                        - "A128GCM"
                                                        - "A192GCM"
                                                        - "A256GCM"
                                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                                "tokenAuthMethod":
                                                    enum:
                                                        - "NONE"
                                                        - "CLIENT_SECRET_BASIC"
                                                        - "CLIENT_SECRET_POST"
                                                        - "CLIENT_SECRET_JWT"
                                                        - "PRIVATE_KEY_JWT"
                                                        - "TLS_CLIENT_AUTH"
                                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                    type: "string"
                                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                                "tokenAuthSignAlg":
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    type: "string"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "selfSignedCertificateKeyId":
                                                    type: "string"
                                                    description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                                "tlsClientAuthSubjectDn":
                                                    type: "string"
                                                    description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                                "tlsClientAuthSanDns":
                                                    type: "string"
                                                    description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                                "tlsClientAuthSanUri":
                                                    type: "string"
                                                    description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                                "tlsClientAuthSanIp":
                                                    type: "string"
                                                    description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                                "tlsClientAuthSanEmail":
                                                    type: "string"
                                                    description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                                "parRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                                "requestObjectRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                                "requestSignAlg":
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    type: "string"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "requestEncryptionAlg":
                                                    enum:
                                                        - "RSA1_5"
                                                        - "RSA_OAEP"
                                                        - "RSA_OAEP_256"
                                                        - "A128KW"
                                                        - "A192KW"
                                                        - "A256KW"
                                                        - "DIR"
                                                        - "ECDH_ES"
                                                        - "ECDH_ES_A128KW"
                                                        - "ECDH_ES_A192KW"
                                                        - "ECDH_ES_A256KW"
                                                        - "A128GCMKW"
                                                        - "A192GCMKW"
                                                        - "A256GCMKW"
                                                        - "PBES2_HS256_A128KW"
                                                        - "PBES2_HS384_A192KW"
                                                        - "PBES2_HS512_A256KW"
                                                    type: "string"
                                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                    x-stoplight: {"id": "vxygld830b5on"}
                                                "requestEncryptionEnc":
                                                    enum:
                                                        - "A128CBC_HS256"
                                                        - "A192CBC_HS384"
                                                        - "A256CBC_HS512"
                                                        - "A128GCM"
                                                        - "A192GCM"
                                                        - "A256GCM"
                                                    type: "string"
                                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                                "requestUris":
                                                    type: "array"
                                                    description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                                    items:
                                                        type: "string"
                                                "defaultMaxAge":
                                                    type: "integer"
                                                    description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    format: "int32"
                                                "defaultAcrs":
                                                    type: "array"
                                                    description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                                    items:
                                                        type: "string"
                                                "idTokenSignAlg":
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    type: "string"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "idTokenEncryptionAlg":
                                                    enum:
                                                        - "RSA1_5"
                                                        - "RSA_OAEP"
                                                        - "RSA_OAEP_256"
                                                        - "A128KW"
                                                        - "A192KW"
                                                        - "A256KW"
                                                        - "DIR"
                                                        - "ECDH_ES"
                                                        - "ECDH_ES_A128KW"
                                                        - "ECDH_ES_A192KW"
                                                        - "ECDH_ES_A256KW"
                                                        - "A128GCMKW"
                                                        - "A192GCMKW"
                                                        - "A256GCMKW"
                                                        - "PBES2_HS256_A128KW"
                                                        - "PBES2_HS384_A192KW"
                                                        - "PBES2_HS512_A256KW"
                                                    type: "string"
                                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                    x-stoplight: {"id": "vxygld830b5on"}
                                                "idTokenEncryptionEnc":
                                                    enum:
                                                        - "A128CBC_HS256"
                                                        - "A192CBC_HS384"
                                                        - "A256CBC_HS512"
                                                        - "A128GCM"
                                                        - "A192GCM"
                                                        - "A256GCM"
                                                    type: "string"
                                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                                "authTimeRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "subjectType":
                                                    type: "string"
                                                    enum:
                                                        - "PUBLIC"
                                                        - "PAIRWISE"
                                                    description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    x-stoplight: {"id": "zm5yes2y915ld"}
                                                "sectorIdentifierUri":
                                                    type: "string"
                                                    description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                                "derivedSectorIdentifier":
                                                    type: "string"
                                                    description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                                    readOnly: true
                                                "jwksUri":
                                                    type: "string"
                                                    description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "jwks":
                                                    type: "string"
                                                    description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "userInfoSignAlg":
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    type: "string"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "userInfoEncryptionAlg":
                                                    enum:
                                                        - "RSA1_5"
                                                        - "RSA_OAEP"
                                                        - "RSA_OAEP_256"
                                                        - "A128KW"
                                                        - "A192KW"
                                                        - "A256KW"
                                                        - "DIR"
                                                        - "ECDH_ES"
                                                        - "ECDH_ES_A128KW"
                                                        - "ECDH_ES_A192KW"
                                                        - "ECDH_ES_A256KW"
                                                        - "A128GCMKW"
                                                        - "A192GCMKW"
                                                        - "A256GCMKW"
                                                        - "PBES2_HS256_A128KW"
                                                        - "PBES2_HS384_A192KW"
                                                        - "PBES2_HS512_A256KW"
                                                    type: "string"
                                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                    x-stoplight: {"id": "vxygld830b5on"}
                                                "userInfoEncryptionEnc":
                                                    enum:
                                                        - "A128CBC_HS256"
                                                        - "A192CBC_HS384"
                                                        - "A256CBC_HS512"
                                                        - "A128GCM"
                                                        - "A192GCM"
                                                        - "A256GCM"
                                                    type: "string"
                                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                                "loginUri":
                                                    type: "string"
                                                    description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "tosUri":
                                                    type: "string"
                                                    description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "tosUris":
                                                    type: "array"
                                                    description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "policyUri":
                                                    type: "string"
                                                    description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "policyUris":
                                                    type: "array"
                                                    description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "clientUri":
                                                    type: "string"
                                                    description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "clientUris":
                                                    type: "array"
                                                    description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "bcDeliveryMode":
                                                    type: "string"
                                                    description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                                "bcNotificationEndpoint":
                                                    type: "string"
                                                    description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                                "bcRequestSignAlg":
                                                    enum:
                                                        - "NONE"
                                                        - "HS256"
                                                        - "HS384"
                                                        - "HS512"
                                                        - "RS256"
                                                        - "RS384"
                                                        - "RS512"
                                                        - "ES256"
                                                        - "ES384"
                                                        - "ES512"
                                                        - "PS256"
                                                        - "PS384"
                                                        - "PS512"
                                                        - "ES256K"
                                                        - "EdDSA"
                                                    type: "string"
                                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                                "bcUserCodeRequired":
                                                    type: "boolean"
                                                    description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of this client.\n"
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                                "extension":
                                                    type: "object"
                                                    properties:
                                                        "requestableScopes":
                                                            type: "array"
                                                            description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                            items:
                                                                type: "string"
                                                        "requestableScopesEnabled":
                                                            type: "boolean"
                                                            description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                                        "accessTokenDuration":
                                                            type: "integer"
                                                            description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                            format: "int64"
                                                        "refreshTokenDuration":
                                                            type: "integer"
                                                            description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                            format: "int64"
                                                        "idTokenDuration":
                                                            type: "integer"
                                                            description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                            format: "int64"
                                                        "tokenExchangePermitted":
                                                            type: "boolean"
                                                            description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                                    x-stoplight: {"id": "0h8bpbau8xawc"}
                                                "authorizationDetailsTypes":
                                                    type: "array"
                                                    description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                                    items:
                                                        type: "string"
                                                "customMetadata":
                                                    type: "string"
                                                    description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                                "frontChannelRequestObjectEncryptionRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                                "requestObjectEncryptionAlgMatchRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                                "requestObjectEncryptionEncMatchRequired":
                                                    type: "boolean"
                                                    description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                                "digestAlgorithm":
                                                    type: "string"
                                                    description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                                "singleAccessTokenPerSubject":
                                                    type: "boolean"
                                                    description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                                "pkceRequired":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                                "pkceS256Required":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                                "dpopRequired":
                                                    type: "boolean"
                                                    description: "If the DPoP is required for this client\n"
                                                "automaticallyRegistered":
                                                    type: "boolean"
                                                    description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                                "explicitlyRegistered":
                                                    type: "boolean"
                                                    description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                                "rsRequestSigned":
                                                    type: "boolean"
                                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                                "rsSignedRequestKeyId":
                                                    type: "string"
                                                    description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                                "clientRegistrationTypes":
                                                    type: "array"
                                                    description: "The client registration types that the client has declared it may use.\n"
                                                    items:
                                                        enum:
                                                            - "AUTOMATIC"
                                                            - "EXPLICIT"
                                                        type: "string"
                                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                                "organizationName":
                                                    type: "string"
                                                    description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                                "signedJwksUri":
                                                    type: "string"
                                                    description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                                "entityId":
                                                    type: "string"
                                                    description: "the entity ID of this client.\n"
                                                "trustAnchorId":
                                                    type: "string"
                                                    description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                                "trustChain":
                                                    type: "array"
                                                    description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                                    items:
                                                        type: "string"
                                                "trustChainExpiresAt":
                                                    type: "integer"
                                                    description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                                    format: "int64"
                                                "trustChainUpdatedAt":
                                                    type: "integer"
                                                    description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                                    format: "int64"
                                                "locked":
                                                    type: "boolean"
                                                    description: "The flag which indicates whether this client is locked.\n"
                                                "credentialOfferEndpoint":
                                                    type: "string"
                                                    description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                                "fapiModes":
                                                    type: "array"
                                                    description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                                    items:
                                                        enum:
                                                            - "FAPI1_ADVANCED"
                                                            - "FAPI1_BASELINE"
                                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                            - "FAPI2_SECURITY"
                                                        type: "string"
                                                "responseModes":
                                                    type: "array"
                                                    description: "The response modes that this client may use."
                                                    items:
                                                        type: "string"
                                                        enum:
                                                            - "QUERY"
                                                            - "FRAGMENT"
                                                            - "FORM_POST"
                                                            - "JWT"
                                                            - "QUERY_JWT"
                                                            - "FRAGMENT_JWT"
                                                            - "FORM_POST_JWT"
                                                "credentialResponseEncryptionRequired":
                                                    type: "boolean"
                                                    description: "True if credential responses to this client must be always encrypted."
                                            type: "object"
                                            x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "full":
                                    summary: "Example showing full client view."
                                    value: {"clients": [{"applicationType": "WEB", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My client", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ", "clientType": "CONFIDENTIAL", "createdAt": 1639468356000, "defaultMaxAge": 0, "derivedSectorIdentifier": "my-client.example.com", "dynamicallyRegistered": false, "frontChannelRequestObjectEncryptionRequired": false, "grantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "idTokenSignAlg": "RS256", "modifiedAt": 1639468356000, "number": 6164, "parRequired": false, "redirectUris": ["https://my-client.example.com/cb1", "https://my-client.example.com/cb2"], "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "responseTypes": ["CODE", "TOKEN"], "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}], "end": 3, "start": 0, "totalCount": 1}
                                "limited":
                                    summary: "Example showing limited client view."
                                    value: {"clients": [{"clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My client", "clientType": "CONFIDENTIAL", "number": 6164}], "end": 3, "start": 0, "totalCount": 1}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/client/get/list?developer=john\\&start=0\\&end=5 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nString developer = \"john\";\nint start = 0;\nint end = 5;\n\napi.getClientList(developer, start, end);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\ndeveloper = 'john'\nstart = 0\nend = 5\n\napi.getClientList(developer, start, end)\n"}]
            x-stoplight: {"id": "dpj5zvg6rbaxe"}
    "/api/{serviceId}/client/create":
        post:
            tags:
                - "Client Management"
            summary: "Create Client"
            description: "Create a new client.\n"
            operationId: "client_create_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                    format: "int32"
                                    readOnly: true
                                "serviceNumber":
                                    type: "integer"
                                    description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                    format: "int32"
                                    readOnly: true
                                "clientName":
                                    type: "string"
                                    description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "clientNames":
                                    type: "array"
                                    description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "description":
                                    type: "string"
                                    description: "The description about the client application."
                                "descriptions":
                                    type: "array"
                                    description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "clientId":
                                    type: "integer"
                                    description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                    readOnly: true
                                "clientIdAlias":
                                    type: "string"
                                    description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always set to `true`."
                                "clientType":
                                    type: "string"
                                    enum:
                                        - "PUBLIC"
                                        - "CONFIDENTIAL"
                                    description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                "applicationType":
                                    type: "string"
                                    enum:
                                        - "WEB"
                                        - "NATIVE"
                                    description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                    x-stoplight: {"id": "44dohgvzte9r5"}
                                "logoUri":
                                    type: "string"
                                    description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "logoUris":
                                    type: "array"
                                    description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "contacts":
                                    type: "array"
                                    description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        type: "string"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                "dynamicallyRegistered":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    readOnly: true
                                "softwareId":
                                    type: "string"
                                    description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                "softwareVersion":
                                    type: "string"
                                    description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                "registrationAccessTokenHash":
                                    type: "string"
                                    description: "The hash of the registration access token for this client.\n"
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                    format: "int64"
                                    readOnly: true
                                "grantTypes":
                                    type: "array"
                                    description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        type: "string"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "responseTypes":
                                    type: "array"
                                    description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        type: "string"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "redirectUris":
                                    type: "array"
                                    description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                    items:
                                        type: "string"
                                "authorizationSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "authorizationEncryptionAlg":
                                    type: "string"
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "authorizationEncryptionEnc":
                                    type: "string"
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "tokenAuthMethod":
                                    enum:
                                        - "NONE"
                                        - "CLIENT_SECRET_BASIC"
                                        - "CLIENT_SECRET_POST"
                                        - "CLIENT_SECRET_JWT"
                                        - "PRIVATE_KEY_JWT"
                                        - "TLS_CLIENT_AUTH"
                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                    type: "string"
                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "tokenAuthSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "selfSignedCertificateKeyId":
                                    type: "string"
                                    description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                "tlsClientAuthSubjectDn":
                                    type: "string"
                                    description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanDns":
                                    type: "string"
                                    description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanUri":
                                    type: "string"
                                    description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanIp":
                                    type: "string"
                                    description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanEmail":
                                    type: "string"
                                    description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                "requestSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "requestEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "requestEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "requestUris":
                                    type: "array"
                                    description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                    items:
                                        type: "string"
                                "defaultMaxAge":
                                    type: "integer"
                                    description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    format: "int32"
                                "defaultAcrs":
                                    type: "array"
                                    description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                    items:
                                        type: "string"
                                "idTokenSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "idTokenEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "idTokenEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "authTimeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "subjectType":
                                    type: "string"
                                    enum:
                                        - "PUBLIC"
                                        - "PAIRWISE"
                                    description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    x-stoplight: {"id": "zm5yes2y915ld"}
                                "sectorIdentifierUri":
                                    type: "string"
                                    description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                "derivedSectorIdentifier":
                                    type: "string"
                                    description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                    readOnly: true
                                "jwksUri":
                                    type: "string"
                                    description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "userInfoSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "userInfoEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "userInfoEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "loginUri":
                                    type: "string"
                                    description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "tosUri":
                                    type: "string"
                                    description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "tosUris":
                                    type: "array"
                                    description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "policyUri":
                                    type: "string"
                                    description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "policyUris":
                                    type: "array"
                                    description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "clientUri":
                                    type: "string"
                                    description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "clientUris":
                                    type: "array"
                                    description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "bcDeliveryMode":
                                    type: "string"
                                    description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                "bcNotificationEndpoint":
                                    type: "string"
                                    description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                "bcRequestSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "bcUserCodeRequired":
                                    type: "boolean"
                                    description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this client.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "extension":
                                    type: "object"
                                    properties:
                                        "requestableScopes":
                                            type: "array"
                                            description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                            items:
                                                type: "string"
                                        "requestableScopesEnabled":
                                            type: "boolean"
                                            description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                        "accessTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "refreshTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "idTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "tokenExchangePermitted":
                                            type: "boolean"
                                            description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                    x-stoplight: {"id": "0h8bpbau8xawc"}
                                "authorizationDetailsTypes":
                                    type: "array"
                                    description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                    items:
                                        type: "string"
                                "customMetadata":
                                    type: "string"
                                    description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                "digestAlgorithm":
                                    type: "string"
                                    description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "dpopRequired":
                                    type: "boolean"
                                    description: "If the DPoP is required for this client\n"
                                "automaticallyRegistered":
                                    type: "boolean"
                                    description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                "explicitlyRegistered":
                                    type: "boolean"
                                    description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                "rsRequestSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "rsSignedRequestKeyId":
                                    type: "string"
                                    description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                "clientRegistrationTypes":
                                    type: "array"
                                    description: "The client registration types that the client has declared it may use.\n"
                                    items:
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        type: "string"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                "entityId":
                                    type: "string"
                                    description: "the entity ID of this client.\n"
                                "trustAnchorId":
                                    type: "string"
                                    description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                "trustChain":
                                    type: "array"
                                    description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                    items:
                                        type: "string"
                                "trustChainExpiresAt":
                                    type: "integer"
                                    description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                    format: "int64"
                                "trustChainUpdatedAt":
                                    type: "integer"
                                    description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                    format: "int64"
                                "locked":
                                    type: "boolean"
                                    description: "The flag which indicates whether this client is locked.\n"
                                "credentialOfferEndpoint":
                                    type: "string"
                                    description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                    items:
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                        type: "string"
                                "responseModes":
                                    type: "array"
                                    description: "The response modes that this client may use."
                                    items:
                                        type: "string"
                                        enum:
                                            - "QUERY"
                                            - "FRAGMENT"
                                            - "FORM_POST"
                                            - "JWT"
                                            - "QUERY_JWT"
                                            - "FRAGMENT_JWT"
                                            - "FORM_POST_JWT"
                                "credentialResponseEncryptionRequired":
                                    type: "boolean"
                                    description: "True if credential responses to this client must be always encrypted."
                            type: "object"
                            x-stoplight: {"id": "q48am9nz6ymbs"}
                        examples:
                            "default":
                                value: {"developer": "john", "clientName": "My Client", "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientType": "CONFIDENTIAL", "applicationType": "WEB", "grantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "responseTypes": ["CODE", "TOKEN"], "redirectUris": ["https://my-client.example.com/cb1", "https://my-client.example.com/cb2"], "tokenAuthMethod": "CLIENT_SECRET_BASIC", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}]}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "number":
                                        type: "integer"
                                        description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                        format: "int32"
                                        readOnly: true
                                    "serviceNumber":
                                        type: "integer"
                                        description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                        format: "int32"
                                        readOnly: true
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "clientNames":
                                        type: "array"
                                        description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "description":
                                        type: "string"
                                        description: "The description about the client application."
                                    "descriptions":
                                        type: "array"
                                        description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "clientId":
                                        type: "integer"
                                        description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                        format: "int64"
                                        readOnly: true
                                    "clientSecret":
                                        type: "string"
                                        description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                        readOnly: true
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                    "clientIdAliasEnabled":
                                        type: "boolean"
                                        description: "Deprecated. Always set to `true`."
                                    "clientType":
                                        type: "string"
                                        enum:
                                            - "PUBLIC"
                                            - "CONFIDENTIAL"
                                        description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                    "applicationType":
                                        type: "string"
                                        enum:
                                            - "WEB"
                                            - "NATIVE"
                                        description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                        x-stoplight: {"id": "44dohgvzte9r5"}
                                    "logoUri":
                                        type: "string"
                                        description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "logoUris":
                                        type: "array"
                                        description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "contacts":
                                        type: "array"
                                        description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            type: "string"
                                    "tlsClientCertificateBoundAccessTokens":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                    "dynamicallyRegistered":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                        readOnly: true
                                    "softwareId":
                                        type: "string"
                                        description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    "softwareVersion":
                                        type: "string"
                                        description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    "registrationAccessTokenHash":
                                        type: "string"
                                        description: "The hash of the registration access token for this client.\n"
                                    "createdAt":
                                        type: "integer"
                                        description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                        format: "int64"
                                        readOnly: true
                                    "modifiedAt":
                                        type: "integer"
                                        description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                        format: "int64"
                                        readOnly: true
                                    "grantTypes":
                                        type: "array"
                                        description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            enum:
                                                - "AUTHORIZATION_CODE"
                                                - "IMPLICIT"
                                                - "PASSWORD"
                                                - "CLIENT_CREDENTIALS"
                                                - "REFRESH_TOKEN"
                                                - "CIBA"
                                                - "DEVICE_CODE"
                                                - "TOKEN_EXCHANGE"
                                                - "JWT_BEARER"
                                            type: "string"
                                            description: "The grant type of the access token when the access token was created.\n"
                                            x-stoplight: {"id": "033u82mqvyogn"}
                                    "responseTypes":
                                        type: "array"
                                        description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CODE"
                                                - "TOKEN"
                                                - "ID_TOKEN"
                                                - "CODE_TOKEN"
                                                - "CODE_ID_TOKEN"
                                                - "ID_TOKEN_TOKEN"
                                                - "CODE_ID_TOKEN_TOKEN"
                                            type: "string"
                                            x-stoplight: {"id": "t7wed2d7tkpy7"}
                                    "redirectUris":
                                        type: "array"
                                        description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                        items:
                                            type: "string"
                                    "authorizationSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "authorizationEncryptionAlg":
                                        type: "string"
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "authorizationEncryptionEnc":
                                        type: "string"
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "tokenAuthMethod":
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "tokenAuthSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "selfSignedCertificateKeyId":
                                        type: "string"
                                        description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                    "tlsClientAuthSubjectDn":
                                        type: "string"
                                        description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanDns":
                                        type: "string"
                                        description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanUri":
                                        type: "string"
                                        description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanIp":
                                        type: "string"
                                        description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanEmail":
                                        type: "string"
                                        description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "parRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                    "requestObjectRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                    "requestSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "requestEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "requestEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "requestUris":
                                        type: "array"
                                        description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                        items:
                                            type: "string"
                                    "defaultMaxAge":
                                        type: "integer"
                                        description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        format: "int32"
                                    "defaultAcrs":
                                        type: "array"
                                        description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                        items:
                                            type: "string"
                                    "idTokenSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "idTokenEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "idTokenEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "authTimeRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "subjectType":
                                        type: "string"
                                        enum:
                                            - "PUBLIC"
                                            - "PAIRWISE"
                                        description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "zm5yes2y915ld"}
                                    "sectorIdentifierUri":
                                        type: "string"
                                        description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                    "derivedSectorIdentifier":
                                        type: "string"
                                        description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                        readOnly: true
                                    "jwksUri":
                                        type: "string"
                                        description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "jwks":
                                        type: "string"
                                        description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "userInfoSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "userInfoEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "userInfoEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "loginUri":
                                        type: "string"
                                        description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "tosUri":
                                        type: "string"
                                        description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "tosUris":
                                        type: "array"
                                        description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "policyUri":
                                        type: "string"
                                        description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "policyUris":
                                        type: "array"
                                        description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "clientUri":
                                        type: "string"
                                        description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "clientUris":
                                        type: "array"
                                        description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "bcDeliveryMode":
                                        type: "string"
                                        description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                    "bcNotificationEndpoint":
                                        type: "string"
                                        description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                    "bcRequestSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "bcUserCodeRequired":
                                        type: "boolean"
                                        description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                    "attributes":
                                        type: "array"
                                        description: "The attributes of this client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "extension":
                                        type: "object"
                                        properties:
                                            "requestableScopes":
                                                type: "array"
                                                description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                items:
                                                    type: "string"
                                            "requestableScopesEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                            "accessTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "refreshTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "idTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "tokenExchangePermitted":
                                                type: "boolean"
                                                description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                        x-stoplight: {"id": "0h8bpbau8xawc"}
                                    "authorizationDetailsTypes":
                                        type: "array"
                                        description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                        items:
                                            type: "string"
                                    "customMetadata":
                                        type: "string"
                                        description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                    "frontChannelRequestObjectEncryptionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                    "requestObjectEncryptionAlgMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                    "requestObjectEncryptionEncMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                    "digestAlgorithm":
                                        type: "string"
                                        description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                    "singleAccessTokenPerSubject":
                                        type: "boolean"
                                        description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                    "pkceRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                    "pkceS256Required":
                                        type: "boolean"
                                        description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                    "dpopRequired":
                                        type: "boolean"
                                        description: "If the DPoP is required for this client\n"
                                    "automaticallyRegistered":
                                        type: "boolean"
                                        description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                    "explicitlyRegistered":
                                        type: "boolean"
                                        description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                    "rsRequestSigned":
                                        type: "boolean"
                                        description: "The flag indicating whether this service signs responses from the resource server.\n"
                                    "rsSignedRequestKeyId":
                                        type: "string"
                                        description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                    "clientRegistrationTypes":
                                        type: "array"
                                        description: "The client registration types that the client has declared it may use.\n"
                                        items:
                                            enum:
                                                - "AUTOMATIC"
                                                - "EXPLICIT"
                                            type: "string"
                                            description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                    "organizationName":
                                        type: "string"
                                        description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                    "signedJwksUri":
                                        type: "string"
                                        description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                    "entityId":
                                        type: "string"
                                        description: "the entity ID of this client.\n"
                                    "trustAnchorId":
                                        type: "string"
                                        description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                    "trustChain":
                                        type: "array"
                                        description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                        items:
                                            type: "string"
                                    "trustChainExpiresAt":
                                        type: "integer"
                                        description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "trustChainUpdatedAt":
                                        type: "integer"
                                        description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                        format: "int64"
                                    "locked":
                                        type: "boolean"
                                        description: "The flag which indicates whether this client is locked.\n"
                                    "credentialOfferEndpoint":
                                        type: "string"
                                        description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                    "fapiModes":
                                        type: "array"
                                        description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                        items:
                                            enum:
                                                - "FAPI1_ADVANCED"
                                                - "FAPI1_BASELINE"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                - "FAPI2_SECURITY"
                                            type: "string"
                                    "responseModes":
                                        type: "array"
                                        description: "The response modes that this client may use."
                                        items:
                                            type: "string"
                                            enum:
                                                - "QUERY"
                                                - "FRAGMENT"
                                                - "FORM_POST"
                                                - "JWT"
                                                - "QUERY_JWT"
                                                - "FRAGMENT_JWT"
                                                - "FORM_POST_JWT"
                                    "credentialResponseEncryptionRequired":
                                        type: "boolean"
                                        description: "True if credential responses to this client must be always encrypted."
                                type: "object"
                                x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "default":
                                    value: {"applicationType": "WEB", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My client", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ", "clientType": "CONFIDENTIAL", "createdAt": 1639468356000, "defaultMaxAge": 0, "derivedSectorIdentifier": "my-client.example.com", "developer": "john", "dynamicallyRegistered": false, "frontChannelRequestObjectEncryptionRequired": false, "grantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "idTokenSignAlg": "RS256", "modifiedAt": 1639468356000, "number": 6164, "parRequired": false, "redirectUris": ["https://my-client.example.com/cb1", "https://my-client.example.com/cb2"], "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "responseTypes": ["CODE", "TOKEN"], "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/create \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"developer\": \"john\", \"clientName\": \"My Client\", ... }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nClient client = new Client();\nclient.setDeveloper(\"john\");\nclient.setClientName(\"My Client\");\n...\n\napi.createClient(client);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclient = Client()\nclient.developer = 'john'\nclient.clientName = 'My Client'\n...\n\napi.createClient(client)\n"}]
            x-stoplight: {"id": "am00st36qsfu4"}
    "/api/{serviceId}/client/update/{clientId}":
        post:
            tags:
                - "Client Management"
            summary: "Update Client"
            description: "Update a client.\n"
            operationId: "client_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                    format: "int32"
                                    readOnly: true
                                "serviceNumber":
                                    type: "integer"
                                    description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                    format: "int32"
                                    readOnly: true
                                "clientName":
                                    type: "string"
                                    description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "clientNames":
                                    type: "array"
                                    description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "description":
                                    type: "string"
                                    description: "The description about the client application."
                                "descriptions":
                                    type: "array"
                                    description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "clientId":
                                    type: "integer"
                                    description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                    readOnly: true
                                "clientIdAlias":
                                    type: "string"
                                    description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always set to `true`."
                                "clientType":
                                    type: "string"
                                    enum:
                                        - "PUBLIC"
                                        - "CONFIDENTIAL"
                                    description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                "applicationType":
                                    type: "string"
                                    enum:
                                        - "WEB"
                                        - "NATIVE"
                                    description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                    x-stoplight: {"id": "44dohgvzte9r5"}
                                "logoUri":
                                    type: "string"
                                    description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "logoUris":
                                    type: "array"
                                    description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "contacts":
                                    type: "array"
                                    description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        type: "string"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                "dynamicallyRegistered":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    readOnly: true
                                "softwareId":
                                    type: "string"
                                    description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                "softwareVersion":
                                    type: "string"
                                    description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                "registrationAccessTokenHash":
                                    type: "string"
                                    description: "The hash of the registration access token for this client.\n"
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                    format: "int64"
                                    readOnly: true
                                "grantTypes":
                                    type: "array"
                                    description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        type: "string"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "responseTypes":
                                    type: "array"
                                    description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        type: "string"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "redirectUris":
                                    type: "array"
                                    description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                    items:
                                        type: "string"
                                "authorizationSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "authorizationEncryptionAlg":
                                    type: "string"
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "authorizationEncryptionEnc":
                                    type: "string"
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "tokenAuthMethod":
                                    enum:
                                        - "NONE"
                                        - "CLIENT_SECRET_BASIC"
                                        - "CLIENT_SECRET_POST"
                                        - "CLIENT_SECRET_JWT"
                                        - "PRIVATE_KEY_JWT"
                                        - "TLS_CLIENT_AUTH"
                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                    type: "string"
                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "tokenAuthSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "selfSignedCertificateKeyId":
                                    type: "string"
                                    description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                "tlsClientAuthSubjectDn":
                                    type: "string"
                                    description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanDns":
                                    type: "string"
                                    description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanUri":
                                    type: "string"
                                    description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanIp":
                                    type: "string"
                                    description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanEmail":
                                    type: "string"
                                    description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                "requestSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "requestEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "requestEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "requestUris":
                                    type: "array"
                                    description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                    items:
                                        type: "string"
                                "defaultMaxAge":
                                    type: "integer"
                                    description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    format: "int32"
                                "defaultAcrs":
                                    type: "array"
                                    description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                    items:
                                        type: "string"
                                "idTokenSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "idTokenEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "idTokenEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "authTimeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "subjectType":
                                    type: "string"
                                    enum:
                                        - "PUBLIC"
                                        - "PAIRWISE"
                                    description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    x-stoplight: {"id": "zm5yes2y915ld"}
                                "sectorIdentifierUri":
                                    type: "string"
                                    description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                "derivedSectorIdentifier":
                                    type: "string"
                                    description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                    readOnly: true
                                "jwksUri":
                                    type: "string"
                                    description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "userInfoSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "userInfoEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "userInfoEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "loginUri":
                                    type: "string"
                                    description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "tosUri":
                                    type: "string"
                                    description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "tosUris":
                                    type: "array"
                                    description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "policyUri":
                                    type: "string"
                                    description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "policyUris":
                                    type: "array"
                                    description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "clientUri":
                                    type: "string"
                                    description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "clientUris":
                                    type: "array"
                                    description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "bcDeliveryMode":
                                    type: "string"
                                    description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                "bcNotificationEndpoint":
                                    type: "string"
                                    description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                "bcRequestSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "bcUserCodeRequired":
                                    type: "boolean"
                                    description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this client.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "extension":
                                    type: "object"
                                    properties:
                                        "requestableScopes":
                                            type: "array"
                                            description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                            items:
                                                type: "string"
                                        "requestableScopesEnabled":
                                            type: "boolean"
                                            description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                        "accessTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "refreshTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "idTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "tokenExchangePermitted":
                                            type: "boolean"
                                            description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                    x-stoplight: {"id": "0h8bpbau8xawc"}
                                "authorizationDetailsTypes":
                                    type: "array"
                                    description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                    items:
                                        type: "string"
                                "customMetadata":
                                    type: "string"
                                    description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                "digestAlgorithm":
                                    type: "string"
                                    description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "dpopRequired":
                                    type: "boolean"
                                    description: "If the DPoP is required for this client\n"
                                "automaticallyRegistered":
                                    type: "boolean"
                                    description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                "explicitlyRegistered":
                                    type: "boolean"
                                    description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                "rsRequestSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "rsSignedRequestKeyId":
                                    type: "string"
                                    description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                "clientRegistrationTypes":
                                    type: "array"
                                    description: "The client registration types that the client has declared it may use.\n"
                                    items:
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        type: "string"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                "entityId":
                                    type: "string"
                                    description: "the entity ID of this client.\n"
                                "trustAnchorId":
                                    type: "string"
                                    description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                "trustChain":
                                    type: "array"
                                    description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                    items:
                                        type: "string"
                                "trustChainExpiresAt":
                                    type: "integer"
                                    description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                    format: "int64"
                                "trustChainUpdatedAt":
                                    type: "integer"
                                    description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                    format: "int64"
                                "locked":
                                    type: "boolean"
                                    description: "The flag which indicates whether this client is locked.\n"
                                "credentialOfferEndpoint":
                                    type: "string"
                                    description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                    items:
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                        type: "string"
                                "responseModes":
                                    type: "array"
                                    description: "The response modes that this client may use."
                                    items:
                                        type: "string"
                                        enum:
                                            - "QUERY"
                                            - "FRAGMENT"
                                            - "FORM_POST"
                                            - "JWT"
                                            - "QUERY_JWT"
                                            - "FRAGMENT_JWT"
                                            - "FORM_POST_JWT"
                                "credentialResponseEncryptionRequired":
                                    type: "boolean"
                                    description: "True if credential responses to this client must be always encrypted."
                            type: "object"
                            x-stoplight: {"id": "q48am9nz6ymbs"}
                        examples:
                            "default":
                                value: {"applicationType": "WEB", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authTimeRequired": false, "bcUserCodeRequired": false, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My updated client", "clientType": "CONFIDENTIAL", "defaultMaxAge": 0, "derivedSectorIdentifier": "my-client.example.com", "developer": "john", "dynamicallyRegistered": false, "frontChannelRequestObjectEncryptionRequired": false, "grantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "idTokenSignAlg": "RS256", "parRequired": false, "redirectUris": ["https://my-client.example.com/cb1", "https://my-client.example.com/cb2"], "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "responseTypes": ["CODE", "TOKEN"], "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "number":
                                    type: "integer"
                                    description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                    format: "int32"
                                    readOnly: true
                                "serviceNumber":
                                    type: "integer"
                                    description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                    format: "int32"
                                    readOnly: true
                                "clientName":
                                    type: "string"
                                    description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "clientNames":
                                    type: "array"
                                    description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "description":
                                    type: "string"
                                    description: "The description about the client application."
                                "descriptions":
                                    type: "array"
                                    description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "clientId":
                                    type: "integer"
                                    description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                    format: "int64"
                                    readOnly: true
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                    readOnly: true
                                "clientIdAlias":
                                    type: "string"
                                    description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                "clientIdAliasEnabled":
                                    type: "boolean"
                                    description: "Deprecated. Always set to `true`."
                                "clientType":
                                    type: "string"
                                    enum:
                                        - "PUBLIC"
                                        - "CONFIDENTIAL"
                                    description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                "applicationType":
                                    type: "string"
                                    enum:
                                        - "WEB"
                                        - "NATIVE"
                                    description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                    x-stoplight: {"id": "44dohgvzte9r5"}
                                "logoUri":
                                    type: "string"
                                    description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "logoUris":
                                    type: "array"
                                    description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "contacts":
                                    type: "array"
                                    description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        type: "string"
                                "tlsClientCertificateBoundAccessTokens":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                "dynamicallyRegistered":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    readOnly: true
                                "softwareId":
                                    type: "string"
                                    description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                "softwareVersion":
                                    type: "string"
                                    description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                "registrationAccessTokenHash":
                                    type: "string"
                                    description: "The hash of the registration access token for this client.\n"
                                "createdAt":
                                    type: "integer"
                                    description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                    format: "int64"
                                    readOnly: true
                                "modifiedAt":
                                    type: "integer"
                                    description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                    format: "int64"
                                    readOnly: true
                                "grantTypes":
                                    type: "array"
                                    description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        type: "string"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                "responseTypes":
                                    type: "array"
                                    description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    items:
                                        enum:
                                            - "NONE"
                                            - "CODE"
                                            - "TOKEN"
                                            - "ID_TOKEN"
                                            - "CODE_TOKEN"
                                            - "CODE_ID_TOKEN"
                                            - "ID_TOKEN_TOKEN"
                                            - "CODE_ID_TOKEN_TOKEN"
                                        type: "string"
                                        x-stoplight: {"id": "t7wed2d7tkpy7"}
                                "redirectUris":
                                    type: "array"
                                    description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                    items:
                                        type: "string"
                                "authorizationSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "authorizationEncryptionAlg":
                                    type: "string"
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "authorizationEncryptionEnc":
                                    type: "string"
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "tokenAuthMethod":
                                    enum:
                                        - "NONE"
                                        - "CLIENT_SECRET_BASIC"
                                        - "CLIENT_SECRET_POST"
                                        - "CLIENT_SECRET_JWT"
                                        - "PRIVATE_KEY_JWT"
                                        - "TLS_CLIENT_AUTH"
                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                    type: "string"
                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                "tokenAuthSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "selfSignedCertificateKeyId":
                                    type: "string"
                                    description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                "tlsClientAuthSubjectDn":
                                    type: "string"
                                    description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanDns":
                                    type: "string"
                                    description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanUri":
                                    type: "string"
                                    description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanIp":
                                    type: "string"
                                    description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "tlsClientAuthSanEmail":
                                    type: "string"
                                    description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                "parRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                "requestObjectRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                "requestSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "requestEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "requestEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "requestUris":
                                    type: "array"
                                    description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                    items:
                                        type: "string"
                                "defaultMaxAge":
                                    type: "integer"
                                    description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    format: "int32"
                                "defaultAcrs":
                                    type: "array"
                                    description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                    items:
                                        type: "string"
                                "idTokenSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "idTokenEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "idTokenEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "authTimeRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "subjectType":
                                    type: "string"
                                    enum:
                                        - "PUBLIC"
                                        - "PAIRWISE"
                                    description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    x-stoplight: {"id": "zm5yes2y915ld"}
                                "sectorIdentifierUri":
                                    type: "string"
                                    description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                "derivedSectorIdentifier":
                                    type: "string"
                                    description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                    readOnly: true
                                "jwksUri":
                                    type: "string"
                                    description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "jwks":
                                    type: "string"
                                    description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "userInfoSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "userInfoEncryptionAlg":
                                    enum:
                                        - "RSA1_5"
                                        - "RSA_OAEP"
                                        - "RSA_OAEP_256"
                                        - "A128KW"
                                        - "A192KW"
                                        - "A256KW"
                                        - "DIR"
                                        - "ECDH_ES"
                                        - "ECDH_ES_A128KW"
                                        - "ECDH_ES_A192KW"
                                        - "ECDH_ES_A256KW"
                                        - "A128GCMKW"
                                        - "A192GCMKW"
                                        - "A256GCMKW"
                                        - "PBES2_HS256_A128KW"
                                        - "PBES2_HS384_A192KW"
                                        - "PBES2_HS512_A256KW"
                                    type: "string"
                                    description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                    x-stoplight: {"id": "vxygld830b5on"}
                                "userInfoEncryptionEnc":
                                    enum:
                                        - "A128CBC_HS256"
                                        - "A192CBC_HS384"
                                        - "A256CBC_HS512"
                                        - "A128GCM"
                                        - "A192GCM"
                                        - "A256GCM"
                                    type: "string"
                                    description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                    x-stoplight: {"id": "brcy9frf5xu5k"}
                                "loginUri":
                                    type: "string"
                                    description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "tosUri":
                                    type: "string"
                                    description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "tosUris":
                                    type: "array"
                                    description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "policyUri":
                                    type: "string"
                                    description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "policyUris":
                                    type: "array"
                                    description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "clientUri":
                                    type: "string"
                                    description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                "clientUris":
                                    type: "array"
                                    description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                    items:
                                        properties:
                                            "tag":
                                                type: "string"
                                                description: "The language tag part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                "bcDeliveryMode":
                                    type: "string"
                                    description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                "bcNotificationEndpoint":
                                    type: "string"
                                    description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                "bcRequestSignAlg":
                                    enum:
                                        - "NONE"
                                        - "HS256"
                                        - "HS384"
                                        - "HS512"
                                        - "RS256"
                                        - "RS384"
                                        - "RS512"
                                        - "ES256"
                                        - "ES384"
                                        - "ES512"
                                        - "PS256"
                                        - "PS384"
                                        - "PS512"
                                        - "ES256K"
                                        - "EdDSA"
                                    type: "string"
                                    description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                    x-stoplight: {"id": "6hqm3efbv1d5d"}
                                "bcUserCodeRequired":
                                    type: "boolean"
                                    description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                "attributes":
                                    type: "array"
                                    description: "The attributes of this client.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                                "extension":
                                    type: "object"
                                    properties:
                                        "requestableScopes":
                                            type: "array"
                                            description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                            items:
                                                type: "string"
                                        "requestableScopesEnabled":
                                            type: "boolean"
                                            description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                        "accessTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "refreshTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "idTokenDuration":
                                            type: "integer"
                                            description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                            format: "int64"
                                        "tokenExchangePermitted":
                                            type: "boolean"
                                            description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                    x-stoplight: {"id": "0h8bpbau8xawc"}
                                "authorizationDetailsTypes":
                                    type: "array"
                                    description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                    items:
                                        type: "string"
                                "customMetadata":
                                    type: "string"
                                    description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                "frontChannelRequestObjectEncryptionRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                "requestObjectEncryptionAlgMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                "requestObjectEncryptionEncMatchRequired":
                                    type: "boolean"
                                    description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                "digestAlgorithm":
                                    type: "string"
                                    description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                "singleAccessTokenPerSubject":
                                    type: "boolean"
                                    description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                "pkceRequired":
                                    type: "boolean"
                                    description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                "pkceS256Required":
                                    type: "boolean"
                                    description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                "dpopRequired":
                                    type: "boolean"
                                    description: "If the DPoP is required for this client\n"
                                "automaticallyRegistered":
                                    type: "boolean"
                                    description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                "explicitlyRegistered":
                                    type: "boolean"
                                    description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                "rsRequestSigned":
                                    type: "boolean"
                                    description: "The flag indicating whether this service signs responses from the resource server.\n"
                                "rsSignedRequestKeyId":
                                    type: "string"
                                    description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                "clientRegistrationTypes":
                                    type: "array"
                                    description: "The client registration types that the client has declared it may use.\n"
                                    items:
                                        enum:
                                            - "AUTOMATIC"
                                            - "EXPLICIT"
                                        type: "string"
                                        description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                "organizationName":
                                    type: "string"
                                    description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                "signedJwksUri":
                                    type: "string"
                                    description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                "entityId":
                                    type: "string"
                                    description: "the entity ID of this client.\n"
                                "trustAnchorId":
                                    type: "string"
                                    description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                "trustChain":
                                    type: "array"
                                    description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                    items:
                                        type: "string"
                                "trustChainExpiresAt":
                                    type: "integer"
                                    description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                    format: "int64"
                                "trustChainUpdatedAt":
                                    type: "integer"
                                    description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                    format: "int64"
                                "locked":
                                    type: "boolean"
                                    description: "The flag which indicates whether this client is locked.\n"
                                "credentialOfferEndpoint":
                                    type: "string"
                                    description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                "fapiModes":
                                    type: "array"
                                    description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                    items:
                                        enum:
                                            - "FAPI1_ADVANCED"
                                            - "FAPI1_BASELINE"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                            - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                            - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                            - "FAPI2_SECURITY"
                                        type: "string"
                                "responseModes":
                                    type: "array"
                                    description: "The response modes that this client may use."
                                    items:
                                        type: "string"
                                        enum:
                                            - "QUERY"
                                            - "FRAGMENT"
                                            - "FORM_POST"
                                            - "JWT"
                                            - "QUERY_JWT"
                                            - "FRAGMENT_JWT"
                                            - "FORM_POST_JWT"
                                "credentialResponseEncryptionRequired":
                                    type: "boolean"
                                    description: "True if credential responses to this client must be always encrypted."
                            type: "object"
                            x-stoplight: {"id": "q48am9nz6ymbs"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "number":
                                        type: "integer"
                                        description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                        format: "int32"
                                        readOnly: true
                                    "serviceNumber":
                                        type: "integer"
                                        description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                        format: "int32"
                                        readOnly: true
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "clientNames":
                                        type: "array"
                                        description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "description":
                                        type: "string"
                                        description: "The description about the client application."
                                    "descriptions":
                                        type: "array"
                                        description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "clientId":
                                        type: "integer"
                                        description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                        format: "int64"
                                        readOnly: true
                                    "clientSecret":
                                        type: "string"
                                        description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                        readOnly: true
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                    "clientIdAliasEnabled":
                                        type: "boolean"
                                        description: "Deprecated. Always set to `true`."
                                    "clientType":
                                        type: "string"
                                        enum:
                                            - "PUBLIC"
                                            - "CONFIDENTIAL"
                                        description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                    "applicationType":
                                        type: "string"
                                        enum:
                                            - "WEB"
                                            - "NATIVE"
                                        description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                        x-stoplight: {"id": "44dohgvzte9r5"}
                                    "logoUri":
                                        type: "string"
                                        description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "logoUris":
                                        type: "array"
                                        description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "contacts":
                                        type: "array"
                                        description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            type: "string"
                                    "tlsClientCertificateBoundAccessTokens":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                    "dynamicallyRegistered":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                        readOnly: true
                                    "softwareId":
                                        type: "string"
                                        description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    "softwareVersion":
                                        type: "string"
                                        description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                    "registrationAccessTokenHash":
                                        type: "string"
                                        description: "The hash of the registration access token for this client.\n"
                                    "createdAt":
                                        type: "integer"
                                        description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                        format: "int64"
                                        readOnly: true
                                    "modifiedAt":
                                        type: "integer"
                                        description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                        format: "int64"
                                        readOnly: true
                                    "grantTypes":
                                        type: "array"
                                        description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            enum:
                                                - "AUTHORIZATION_CODE"
                                                - "IMPLICIT"
                                                - "PASSWORD"
                                                - "CLIENT_CREDENTIALS"
                                                - "REFRESH_TOKEN"
                                                - "CIBA"
                                                - "DEVICE_CODE"
                                                - "TOKEN_EXCHANGE"
                                                - "JWT_BEARER"
                                            type: "string"
                                            description: "The grant type of the access token when the access token was created.\n"
                                            x-stoplight: {"id": "033u82mqvyogn"}
                                    "responseTypes":
                                        type: "array"
                                        description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        items:
                                            enum:
                                                - "NONE"
                                                - "CODE"
                                                - "TOKEN"
                                                - "ID_TOKEN"
                                                - "CODE_TOKEN"
                                                - "CODE_ID_TOKEN"
                                                - "ID_TOKEN_TOKEN"
                                                - "CODE_ID_TOKEN_TOKEN"
                                            type: "string"
                                            x-stoplight: {"id": "t7wed2d7tkpy7"}
                                    "redirectUris":
                                        type: "array"
                                        description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                        items:
                                            type: "string"
                                    "authorizationSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "authorizationEncryptionAlg":
                                        type: "string"
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "authorizationEncryptionEnc":
                                        type: "string"
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "tokenAuthMethod":
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        type: "string"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "mtxqrm8h7jibz"}
                                    "tokenAuthSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "selfSignedCertificateKeyId":
                                        type: "string"
                                        description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                    "tlsClientAuthSubjectDn":
                                        type: "string"
                                        description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanDns":
                                        type: "string"
                                        description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanUri":
                                        type: "string"
                                        description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanIp":
                                        type: "string"
                                        description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "tlsClientAuthSanEmail":
                                        type: "string"
                                        description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                    "parRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                    "requestObjectRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                    "requestSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "requestEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "requestEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "requestUris":
                                        type: "array"
                                        description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                        items:
                                            type: "string"
                                    "defaultMaxAge":
                                        type: "integer"
                                        description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        format: "int32"
                                    "defaultAcrs":
                                        type: "array"
                                        description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                        items:
                                            type: "string"
                                    "idTokenSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "idTokenEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "idTokenEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "authTimeRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "subjectType":
                                        type: "string"
                                        enum:
                                            - "PUBLIC"
                                            - "PAIRWISE"
                                        description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                        x-stoplight: {"id": "zm5yes2y915ld"}
                                    "sectorIdentifierUri":
                                        type: "string"
                                        description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                    "derivedSectorIdentifier":
                                        type: "string"
                                        description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                        readOnly: true
                                    "jwksUri":
                                        type: "string"
                                        description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "jwks":
                                        type: "string"
                                        description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "userInfoSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "userInfoEncryptionAlg":
                                        enum:
                                            - "RSA1_5"
                                            - "RSA_OAEP"
                                            - "RSA_OAEP_256"
                                            - "A128KW"
                                            - "A192KW"
                                            - "A256KW"
                                            - "DIR"
                                            - "ECDH_ES"
                                            - "ECDH_ES_A128KW"
                                            - "ECDH_ES_A192KW"
                                            - "ECDH_ES_A256KW"
                                            - "A128GCMKW"
                                            - "A192GCMKW"
                                            - "A256GCMKW"
                                            - "PBES2_HS256_A128KW"
                                            - "PBES2_HS384_A192KW"
                                            - "PBES2_HS512_A256KW"
                                        type: "string"
                                        description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                        x-stoplight: {"id": "vxygld830b5on"}
                                    "userInfoEncryptionEnc":
                                        enum:
                                            - "A128CBC_HS256"
                                            - "A192CBC_HS384"
                                            - "A256CBC_HS512"
                                            - "A128GCM"
                                            - "A192GCM"
                                            - "A256GCM"
                                        type: "string"
                                        description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                        x-stoplight: {"id": "brcy9frf5xu5k"}
                                    "loginUri":
                                        type: "string"
                                        description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "tosUri":
                                        type: "string"
                                        description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "tosUris":
                                        type: "array"
                                        description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "policyUri":
                                        type: "string"
                                        description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "policyUris":
                                        type: "array"
                                        description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "clientUri":
                                        type: "string"
                                        description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "clientUris":
                                        type: "array"
                                        description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                        items:
                                            properties:
                                                "tag":
                                                    type: "string"
                                                    description: "The language tag part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "bcDeliveryMode":
                                        type: "string"
                                        description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                    "bcNotificationEndpoint":
                                        type: "string"
                                        description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                    "bcRequestSignAlg":
                                        enum:
                                            - "NONE"
                                            - "HS256"
                                            - "HS384"
                                            - "HS512"
                                            - "RS256"
                                            - "RS384"
                                            - "RS512"
                                            - "ES256"
                                            - "ES384"
                                            - "ES512"
                                            - "PS256"
                                            - "PS384"
                                            - "PS512"
                                            - "ES256K"
                                            - "EdDSA"
                                        type: "string"
                                        description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                        x-stoplight: {"id": "6hqm3efbv1d5d"}
                                    "bcUserCodeRequired":
                                        type: "boolean"
                                        description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                    "attributes":
                                        type: "array"
                                        description: "The attributes of this client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "extension":
                                        type: "object"
                                        properties:
                                            "requestableScopes":
                                                type: "array"
                                                description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                items:
                                                    type: "string"
                                            "requestableScopesEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                            "accessTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "refreshTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "idTokenDuration":
                                                type: "integer"
                                                description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                format: "int64"
                                            "tokenExchangePermitted":
                                                type: "boolean"
                                                description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                        x-stoplight: {"id": "0h8bpbau8xawc"}
                                    "authorizationDetailsTypes":
                                        type: "array"
                                        description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                        items:
                                            type: "string"
                                    "customMetadata":
                                        type: "string"
                                        description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                    "frontChannelRequestObjectEncryptionRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                    "requestObjectEncryptionAlgMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                    "requestObjectEncryptionEncMatchRequired":
                                        type: "boolean"
                                        description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                    "digestAlgorithm":
                                        type: "string"
                                        description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                    "singleAccessTokenPerSubject":
                                        type: "boolean"
                                        description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                    "pkceRequired":
                                        type: "boolean"
                                        description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                    "pkceS256Required":
                                        type: "boolean"
                                        description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                    "dpopRequired":
                                        type: "boolean"
                                        description: "If the DPoP is required for this client\n"
                                    "automaticallyRegistered":
                                        type: "boolean"
                                        description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                    "explicitlyRegistered":
                                        type: "boolean"
                                        description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                    "rsRequestSigned":
                                        type: "boolean"
                                        description: "The flag indicating whether this service signs responses from the resource server.\n"
                                    "rsSignedRequestKeyId":
                                        type: "string"
                                        description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                    "clientRegistrationTypes":
                                        type: "array"
                                        description: "The client registration types that the client has declared it may use.\n"
                                        items:
                                            enum:
                                                - "AUTOMATIC"
                                                - "EXPLICIT"
                                            type: "string"
                                            description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                    "organizationName":
                                        type: "string"
                                        description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                    "signedJwksUri":
                                        type: "string"
                                        description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                    "entityId":
                                        type: "string"
                                        description: "the entity ID of this client.\n"
                                    "trustAnchorId":
                                        type: "string"
                                        description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                    "trustChain":
                                        type: "array"
                                        description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                        items:
                                            type: "string"
                                    "trustChainExpiresAt":
                                        type: "integer"
                                        description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "trustChainUpdatedAt":
                                        type: "integer"
                                        description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                        format: "int64"
                                    "locked":
                                        type: "boolean"
                                        description: "The flag which indicates whether this client is locked.\n"
                                    "credentialOfferEndpoint":
                                        type: "string"
                                        description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                    "fapiModes":
                                        type: "array"
                                        description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                        items:
                                            enum:
                                                - "FAPI1_ADVANCED"
                                                - "FAPI1_BASELINE"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                - "FAPI2_SECURITY"
                                            type: "string"
                                    "responseModes":
                                        type: "array"
                                        description: "The response modes that this client may use."
                                        items:
                                            type: "string"
                                            enum:
                                                - "QUERY"
                                                - "FRAGMENT"
                                                - "FORM_POST"
                                                - "JWT"
                                                - "QUERY_JWT"
                                                - "FRAGMENT_JWT"
                                                - "FORM_POST_JWT"
                                    "credentialResponseEncryptionRequired":
                                        type: "boolean"
                                        description: "True if credential responses to this client must be always encrypted."
                                type: "object"
                                x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "default":
                                    value: {"applicationType": "WEB", "attributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My updated client", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ", "clientType": "CONFIDENTIAL", "createdAt": 1639468356000, "defaultMaxAge": 0, "derivedSectorIdentifier": "my-client.example.com", "developer": "john", "dynamicallyRegistered": false, "frontChannelRequestObjectEncryptionRequired": false, "grantTypes": ["AUTHORIZATION_CODE", "REFRESH_TOKEN"], "idTokenSignAlg": "RS256", "modifiedAt": 1639557082764, "number": 6164, "parRequired": false, "redirectUris": ["https://my-client.example.com/cb1", "https://my-client.example.com/cb2"], "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "responseTypes": ["CODE", "TOKEN"], "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/update/26478243745571 \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"clientName\": \"My updated client\", ... }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\n// Get an existing client.\nlong clientId = ...;\nClient client = api.getClient(clientId);\n\n// Update \"client name\".\nclient.setClientName(\"My updated client\");\n\napi.updateClient(client);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\n# Get an existing client.\nclientId = ...\nclient = api.getClient(clientId)\n\n# Update \"client name\".\nclient.clientName = 'My updated client'\n\napi.updatedClient(client)\n"}]
            x-stoplight: {"id": "amxadrk4hate5"}
    "/api/{serviceId}/client/delete/{clientId}":
        delete:
            tags:
                - "Client Management"
            summary: "Delete Client ⚡"
            description: "Delete a client.\n"
            operationId: "client_delete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "The client ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "204":
                    description: "The client was successfully deleted."
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X DELETE https://us.authlete.com/api/21653835348762/client/delete/26478243745571 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong clientId = ...;\n\napi.deleteClient(clientId);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\n\napi.deleteClient(clientId)\n"}]
            x-stoplight: {"id": "pb1rkhfpmhojz"}
    "/api/{serviceId}/client/lock_flag/update/{clientIdentifier}":
        post:
            tags:
                - "Client Management"
            summary: "Update Client Lock"
            description: "Lock and unlock a client\n"
            operationId: "client_flag_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientIdentifier"
                  in: "path"
                  description: "A client ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
                        examples:
                            "default":
                                value: {"clientLocked": true}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                required:
                                    - "resultCode"
                                    - "resultMessage"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "fo45jcwwv3e6e"}
    "/api/{serviceId}/client/secret/refresh/{clientIdentifier}":
        get:
            tags:
                - "Client Management"
            summary: "Rotate Client Secret"
            description: "Refresh the client secret of a client. A new value of the client secret will be generated by the\nAuthlete server.\n\nIf you want to specify a new value, use `/api/client/secret/update` API.\n"
            operationId: "client_secret_refresh_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientIdentifier"
                  in: "path"
                  description: "The client ID or the client ID alias of a client.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "newClientSecret":
                                        type: "string"
                                        description: "The new client secret.\n"
                                    "oldClientSecret":
                                        type: "string"
                                        description: "The old client secret.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A148001", "resultMessage": "[A148001] Successfully refreshed the client secret of the client (ID = 26478243745571).", "newClientSecret": "6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA", "oldClientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/client/secret/refresh/26478243745571 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nString clientIdentifier = ...;\n\napi.refreshClientSecret(clientIdentifier);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientIdentifier = ...\n\napi.refreshClientSecret(clientIdentifier)\n"}]
            x-stoplight: {"id": "8a0bq5th4zjvv"}
    "/api/{serviceId}/client/secret/update/{clientIdentifier}":
        post:
            tags:
                - "Client Management"
            summary: "Update Client Secret"
            description: "Update the client secret of a client.\n\nIf you want to have the Authlete server generate a new value of the client secret, use `/api/client/secret/refresh`\nAPI.\n"
            operationId: "client_secret_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientIdentifier"
                  in: "path"
                  description: "The client ID or the client ID alias of a client.\n"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "clientSecret":
                                    type: "string"
                                    description: "The new value of the client secret. Valid characters for a client secret are `A-Z`, `a-z`, `0-9`,\n`-`, and `_`. The maximum length of a client secret is 86.\n"
                            required:
                                - "clientSecret"
                        examples:
                            "default":
                                value: {"clientSecret": "my_updated_client_secret"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "newClientSecret":
                                        type: "string"
                                        description: "The new client secret.\n"
                                    "oldClientSecret":
                                        type: "string"
                                        description: "The old client secret.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A149001", "resultMessage": "[A149001] Successfully updated the client secret of the client (ID = 26478243745571).", "newClientSecret": "my_updated_client_secret", "oldClientSecret": "6Rg_WDO23F0HSZe8GzE5_ZxRHD2pCA02M7T87s0MNOmnf8hg9eYScgeH6P_tb42yiaRuptJmMY12jwWuoy2KeA"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/client/secret/update/26478243745571 \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"clientSecret\": \"...\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nString clientIdentifier = ...;\nString clientSecret = \"my_updated_client_secret\";\n\napi.updateClientSecret(clientIdentifier, clientSecret);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientIdentifier = ...\nclientSecret = 'my_new_client_secret'\n\napi.updateClientSecret(clientIdentifier, clientSecret)\n"}]
            x-stoplight: {"id": "65lb40jsqohni"}
    "/api/{serviceId}/client/authorization/get/list":
        get:
            tags:
                - "Client Management"
            summary: "Get Authorized Applications"
            description: "Get a list of client applications that an end-user has authorized.\n\nThe subject parameter is required and can be provided either in the path or as a query parameter.\n"
            operationId: "client_authorization_get_list_api"
            parameters:
                - name: "subject"
                  in: "query"
                  description: "Unique user ID of an end-user.\n"
                  required: true
                  schema:
                    type: "string"
                - name: "developer"
                  in: "query"
                  description: "Unique ID of a client developer.\n"
                  required: false
                  schema:
                    type: "string"
                - name: "start"
                  in: "query"
                  description: "Start index of search results (inclusive). The default value is 0."
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "end"
                  in: "query"
                  description: "End index of search results (exclusive). The default value is 5.\n"
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "start":
                                        type: "integer"
                                        description: "Start index of search results (inclusive).\n"
                                        format: "int32"
                                    "end":
                                        type: "integer"
                                        description: "End index of search results (exclusive).\n"
                                        format: "int32"
                                    "developer":
                                        type: "string"
                                        description: "Unique ID of a client developer.\n"
                                    "subject":
                                        type: "string"
                                        description: "Unique user ID of an end-user.\n"
                                    "totalCount":
                                        type: "integer"
                                        description: "Unique ID of a client developer.\n"
                                        format: "int32"
                                    "clients":
                                        type: "array"
                                        description: "An array of clients.\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "number":
                                                    type: "integer"
                                                    description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                    format: "int32"
                                                    readOnly: true
                                                "clientName":
                                                    type: "string"
                                                    description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                "clientNames":
                                                    type: "array"
                                                    description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "description":
                                                    type: "string"
                                                    description: "The description about the client application."
                                                "descriptions":
                                                    type: "array"
                                                    description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                    items:
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "clientId":
                                                    type: "integer"
                                                    description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                    format: "int64"
                                                    readOnly: true
                                                "clientIdAlias":
                                                    type: "string"
                                                    description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                                "clientIdAliasEnabled":
                                                    type: "boolean"
                                                    description: "Deprecated. Always set to `true`."
                                                "clientType":
                                                    enum:
                                                        - "PUBLIC"
                                                        - "CONFIDENTIAL"
                                                    type: "string"
                                                    description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                            examples:
                                "default":
                                    value: {"clients": [{"clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My client", "clientType": "CONFIDENTIAL", "number": 6164}], "end": 5, "start": 0, "subject": "john", "totalCount": 1}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/client/authorization/get/list/john?start=0\\&end=5 \\\n-u '21653835348762:uE4NgqeIpuSV_XejQ7Ds3jsgA1yXhjR1MXJ1LbPuyls'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nClientAuthorizationGetListRequest req = new ClientAuthorizationGetListRequest();\nreq.setSubject(\"john\");\nreq.setStart(0);\nreq.setEnd(5);\n\napi.getClientAuthorizationList(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = ClientAuthorizationGetListRequest()\nreq.subject = 'john'\nreq.start = 0\nreq.end = 5\n\napi.getClientAuthorizationList(req)\n"}]
            x-stoplight: {"id": "x9khv2m4zv8al"}
    "/api/{serviceId}/client/authorization/update/{clientId}":
        post:
            tags:
                - "Client Management"
            summary: "Update Client Tokens"
            description: "Update attributes of all existing access tokens given to a client application.\n"
            operationId: "client_authorization_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "subject":
                                    type: "string"
                                    description: "The subject (= unique identifier) of the end-user who has granted authorization to the client\napplication.\n"
                                "scopes":
                                    type: "array"
                                    description: "An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all\nexisting access tokens. If an API call is made using `\"Content-Type: application/x-www-form-urlencoded\"`,\nscope names listed in this request parameter should be delimited by spaces (after form encoding,\nspaces are converted to `+`).\n"
                                    items:
                                        type: "string"
                            required:
                                - "subject"
                        examples:
                            "default":
                                value: {"subject": "john", "scopes": ["history.read"]}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A138001", "resultMessage": "[A138001] Updated 1 access token(s) issued to the client (ID = 26478243745571) of the service (API Key = 21653835348762)."}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/authorization/update/26478243745571 \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"subject\": \"john\", \"scopes\": [ \"history.read\" ] }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong clientId = ...;\n\nClientAuthorizationUpdateRequest req = new ClientAuthorizationUpdateRequest();\nreq.setSubject(\"john\");\nreq.setScopes(new String[]{ \"history.read\" });\n\napi.updateClientAuthorization(clientId, req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\n\nreq = ClientAuthorizationUpdateRequest()\nreq.subject = 'john'\nreq.scopes = [ 'history.read' ]\n\napi.updateClientAuthorization(clientId, req)\n"}]
            x-stoplight: {"id": "ppfn95wbiybgo"}
    "/api/{serviceId}/client/authorization/delete/{clientId}":
        delete:
            tags:
                - "Client Management"
            summary: "Delete Client Tokens"
            description: "Delete all existing access tokens issued to a client application by an end-user.\n\nThe subject parameter is required and can be provided either in the path or as a query parameter.\n"
            operationId: "client_authorization_delete_api"
            parameters:
                - name: "subject"
                  in: "query"
                  description: "Unique user ID of an end-user.\n"
                  required: true
                  schema:
                    type: "string"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A137001", "resultMessage": "[A137001] Deleted 3 access token(s) issued to the client (ID = 26478243745571) of the service (API Key = 21653835348762).", "clientLocked": false}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X DELETE https://us.authlete.com/api/21653835348762/client/authorization/delete/26478243745571/john \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong clientId = ...;\nString subject = \"john\";\n\napi.deleteClientAuthorization(clientId, subject);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\nsubject = 'john'\n\napi.deleteClientAuthorization(clientId, subject)\n"}]
            x-stoplight: {"id": "y8ewzmmo4wlo7"}
    "/api/{serviceId}/client/granted_scopes/get/{clientId}":
        get:
            tags:
                - "Client Management"
            summary: "Get Granted Scopes"
            description: "Get the set of scopes that a user has granted to a client application.\n\n<br>\n<details>\n<summary>Description</summary>\n\nPossible values for `requestableScopes` parameter in the response from this API are as follows.\n\n**null**\n\nThe user has not granted authorization to the client application in the past, or records about the\ncombination of the user and the client application have been deleted from Authlete's DB.\n\n**An empty set**\n\nThe user has granted authorization to the client application in the past, but no scopes are associated\nwith the authorization.\n\n**A set with at least one element**\n\nThe user has granted authorization to the client application in the past and some scopes are associated\nwith the authorization. These scopes are returned.\nExample: `[ \"profile\", \"email\" ]`\n\nThe subject parameter is required and can be provided either in the path or as a query parameter.\n</details>\n"
            operationId: "client_granted_scopes_get_api"
            parameters:
                - name: "subject"
                  in: "query"
                  description: "Unique user ID of an end-user.\n"
                  required: true
                  schema:
                    type: "string"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "serviceApiKey":
                                        type: "integer"
                                        description: "A short message which explains the result of the API call."
                                        format: "int64"
                                    "clientId":
                                        type: "integer"
                                        description: "Get the client ID."
                                        format: "int64"
                                    "subject":
                                        type: "string"
                                        description: "Get the subject (= unique identifier) of the user\nwho has granted authorization to the client.\n"
                                    "latestGrantedScopes":
                                        type: "array"
                                        description: "Get the scopes granted to the client application by the last\nauthorization process by the user (who is identified by the\nsubject).\n"
                                        items:
                                            type: "string"
                                    "mergedGrantedScopes":
                                        type: "array"
                                        description: "Get the scopes granted to the client application by all the\npast authorization processes. Note that revoked scopes are\nnot included.\n"
                                        items:
                                            type: "string"
                                    "modifiedAt":
                                        type: "integer"
                                        description: "Get the timestamp in milliseconds since Unix epoch\nat which this record was modified.\n"
                                        format: "int64"
                            examples:
                                "default":
                                    value: {"type": "GrantedScopesGetResponse", "serviceApiKey": 21653835348762, "clientId": 26478243745571, "subject": "john", "latestGrantedScopes": ["history.read"], "mergedGrantedScopes": ["history.read", "timeline.read"]}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/client/granted_scopes/get/26478243745571/john \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong clientId  = 26478243745571;\nString subject = \"john\";\n\napi.getGrantedScopes(clientId, subject);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = 26478243745571\nsubject = 'john'\n\napi.getGrantedScopes(clientId, subject)\n"}]
            x-stoplight: {"id": "ch0k0ndxhc2z3"}
    "/api/{serviceId}/client/granted_scopes/delete/{clientId}":
        delete:
            tags:
                - "Client Management"
            summary: "Delete Granted Scopes"
            description: "Delete the set of scopes that an end-user has granted to a client application.\n\n<br>\n<details>\n<summary>Description</summary>\n\nEven if records about granted scopes are deleted by calling this API, existing access tokens are\nnot deleted and scopes of existing access tokens are not changed.\n</details>\n\nThe subject parameter is required and can be provided either in the path or as a query parameter.\n"
            operationId: "client_granted_scopes_delete_api"
            parameters:
                - name: "subject"
                  in: "query"
                  description: "Unique user ID of an end-user.\n"
                  required: true
                  schema:
                    type: "string"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X DELETE https://us.authlete.com/api/21653835348762/client/granted_scopes/delete/26478243745571/john \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nlong clientId  = ...;\nString subject = \"john\";\n\napi.deleteGrantedScopes(clientId, subject);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientId = ...\nsubject = 'john'\n\napi.deleteGrantedScopes(clientId, subject)\n"}]
            x-stoplight: {"id": "7eboj7nttvgt1"}
    "/api/{serviceId}/auth/authorization":
        post:
            tags:
                - "Authorization Endpoint"
            summary: "Process Authorization Request"
            description: "This API parses request parameters of an authorization request and returns necessary data for the authorization server\nimplementation to process the authorization request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the authorization endpoint of\nthe service. The endpoint implementation must extract the request parameters from the authorization\nrequest from the client application and pass them as the value of parameters request parameter for\nAuthlete's `/auth/authorization` API.\n\nThe value of `parameters` is either (1) the entire query string when the HTTP method of the request\nfrom the client application is `GET` or (2) the entire entity body (which is formatted in\n`application/x-www-form-urlencoded`) when the HTTP method of the request from the client application\nis `POST`.\n\nThe following code snippet is an example in JAX-RS showing how to extract request parameters from\nthe authorization request.\n\n```java\n@GET\npublic Response get(@Context UriInfo uriInfo)\n{\n    // The query parameters of the authorization request.\n    String parameters = uriInfo.getRequestUri().getQuery();\n    ......\n}\n\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic Response post(String parameters)\n{\n    // 'parameters' is the entity body of the authorization request.\n    ......\n}\n```\n\nThe endpoint implementation does not have to parse the request parameters from the client application\nbecause Authlete's `/auth/authorization` API does it.\n\nThe response from `/auth/authorization` API has various parameters. Among them, it is `action`\nparameter that the authorization server implementation should check first because it denotes the\nnext action that the authorization server implementation should take. According to the value of\n`action`, the service implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\". Authlete recommends `application/json` as the content\ntype although OAuth 2.0 specification does not mention the format of the error response when the\nredirect URI is not usable.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application\nsince \"500 Internal Server Error\" is not required by OAuth 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\nis invalid.\n\nA response with HTTP status of \"400 Bad Request\" should be returned to the client application and\nAuthlete recommends `application/json` as the content type although OAuth 2.0 specification does\nnot mention the format of the error response when the redirect URI is not usable.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application since\n\"400 Bad Request\" is not required by OAuth 2.0.\n\n**LOCATION**\n\nWhen the value of `action` is `LOCATION`, it means that the request from the client application\nis invalid but the redirect URI\nto which the error should be reported has been determined.\n\nA response with HTTP status of \"302 Found\" must be returned to the client application with `Location`\nheader which has a redirect URI with error parameter.\n\nThe value of `responseContent` is a redirect URI with `error` parameter, so it can be used as the\nvalue of `Location` header.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 302 Found\nLocation: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORM**\n\nWhen the value of `action` is `FORM`, it means that the request from the client application is\ninvalid but the redirect URI to which the error should be reported has been determined, and that\nthe authorization request contains `response_mode=form_post` as is defined in [OAuth 2.0 Form Post\nResponse Mode](https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html).\n\nThe HTTP status of the response returned to the client application should be \"200 OK\" and the\ncontent type should be `text/html;charset=UTF-8`.\n\nThe value of `responseContent` is an HTML which can be used as the entity body of the response.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**NO_INTERACTION**\n\nWhen the value of `action` is `NO_INTERACTION`, it means that the request from the client application\nhas no problem and requires the service to process the request without displaying any user interface\npages for authentication or consent. This case happens when the authorization request contains\n`prompt=none`.\n\nThe service must follow the steps described below.\n\n[1] END-USER AUTHENTICATION\n\nCheck whether an end-user has already logged in. If an end-user has logged in, go to the next step ([MAX_AGE]).\nOtherwise, call Authlete's `/auth/authorization/fail` API with `reason=NOT_LOGGED_IN` and use the response from\nthe API to generate a response to the client application.\n\n[2] MAX AGE\n\nGet the value of `maxAge` parameter from the `/auth/authorization` API response. The value represents\nthe maximum authentication age which has come from `max_age` request parameter or `defaultMaxAge`\nconfiguration parameter of the client application. If the value is `0`, go to the next step ([SUBJECT]).\nOtherwise, follow the sub steps described below.\n\n(i) Get the time at which the end-user was authenticated. that this value is not managed by Authlete,\nmeaning that it is expected that the service implementation manages the value. If the service implementation\ndoes not manage authentication time of end-users, call Authlete's `/auth/authorization/fail` API\nwith `reason=MAX_AGE_NOT_SUPPORTED` and use the API response to generate a response to the client\napplication.\n\n(ii) Add the value of the maximum authentication age (which is represented in seconds) to the authentication\ntime. The calculated value is the expiration time.\n\n(iii) Check whether the calculated value is equal to or greater than the current time. If this condition\nis satisfied, go to the next step ([SUBJECT]). Otherwise, call Authlete's `/auth/authorization/fail`\nAPI with `reason=EXCEEDS_MAX_AGE` and use the API response to generate a response to the client\napplication.\n\n[3] SUBJECT\n\nGet the value of `subject` from the `/auth/authorization` API response. The value represents an\nend-user who the client application expects to grant authorization. If the value is `null`, go to\nthe next step ([ACRs]). Otherwise, follow the sub steps described below.\n\n(i) Compare the value of the requested subject to the current end-user.\n\n(ii) If they are equal, go to the next step ([ACRs]). If they are not equal, call Authlete's\n`/auth/authorization/fail` API with `reason=DIFFERENT_SUBJECT` and use the response from the API\nto generate a response to the client application.\n\n[4] ACRs\n\nGet the value of `acrs` from the `/auth/authorization` API response. The value represents a list\nof ACRs (Authentication Context Class References) and comes from (1) acr claim in `claims` request\nparameter, (2) `acr_values` request parameter, or (3) `default_acr_values` configuration parameter\nof the client application.\n\nIt is ensured that all the ACRs in acrs are supported by the authorization server implementation.\nIn other words, it is ensured that all the ACRs are listed in `acr_values_supported` configuration\nparameter of the authorization server.\n\nIf the value of ACRs is `null`, go to the next step ([ISSUE]). Otherwise, follow the sub steps\ndescribed below.\n\n(i) Get the ACR performed for the authentication of the current end-user. Note that this value is\nmanaged not by Authlete but by the authorization server implementation. (If the authorization server\nimplementation cannot handle ACRs, it should not have listed ACRs as `acr_values_supported`.)\n\n(ii) Compare the ACR value obtained in the above step to each element in the ACR array (`acrs`)\nin the listed order.\n\n(iii) If the ACR value was found in the array, (= the ACR performed for the authentication of the\ncurrent end-user did not match any one of the ACRs requested by the client application), check\nwhether one of the requested ACRs must be satisfied or not using `acrEssential` parameter in the\n`/auth/authorization` API response. If the value of `acrEssential` parameter is `true`, call Authlete's\n`/auth/authorization/fail` API with `reason=ACR_NOT_SATISFIED` and use the response from the API\nto generate a response to the client application. Otherwise, go to the next step ([SCOPES]).\n\n[5] SCOPES\n\nGet the value of `scopes` from the `/auth/authorization` API response. If the array contains a\nscope which has not been granted to the client application by the end-user in the past, call\nAuthlete's `/auth/authorization/fail` API with `reason=CONSENT_REQUIRED` and use the response from\nthe API to generate a response to the client application. Otherwise, go to the next step ([RESOURCES]).\n\nNote that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`\nAPIs), which is only available in a dedicated/onpremise Authlete server (contact sales@authlete.com\nfor details).\n\n[6] DYNAMIC SCOPES\n\nGet the value of `dynamicScopes` from the `/auth/authorization` API response. If the array contains\na scope which has not been granted to the client application by the end-user in the past, call\nAuthlete's `/auth/authorization/fail` API with `reason=CONSENT_REQUIRED` and use the response from\nthe API to generate a response to the client application. Otherwise, go to the next step ([RESOURCES]).\n\nNote that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`\nAPIs) but dynamic scopes are not remembered as granted scopes.\n\n[7] RESOURCES\n\nGet the value of `resources` from the `/auth/authorization` API response. The array represents\nthe values of the `resource` request parameters. If you want to reject the request, call Authlete's\n`/auth/authorization/fail` API with `reason=INVALID_TARGET` and use the response from the API to\ngenerate a response to the client application. Otherwise, go to the next step ([ISSUE]).\n\nSee \"Resource Indicators for OAuth 2.0\" for details.\n\n[8] ISSUE\n\nIf all the above steps succeeded, the last step is to issue an authorization code, an ID token\nand/or an access token. (There is a special case, though. In the case of `response_type=none`,\nnothing is issued.) It can be performed by calling Authlete's `/auth/authorization/issue` API.\nThe API requires the following parameters. Prepare these parameters and call `/auth/authorization/issue`\nAPI and use the response to generate a response to the client application.\n\n- <u>`ticket` (required)</u><br>\n  This parameter represents a ticket which is exchanged with tokens at `/auth/authorization/issue`.\n  Use the value of `ticket` contained in the `/auth/authorization` API response.\n\n- <u>`subject` (required)</u><br>\n  This parameter represents the unique identifier of the current end-user. It is often called \"user ID\"\n  and it may or may not be visible to the user. In any case, it is a number or a string assigned\n  to an end-user by the authorization server implementation. Authlete does not care about the format\n  of the value of subject, but it must consist of only ASCII letters and its length must not exceed 100.\n\n  When the value of `subject` parameter in the /auth/authorization API response is not `null`,\n  it is necessarily identical to the value of `subject` parameter in the `/auth/authorization/issue`\n  API request.\n\n  The value of this parameter will be embedded in an ID token as the value of `sub` claim. When\n  the value of `subject_type` configuration parameter of the client application is `PAIRWISE`,\n  the value of sub claim is different from the value specified by this parameter, See [8. Subject\n  Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) of OpenID\n  Connect Core 1.0 for details about subject types.\n\n  You can use the `sub` request parameter to adjust the value of the `sub` claim in an ID token.\n  See the description of the `sub` request parameter for details.\n\n- <u>`authTime` (optional)</u><br>\n  This parameter represents the time when the end-user authentication occurred. Its value is the\n  number of seconds from `1970-01-01`. The value of this parameter will be embedded in an ID token\n  as the value of `auth_time` claim.\n\n- <u>`acr` (optional)</u><br>\n  This parameter represents the ACR (Authentication Context Class Reference) which the authentication\n  of the end-user satisfies. When `acrs` in the `/auth/authorization` API response is a non-empty\n  array and the value of `acrEssential` is `true`, the value of this parameter must be one of the\n  array elements. Otherwise, even `null` is allowed. The value of this parameter will be embedded\n  in an ID token as the value of `acr` claim.\n\n- <u>`claims` (optional)</u><br>\n  This parameter represents claims of the end-user. \"Claims\" here are pieces of information about\n  the end-user such as `\"name\"`, `\"email\"` and `\"birthdate\"`. The authorization server implementation\n  is required to gather claims of the end-user, format the claim values into JSON and set the JSON\n  string as the value of this parameter.\n\n  The claims which the authorization server implementation is required to gather are listed in\n  `claims` parameter in the `/auth/authorization` API response.\n\n  For example, if claims parameter lists `\"name\"`, `\"email\"` and `\"birthdate\"`, the value of this\n  parameter should look like the following.\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"email\": \"john@example.com\",\n    \"birthdate\": \"1974-05-06\"\n  }\n  ```\n\n  `claimsLocales` parameter in the `/auth/authorization` API response lists the end-user's preferred\n  languages and scripts, ordered by preference. When `claimsLocales` parameter is a non-empty array,\n  its elements should be taken into account when the authorization server implementation gathers\n  claim values. Especially, note the excerpt below from [5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\n  of OpenID Connect Core 1.0.\n\n  > When the OP determines, either through the `claims_locales` parameter, or by other means, that\n  the End-User and Client are requesting Claims in only one set of languages and scripts, it is\n  RECOMMENDED that OPs return Claims without language tags when they employ this language and script.\n  It is also RECOMMENDED that Clients be written in a manner that they can handle and utilize Claims\n  using language tags.\n\n  If `claims` parameter in the `/auth/authorization` API response is `null` or an empty array,\n  the value of this parameter should be `null`.\n\n  See [5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims)\n  of OpenID Connect core 1.0 for claim names and their value formats. Note (1) that the authorization\n  server implementation support its special claims ([5.1.2. Additional Claims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims))\n  and (2) that claim names may be followed by a language tag ([5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)).\n  Read the specification of [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html)\n  for details.\n\n  The claim values in this parameter will be embedded in an ID token.\n\n  Note that `idTokenClaims` parameter is available in the `/auth/authorization` API response.\n  The parameter has the value of the `\"id_token\"` property in the `claims` request parameter or\n  in the `\"claims\"` property in a request object. The value of this parameter should be considered\n  when you prepare claim values.\n\n- <u>`properties` (optional)</u><br>\n  Extra properties to associate with an access token and/or an authorization code that may be issued\n  by this request. Note that `properties` parameter is accepted only when `Content-Type` of the\n  request is `application/json`, so don't use `application/x-www-form-urlencoded` for details.\n\n- <u>`scopes` (optional)</u><br>\n  Scopes to associate with an access token and/or an authorization code. If this parameter is `null`,\n  the scopes specified in the original authorization request from the client application are used.\n  In other cases, including the case of an empty array, the specified scopes will replace the original\n  scopes contained in the original authorization request.\n\n  Even scopes that are not included in the original authorization request can be specified. However,\n  as an exception, `openid` scope is ignored on the server side if it is not included in the original\n  request. It is because the existence of `openid` scope considerably changes the validation steps\n  and because adding `openid` triggers generation of an ID token (although the client application\n  has not requested it) and the behavior is a major violation against the specification.\n\n  If you add `offline_access` scope although it is not included in the original request, keep in\n  mind that the specification requires explicit consent from the user for the scope ([OpenID Connect\n  Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess)).\n  When `offline_access` is included in the original request, the current implementation of Authlete's\n  `/auth/authorization` API checks whether the request has come along with `prompt` request parameter\n  and the value includes consent. However, note that the implementation of Authlete's `/auth/authorization/issue`\n  API does not perform such checking if `offline_access` scope is added via this `scopes` parameter.\n\n- <u>`sub` (optional)</u><br>\n  The value of the `sub` claim in an ID token. If the value of this request parameter is not empty,\n  it is used as the value of the `sub` claim. Otherwise, the value of the `subject` request parameter\n  is used as the value of the `sub` claim. The main purpose of this parameter is to hide the actual\n  value of the subject from client applications.\n\n  Note that even if this `sub` parameter is not empty, the value of the subject request parameter\n  is used as the value of the subject which is associated with the access token.\n\n**INTERACTION**\n\nWhen the value of `action` is `INTERACTION`, it means that the request from the client application\nhas no problem and requires the service to process the request with user interaction by an HTML form.\nThe purpose of the UI displayed to the end-user is to ask the end-user to grant authorization to\nthe client application. The items described below are some points which the service implementation\nshould take into account when it builds the UI.\n\n[1] DISPLAY MODE\n\nThe response from `/auth/authorization` API has `display` parameter. It is one of `PAGE` (default),\n`POPUP`, `TOUCH` and `WAP` The meanings of the values are described in [3.1.2.1. Authentication\nRequest of OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).\nBasically, the authorization server implementation should display the UI which is suitable for the\ndisplay mode, but it is okay for the authorization server implementation to \"attempt to detect the\ncapabilities of the User Agent and present an appropriate display\".\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service.\n\n[2] UI LOCALE\n\nThe response from `/auth/authorization` API has `uiLocales` parameter. It it is not `null`, it lists\nlanguage tag values (such as `fr-CA`, `ja-JP` and `en`) ordered by preference. The service implementation\nshould display the UI in one of the language listed in the parameter when possible. It is ensured\nthat language tags listed in `uiLocales` are contained in the list of supported UI locales which\nare specified by `supportedUiLocales` configuration parameter of the service.\n\n[3] CLIENT INFORMATION\n\nThe authorization server implementation should show information about the client application to\nthe end-user. The information is embedded in `client` parameter in the response from `/auth/authorization`\nAPI.\n\n[4] SCOPES\n\nA client application requires authorization for specific permissions. In OAuth 2.0 specification,\n\"scope\" is a technical term which represents a permission. `scopes` parameter in the response\nfrom `/auth/authorization` API is a list of scopes requested by the client application. The service\nimplementation should show the end-user the scopes.\n\nThe authorization server implementation may choose not to show scopes to which the end-user has\ngiven consent in the past. To put it the other way around, the authorization server implementation\nmay show only the scopes to which the end-user has not given consent yet. However, if the value\nof `prompts` response parameter contains `CONSENT`, the authorization server implementation has\nto obtain explicit consent from the end-user even if the end-user has given consent to all the\nrequested scopes in the past.\n\nNote that Authlete provides APIs to manage records of granted scopes (`/api/client/granted_scopes/*`\nAPIs), but the APIs work only in the case the Authlete server you use is a dedicated Authlete server\n(contact sales@authlete.com for details). In other words, the APIs of the shared Authlete server\nare disabled intentionally (in order to prevent garbage data from being accumulated) and they\nreturn 403 Forbidden.\n\nIt is ensured that the values in `scopes` parameter are contained in the list of supported scopes\nwhich are specified by `supportedScopes` configuration parameter of the service.\n\n[5] DYNAMIC SCOPES\n\nThe authorization request may include dynamic scopes. The list of recognized dynamic scopes are\naccessible by getDynamicScopes() method. See the description of the [DynamicScope](https://authlete.github.io/authlete-java-common/com/authlete/common/dto/DynamicScope.html)\nclass for details about dynamic scopes.\n\n[6] AUTHORIZATION DETAILS\n\nThe authorization server implementation should show the end-user \"authorization details\" if the\nrequest includes it. The value of `authorization_details` parameter in the response is the content\nof the `authorization_details` request parameter.\n\nSee \"OAuth 2.0 Rich Authorization Requests\" for details.\n\n[7] PURPOSE\n\nThe authorization server implementation must show the value of the `purpose` request parameter if\nit supports [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\nSee [8. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.8)\nin the specification for details.\n\nNote that the value of `purpose` response parameter is the value of the purpose request parameter.\n\n[7] END-USER AUTHENTICATION\n\nNecessarily, the end-user must be authenticated (= must login the service) before granting authorization\nto the client application. Simply put, a login form is expected to be displayed for end-user authentication.\nThe service implementation must follow the steps described below to comply with OpenID Connect.\n(Or just always show a login form if it's too much of a bother.)\n\n(i) Get the value of `prompts` response parameter. It corresponds to the value of the `prompt`\nrequest parameter. Details of the request parameter are described in [3.1.2.1. Authentication\nRequest](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest) of OpenID Connect Core 1.0.\n\n(ii) If the value of `prompts` parameter is `SELECT_ACCOUNT` display a form to let the end-user\nselect on of his/her accounts for login. If `subject` response parameter is not `null`, it is the\nend-user ID that the client application expects, so the value should be used to determine the value\nof the login ID. Note that a subject and a login ID are not necessarily equal. If the value of\n`subject` response parameter is `null`, the value of `loginHint` response parameter should be referred\nto as a hint to determine the value of the login ID. The value of `loginHint` response parameter\nis simply the value of the `login_hint` request parameter.\n\n(iii) If the value of `prompts` response parameter contains `LOGIN`, display a form to urge the\nend-user to login even if the end-user has already logged in. If the value of `subject` response\nparameter is not `null`, it is the end-user ID that the client application expects, so the value\nshould be used to determine the value of the login ID. Note that a subject and a login ID are not\nnecessarily equal. If the value of `subject` response parameter is `null`, the value of `loginHint`\nresponse parameter should be referred to as a hint to determine the value of the login ID. The value\nof `loginHint` response parameter is simply the value of the `login_hint` request parameter.\n\n(iv) If the value of `prompts` response parameter does not contain `LOGIN`, the authorization server\nimplementation does not have to authenticate the end-user if all the conditions described below\nare satisfied. If any one of the conditions is not satisfied, show a login form to authenticate\nthe end-user.\n\n- An end-user has already logged in the service.\n\n- The login ID of the current end-user matches the value of `subject` response parameter.\nThis check is required only when the value of `subject` response parameter is a non-null value.\n\n- The max age, which is the number of seconds contained in `maxAge` response parameter,\nhas not passed since the current end-user logged in your service. This check is required only when\nthe value of `maxAge` response parameter is a non-zero value.\n\n- If the authorization server implementation does not manage authentication time of end-users\n(= if the authorization server implementation cannot know when end-users logged in) and if the\nvalue of `maxAge` response parameter is a non-zero value, a login form should be displayed.\n\n- The ACR (Authentication Context Class Reference) of the authentication performed for\nthe current end-user satisfies one of the ACRs listed in `acrs` response parameter. This check is\nrequired only when the value of `acrs` response parameter is a non-empty array.\n\nIn every case, the end-user authentication must satisfy one of the ACRs listed in `acrs` response\nparameter when the value of `acrs` response parameter is a non-empty array and `acrEssential`\nresponse parameter is `true`.\n\n[9] GRANT/DENY BUTTONS\n\nThe end-user is supposed to choose either (1) to grant authorization to the client application or\n(2) to deny the authorization request. The UI must have UI components to accept the judgment by\nthe user. Usually, a button to grant authorization and a button to deny the request are provided.\n\nWhen the value of `subject` response parameter is not `null`, the end-user authentication must be\nperformed for the subject, meaning that the authorization server implementation should repeatedly\nshow a login form until the subject is successfully authenticated.\n\nThe end-user will choose either (1) to grant authorization to the client application or (2) to\ndeny the authorization request. When the end-user chose to deny the authorization request, call\nAuthlete's `/auth/authorization/fail` API with `reason=DENIED` and use the response from the API\nto generate a response to the client application.\n\nWhen the end-user chose to grant authorization to the client application, the authorization server\nimplementation has to issue an authorization code, an ID token, and/or an access token to the client\napplication. (There is a special case. When `response_type=none`, nothing is issued.) Issuing the\ntokens can be performed by calling Authlete's `/auth/authorization/issue` API. Read [ISSUE] written\nabove in the description for the case of `action=NO_INTERACTION`.\n</details>\n"
            operationId: "auth_authorization_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of\nthe authorization server implementation received from the client application.\n\nThe value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`\nor (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from\nthe client application is `POST`.\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "response_type=code&client_id=26478243745571&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&scope=timeline.read+history.read&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "LOCATION"
                                            - "FORM"
                                            - "NO_INTERACTION"
                                            - "INTERACTION"
                                        description: "The next action that the authorization server implementation should take."
                                    "client":
                                        type: "object"
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "clientName":
                                                type: "string"
                                                description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientNames":
                                                type: "array"
                                                description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "description":
                                                type: "string"
                                                description: "The description about the client application."
                                            "descriptions":
                                                type: "array"
                                                description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientId":
                                                type: "integer"
                                                description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always set to `true`."
                                            "clientType":
                                                enum:
                                                    - "PUBLIC"
                                                    - "CONFIDENTIAL"
                                                type: "string"
                                                description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                            "logoUri":
                                                type: "string"
                                                description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "logoUris":
                                                type: "array"
                                                description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "tosUri":
                                                type: "string"
                                                description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUris":
                                                type: "array"
                                                description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "policyUri":
                                                type: "string"
                                                description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "policyUris":
                                                type: "array"
                                                description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                    "display":
                                        enum:
                                            - "PAGE"
                                            - "POPUP"
                                            - "TOUCH"
                                            - "WAP"
                                        type: "string"
                                        description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                        x-stoplight: {"id": "269jffv4dhxg8"}
                                    "maxAge":
                                        type: "integer"
                                        description: "The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter\nof the client application when the authorization request does not contain `max_age` request parameter.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age\"\nfor `max_age` request parameter, and see \"[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age\"\nfor `defaultMaxAge` configuration parameter.\n"
                                        format: "int32"
                                    "service":
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the service. The value of this property is assigned by Authlete."
                                                format: "int32"
                                                readOnly: true
                                            "serviceName":
                                                type: "string"
                                                description: "The name of this service."
                                            "issuer":
                                                type: "string"
                                                description: "The issuer identifier of the service.\n\nA URL that starts with  https:// and has no query or fragment component.\n\nThe value of this property is used as `iss` claim in an [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)\nand `issuer` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                            "description":
                                                type: "string"
                                                description: "The description about the service."
                                            "apiKey":
                                                type: "integer"
                                                description: "The service ID used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always `true`."
                                            "metadata":
                                                type: "array"
                                                description: "The `metadata` of the service. The content of the returned array depends on contexts.\nThe predefined service metadata is listed in the following table.\n\n  | Key | Description |\n  | --- | --- |\n  | `clientCount` | The number of client applications which belong to this service.  |\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                            "createdAt":
                                                type: "integer"
                                                description: "The time at which this service was created. The value is represented as milliseconds since the\nUNIX epoch (`1970-01-01`).\n"
                                                format: "int64"
                                                readOnly: true
                                            "modifiedAt":
                                                type: "integer"
                                                description: "The time at which this service was last modified. The value is represented as milliseconds since\nthe UNIX epoch (1970-01-01).\n"
                                                format: "int64"
                                                readOnly: true
                                            "authenticationCallbackEndpoint":
                                                type: "string"
                                                description: "A Web API endpoint for user authentication which is to be prepared on the service side.\n\nThe endpoint must be implemented if you do not implement the UI at the authorization endpoint\nbut use the one provided by Authlete.\n\nThe user authentication at the authorization endpoint provided by Authlete is performed by making\na `POST` request to this endpoint.\n"
                                                format: "uri"
                                            "authenticationCallbackApiKey":
                                                type: "string"
                                                description: "API key for basic authentication at the authentication callback endpoint.\n\nIf the value is not empty, Authlete generates Authorization header for Basic authentication when\nmaking a request to the authentication callback endpoint.\n"
                                            "authenticationCallbackApiSecret":
                                                type: "string"
                                                description: "API secret for `basic` authentication at the authentication callback endpoint."
                                            "supportedAcrs":
                                                type: "array"
                                                description: "Values of acrs (authentication context class references) that the service supports.\n\nThe value of this property is used as `acr_values_supported`\nproperty in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                readOnly: true
                                                items:
                                                    type: "string"
                                            "supportedGrantTypes":
                                                type: "array"
                                                description: "Values of `grant_type` request parameter that the service supports.\n\nThe value of this property is used as `grant_types_supported property` in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "AUTHORIZATION_CODE"
                                                        - "IMPLICIT"
                                                        - "PASSWORD"
                                                        - "CLIENT_CREDENTIALS"
                                                        - "REFRESH_TOKEN"
                                                        - "CIBA"
                                                        - "DEVICE_CODE"
                                                        - "TOKEN_EXCHANGE"
                                                        - "JWT_BEARER"
                                                    description: "The grant type of the access token when the access token was created.\n"
                                                    x-stoplight: {"id": "033u82mqvyogn"}
                                            "supportedResponseTypes":
                                                type: "array"
                                                description: "Values of `response_type` request parameter that\nthe service supports. Valid values are listed in Response Type.\n\nThe value of this property is used as `response_types_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "NONE"
                                                        - "CODE"
                                                        - "TOKEN"
                                                        - "ID_TOKEN"
                                                        - "CODE_TOKEN"
                                                        - "CODE_ID_TOKEN"
                                                        - "ID_TOKEN_TOKEN"
                                                        - "CODE_ID_TOKEN_TOKEN"
                                                    x-stoplight: {"id": "t7wed2d7tkpy7"}
                                            "supportedAuthorizationDetailsTypes":
                                                type: "array"
                                                description: "The supported data types that can be used as values of the type field in `authorization_details`.\n\nThis property corresponds to the `authorization_details_types_supported` metadata. See \"OAuth 2.0\nRich Authorization Requests\" (RAR) for details.\n"
                                                items:
                                                    type: "string"
                                            "supportedServiceProfiles":
                                                type: "array"
                                                description: "The profiles that this service supports.\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "FAPI"
                                                        - "OPEN_BANKING"
                                                    x-stoplight: {"id": "snodce1oa3g4u"}
                                            "errorDescriptionOmitted":
                                                type: "boolean"
                                                description: "The flag to indicate whether the `error_description` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include\nthe `error_description` response parameter in error responses.\n\nIf `true`, Authlete does not embed the `error_description` response parameter in error responses.\n"
                                            "errorUriOmitted":
                                                type: "boolean"
                                                description: "The flag to indicate whether the `error_uri` response parameter is omitted.\n\nAccording to [RFC 6749](https://tools.ietf.org/html/rfc6749), an authorization server may include the `error_uri` response parameter in error responses.\n\nIf `true`, Authlete does not embed the\n`error_uri` response parameter in error responses.\n"
                                            "authorizationEndpoint":
                                                type: "string"
                                                description: "The authorization endpoint of the service.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/authorization`.\n\nThe value of this property is used as `authorization_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "directAuthorizationEndpointEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether the direct authorization endpoint is enabled or not.\n\nThe path of the endpoint is `/api/auth/authorization/direct/service-api-key`.\n"
                                            "supportedUiLocales":
                                                type: "array"
                                                description: "UI locales that the service supports.\n\nEach element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646). For example, `en-US` and `ja-JP`.\n\nThe value of this property is used as `ui_locales_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                            "supportedDisplays":
                                                type: "array"
                                                description: "Values of `display` request parameter that service supports.\n\nThe value of this property is used as `display_values_supported` property in the Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "PAGE"
                                                        - "POPUP"
                                                        - "TOUCH"
                                                        - "WAP"
                                                    description: "The display mode which the client application requests by `display` request parameter.\nWhen the authorization request does not have `display` request parameter, `PAGE` is set as the default value.\n\nIt is ensured that the value of `display` is one of the supported display modes which are specified\nby `supportedDisplays` configuration parameter of the service. If the display mode specified by the\nauthorization request is not supported, an error is raised.\n\nValues for this property correspond to the values listed in\n\"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display\".\n"
                                                    x-stoplight: {"id": "269jffv4dhxg8"}
                                            "pkceRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                            "pkceS256Required":
                                                type: "boolean"
                                                description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                            "authorizationResponseDuration":
                                                type: "integer"
                                                description: "The duration of authorization response JWTs in seconds.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n"
                                                format: "int64"
                                            "tokenEndpoint":
                                                type: "string"
                                                description: "The [token endpoint](https://tools.ietf.org/html/rfc6749#section-3.2) of the service.\n\nA URL that starts with `https://` and has not fragment component. For example, `https://example.com/auth/token`.\n\nThe value of this property is used as `token_endpoint` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "directTokenEndpointEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether the direct token endpoint is enabled or not. The path of the endpoint\nis `/api/auth/token/direct/service-api-key`.\n"
                                            "supportedTokenAuthMethods":
                                                type: "array"
                                                description: "Client authentication methods supported by the token endpoint of the service.\n\nThe value of this property is used as `token_endpoint_auth_methods_supports` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "NONE"
                                                        - "CLIENT_SECRET_BASIC"
                                                        - "CLIENT_SECRET_POST"
                                                        - "CLIENT_SECRET_JWT"
                                                        - "PRIVATE_KEY_JWT"
                                                        - "TLS_CLIENT_AUTH"
                                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "missingClientIdAllowed":
                                                type: "boolean"
                                                description: "The flag to indicate token requests from public clients without the `client_id` request parameter are allowed when the client can be guessed from `authorization_code` or `refresh_token`.\n\nThis flag should not be set unless you have special reasons.\n"
                                            "revocationEndpoint":
                                                type: "string"
                                                description: "The [revocation endpoint](https://tools.ietf.org/html/rfc7009) of the service.\n\nA URL that starts with `https://`. For example, `https://example.com/auth/revocation`.\n"
                                                format: "uri"
                                            "directRevocationEndpointEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether the direct revocation endpoint is enabled or not. The URL of the endpoint is `/api/auth/revocation/direct/service-api-key`. "
                                            "supportedRevocationAuthMethods":
                                                type: "array"
                                                description: "Client authentication methods supported at the revocation endpoint.\n"
                                                items:
                                                    enum:
                                                        - "NONE"
                                                        - "CLIENT_SECRET_BASIC"
                                                        - "CLIENT_SECRET_POST"
                                                        - "CLIENT_SECRET_JWT"
                                                        - "PRIVATE_KEY_JWT"
                                                        - "TLS_CLIENT_AUTH"
                                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                    type: "string"
                                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "introspectionEndpoint":
                                                type: "string"
                                                description: "The URI of the introspection endpoint."
                                                format: "uri"
                                            "directIntrospectionEndpointEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path of the endpoint is `/api/auth/userinfo/direct/{serviceApiKey}`. "
                                            "supportedIntrospectionAuthMethods":
                                                type: "array"
                                                description: "Client authentication methods supported at the introspection endpoint.\n"
                                                items:
                                                    enum:
                                                        - "NONE"
                                                        - "CLIENT_SECRET_BASIC"
                                                        - "CLIENT_SECRET_POST"
                                                        - "CLIENT_SECRET_JWT"
                                                        - "PRIVATE_KEY_JWT"
                                                        - "TLS_CLIENT_AUTH"
                                                        - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                    type: "string"
                                                    description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                    x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "pushedAuthReqEndpoint":
                                                type: "string"
                                                description: "The URI of the pushed authorization request endpoint.\n\nThis property corresponds to the `pushed_authorization_request_endpoint` metadata defined in \"[5. Authorization Server Metadata](https://tools.ietf.org/html/draft-lodderstedt-oauth-par#section-5)\" of OAuth 2.0 Pushed Authorization Requests.\n"
                                                format: "uri"
                                            "pushedAuthReqDuration":
                                                type: "integer"
                                                description: "The duration of pushed authorization requests in seconds.\n\n[OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par)\ndefines an endpoint (called \"pushed authorization request endpoint\") which client applications\ncan register authorization requests into and get corresponding URIs (called \"request URIs\") from.\nThe issued URIs represent the registered authorization requests. The client applications can use\nthe URIs as the value of the `request_uri` request parameter in an authorization request.\n\nThe property represents the duration of registered authorization requests and is used as the value\nof the `expires_in` parameter in responses from the pushed authorization request endpoint.\n"
                                                format: "int64"
                                            "parRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this service requires that clients use the pushed authorization\nrequest endpoint.\n\nThis property corresponds to the `require_pushed_authorization_requests` server metadata defined\nin [OAuth 2.0 Pushed Authorization Requests](https://tools.ietf.org/html/draft-lodderstedt-oauth-par).\n"
                                            "requestObjectRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this service requires that authorization requests always utilize\na request object by using either request or `request_uri` request parameter.\n\nIf this flag is set to `true` and the value of `traditionalRequestObjectProcessingApplied` is\n`false`, the value of `require_signed_request_object` server metadata of this service is reported\nas `true` in the discovery document. The metadata is defined in JAR (JWT Secured Authorization Request).\nThat `require_signed_request_object` is `true` means that authorization requests which don't\nconform to the JAR specification are rejected.\n"
                                            "traditionalRequestObjectProcessingApplied":
                                                type: "boolean"
                                                description: "The flag to indicate whether a request object is processed based on rules defined in\n[OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) or JAR (JWT\nSecured Authorization Request).\n\nDifferences between rules in OpenID Connect Core 1.0 and ones in JAR are as follows.\n  - JAR requires that a request object be always -signed.\n  - JAR does not allow request parameters outside a request object to be referred to.\n  - OIDC Core 1.0 requires that response_type request parameter exist outside a request object even if the request object includes the request parameter.\n  - OIDC Core 1.0 requires that scope request parameter exist outside a request object if the authorization request is an\n  - OIDC request even if the request object includes the request parameter.\n\nIf this flag is set to `false` and the value of `requestObjectRequired` is `true`, the value of\n`require_signed_request_object` server metadata of this service\nis reported as `true` in the discovery document. The metadata is defined in JAR (JWT Secured\nAuthorization Request). That `require_signed_request_object` is `true` means that authorization\nrequests which don't conform to the JAR specification are rejected.\n"
                                            "mutualTlsValidatePkiCertChain":
                                                type: "boolean"
                                                description: "The flag to indicate whether this service validates certificate chains during PKI-based client mutual TLS authentication.\n"
                                            "trustedRootCertificates":
                                                type: "array"
                                                description: "The list of root certificates trusted by this service for PKI-based client mutual TLS authentication.\n"
                                                items:
                                                    type: "string"
                                            "mtlsEndpointAliases":
                                                type: "array"
                                                description: "The MTLS endpoint aliases.\n\nThis property corresponds to the mtls_endpoint_aliases metadata defined in \"5. Metadata for Mutual TLS Endpoint Aliases\" of [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens](https://datatracker.ietf.org/doc/rfc8705/).\n\nThe aliases will be embedded in the response from the discovery endpoint like the following.\n\n```json\n{\n  ......,\n  \"mtls_endpoint_aliases\": {\n    \"token_endpoint\":         \"https://mtls.example.com/token\",\n    \"revocation_endpoint\":    \"https://mtls.example.com/revo\",\n    \"introspection_endpoint\": \"https://mtls.example.com/introspect\"\n  }\n}\n```\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "name":
                                                            type: "string"
                                                        "uri":
                                                            type: "string"
                                                            format: "uri"
                                                    x-stoplight: {"id": "nze0lsoxbeeyf"}
                                            "accessTokenType":
                                                type: "string"
                                                description: "The access token type.\n\nThis value is used as the value of `token_type` property in access token responses. If this service\ncomplies with [RFC 6750](https://tools.ietf.org/html/rfc6750), the value of this property should\nbe `Bearer`.\n\nSee [RFC 6749 (OAuth 2.0), 7.1. Access Token Types](https://tools.ietf.org/html/rfc6749#section-7.1) for details.\n"
                                            "tlsClientCertificateBoundAccessTokens":
                                                type: "boolean"
                                                description: "The flag to indicate whether this service supports issuing TLS client certificate bound access tokens.\n"
                                            "accessTokenDuration":
                                                type: "integer"
                                                description: "The duration of access tokens in seconds. This value is used as the value of `expires_in` property\nin access token responses. `expires_in` is defined [RFC 6749, 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1).\n"
                                                format: "int64"
                                            "singleAccessTokenPerSubject":
                                                type: "boolean"
                                                description: "The flag to indicate whether the number of access tokens per subject (and per client) is at most one or can be more.\n\nIf `true`, an attempt to issue a new access token invalidates existing access tokens that are associated with the same subject and the same client.\n\nNote that, however, attempts by [Client Credentials Flow](https://tools.ietf.org/html/rfc6749#section-4.4) do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject. Also note that an attempt by [Refresh Token Flow](https://tools.ietf.org/html/rfc6749#section-6) invalidates the coupled access token only and this invalidation is always performed regardless of whether the value of this setting item is `true` or `false`.\n"
                                            "accessTokenSignAlg":
                                                type: "string"
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "accessTokenSignatureKeyId":
                                                type: "string"
                                                description: "The key ID to identify a JWK used for signing access tokens.\n\nA JWK Set can be registered as a property of a service. A JWK Set can contain 0 or more JWKs.\nAuthlete Server has to pick up one JWK for signing from the JWK Set when it generates a JWT-based\naccess token. Authlete Server searches the registered JWK Set for a JWK which satisfies conditions\nfor access token signature. If the number of JWK candidates which satisfy the conditions is 1,\nthere is no problem. On the other hand, if there exist multiple candidates, a Key ID is needed\nto be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n"
                                            "refreshTokenDuration":
                                                type: "integer"
                                                description: "The duration of refresh tokens in seconds. The related specifications have no requirements on refresh token duration, but Authlete sets expiration for refresh tokens."
                                                format: "int64"
                                            "refreshTokenDurationKept":
                                                type: "boolean"
                                                description: "The flag to indicate whether the remaining duration of the used refresh token is taken over to\nthe newly issued refresh token.\n"
                                            "refreshTokenDurationReset":
                                                type: "boolean"
                                                description: "The flag which indicates whether duration of refresh tokens are reset when they are used even\nif the `refreshTokenKept` property of this service set to is `true` (= even if \"Refresh Token\nContinuous Use\" is \"Kept\").\n\nThis flag has no effect when the `refreshTokenKept` property is set to `false`. In other words,\nif this service issues a new refresh token on every refresh token request, the refresh token\nwill have fresh duration (unless `refreshTokenDurationKept` is set to `true`) and this\n`refreshTokenDurationReset` property is not referenced.\n"
                                            "refreshTokenKept":
                                                type: "boolean"
                                                description: "The flag to indicate whether a refresh token remains unchanged or gets renewed after its use.\n\nIf `true`, a refresh token used to get a new access token remains valid after its use. Otherwise, if `false`, a refresh token is invalidated after its use and a new refresh token is issued.\n\nSee [RFC 6749 6. Refreshing an Access Token](https://tools.ietf.org/html/rfc6749#section-6), as to how to get a new access token using a refresh token.\n"
                                            "supportedScopes":
                                                type: "array"
                                                description: "Scopes supported by the service.\n\nAuthlete strongly recommends that the service register at least the following scopes.\n\n| Name | Description |\n| --- | --- |\n| openid | A permission to get an ID token of an end-user. The `openid` scope appears in [OpenID Connect Core 1.0, 3.1.2.1. Authentication Request, scope](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest). Without this scope, Authlete does not allow `response_type` request parameter to have values other than code and token. |\n| profile | A permission to get information about `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale` and `updated_at` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| email | A permission to get information about `email` and `email_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| address | A permission to get information about address from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) and [5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim) for details. |\n| phone | A permission to get information about `phone_number` and `phone_number_verified` from the user info endpoint. See [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) for details. |\n| offline_access | A permission to get information from the user info endpoint even when the end-user is not present. See [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess) for details. |\n\nThe value of this property is used as `scopes_supported` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "name":
                                                            type: "string"
                                                            description: "The name of the scope."
                                                        "defaultEntry":
                                                            type: "boolean"
                                                            description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                        "description":
                                                            type: "string"
                                                            description: "The description about the scope."
                                                        "descriptions":
                                                            type: "array"
                                                            description: "The descriptions about this scope in multiple languages."
                                                            items:
                                                                type: "object"
                                                                properties:
                                                                    "tag":
                                                                        type: "string"
                                                                        description: "The language tag part."
                                                                    "value":
                                                                        type: "string"
                                                                        description: "The value part."
                                                                x-stoplight: {"id": "ggdx34yir4n2c"}
                                                        "attributes":
                                                            type: "array"
                                                            description: "The attributes of the scope."
                                                            items:
                                                                properties:
                                                                    "key":
                                                                        type: "string"
                                                                        description: "The key part."
                                                                    "value":
                                                                        type: "string"
                                                                        description: "The value part."
                                                                type: "object"
                                                                x-stoplight: {"id": "n57wymw8an6im"}
                                                    x-stoplight: {"id": "2l5ay2evehuem"}
                                            "scopeRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether requests that request no scope are rejected or not.\n\nWhen a request has no explicit `scope` parameter and the service's pre-defined default scope set is empty,\nthe authorization server regards the request requests no scope. When this flag is set to `true`,\nrequests that request no scope are rejected.\n\nThe requirement below excerpted from [RFC 6749 Section 3.3](https://tools.ietf.org/html/rfc6749#section-3.3)\ndoes not explicitly mention the case where the default scope set is empty.\n\n> If the client omits the scope parameter when requesting authorization, the authorization server\nMUST either process the request using a pre-defined default value or fail the request indicating an invalid scope.\n\nHowever, if you interpret *\"the default scope set exists but is empty\"* as *\"the default scope set does not exist\"*\nand want to strictly conform to the requirement above, this flag has to be `true`.\n"
                                            "idTokenDuration":
                                                type: "integer"
                                                description: "'The duration of [ID token](https://openid.net/specs/openid-connect-core-1_0.html#IDToken)s\nin seconds. This value is used to calculate the value of `exp` claim in an ID token.'\n"
                                                format: "int64"
                                            "allowableClockSkew":
                                                type: "integer"
                                                description: "The allowable clock skew between the server and clients in seconds.\n\nThe clock skew is taken into consideration when time-related claims in a JWT (e.g. `exp`, `iat`, `nbf`) are verified.\n"
                                                format: "int32"
                                            "supportedClaimTypes":
                                                type: "array"
                                                description: "Claim types supported by the service. Valid values are listed in Claim Type. Note that Authlete\ncurrently doesn't provide any API to help implementations for `AGGREGATED` and `DISTRIBUTED`.\n\nThe value of this property is used as `claim_types_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "NORMAL"
                                                        - "AGGREGATED"
                                                        - "DISTRIBUTED"
                                                    x-stoplight: {"id": "d2fcz22i8zrtf"}
                                            "supportedClaimLocales":
                                                type: "array"
                                                description: "Claim locales that the service supports. Each element is a language tag defined in [RFC 5646](https://tools.ietf.org/html/rfc5646).\nFor example, `en-US` and `ja-JP`. See [OpenID Connect Core 1.0, 5.2. Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\nfor details.\n\nThe value of this property is used as `claims_locales_supported` property in the\n[OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                items:
                                                    type: "string"
                                            "supportedClaims":
                                                type: "array"
                                                description: "Claim names that the service supports. The standard claim names listed in [OpenID Connect Core 1.0,\n5.1. Standard Claim](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) should\nbe supported. The following is the list of standard claims.\n\n- `sub`\n- `name`\n- `given_name`\n- `family_name`\n- `middle_name`\n- `nickname`\n- `preferred_username`\n- `profile`\n- `picture`\n- `website`\n- `email`\n- `email_verified`\n- `gender`\n- `birthdate`\n- `zoneinfo`\n- `locale`\n- `phone_number`\n- `phone_number_verified`\n- `address`\n- `updated_at`\n\nThe value of this property is used as `claims_supported` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n\nThe service may support its original claim names. See [OpenID Connect Core 1.0, 5.1.2. Additional\nClaims](https://openid.net/specs/openid-connect-core-1_0.html#AdditionalClaims).\n"
                                                items:
                                                    type: "string"
                                            "claimShortcutRestrictive":
                                                type: "boolean"
                                                description: "The flag indicating whether claims specified by shortcut scopes (e.g. `profile`) are included\nin the issued ID token only when no access token is issued.\n\nTo strictly conform to the description below excerpted from [OpenID Connect Core 1.0 Section\n5.4](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims), this flag has to be `true`.\n\n> The Claims requested by the profile, email, address, and phone scope values are returned from\nthe UserInfo Endpoint, as described in Section 5.3.2, when a response_type value is used that\nresults in an Access Token being issued. However, when no Access Token is issued (which is the\ncase for the response_type value id_token), the resulting Claims are returned in the ID Token.\n"
                                            "jwksUri":
                                                type: "string"
                                                description: "The URL of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document. For\nexample, `http://example.com/auth/jwks`.\n\nClient applications accesses this URL (1) to get the public key of the service to validate the\nsignature of an ID token issued by the service and (2) to get the public key of the service to\nencrypt an request object of the client application. See [OpenID Connect Core 1.0, 10. Signatures\nand Encryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n\nThe value of this property is used as `jwks_uri` property in the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "directJwksEndpointEnabled":
                                                type: "boolean"
                                                description: "'The flag to indicate whether the direct jwks endpoint is enabled or not. The path of the endpoint\nis `/api/service/jwks/get/direct/service-api-key`. '\n"
                                            "jwks":
                                                type: "string"
                                                description: "The content of the service's [JSON Web Key Set](https://tools.ietf.org/html/rfc7517) document.\n\nIf this property is not `null` in a `/service/create` request or a `/service/update` request,\nAuthlete hosts the content in the database. This property must not be `null` and must contain\npairs of public/private keys if the service wants to support asymmetric signatures for ID tokens\nand asymmetric encryption for request objects. See [OpenID Connect Core 1.0, 10. Signatures and\nEncryption](https://openid.net/specs/openid-connect-core-1_0.html#SigEnc) for details.\n"
                                            "idTokenSignatureKeyId":
                                                type: "string"
                                                description: "The key ID to identify a JWK used for ID token signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it generates an ID token and signature\nusing an asymmetric key is required. Authlete Server searches the registered JWK Set for a JWK\nwhich satisfies conditions for ID token signature. If the number of JWK candidates which satisfy\nthe conditions is 1, there is no problem. On the other hand, if there exist multiple candidates,\na [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5) is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates.\n\nThis `idTokenSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                            "userInfoSignatureKeyId":
                                                type: "string"
                                                description: "The key ID to identify a JWK used for user info signature using an asymmetric key.\n\nA JWK Set can be registered as a property of a Service. A JWK Set can contain 0 or more JWKs\n(See [RFC 7517](https://tools.ietf.org/html/rfc7517) for details about JWK). Authlete Server has\nto pick up one JWK for signature from the JWK Set when it is required to sign user info (which\nis returned from [userinfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo))\nusing an asymmetric key. Authlete Server searches the registered JWK Set for a JWK which satisfies\nconditions for user info signature. If the number of JWK candidates which satisfy the conditions\nis 1, there is no problem. On the other hand, if there exist multiple candidates, a [Key ID](https://tools.ietf.org/html/rfc7517#section-4.5)\nis needed to be specified so that Authlete Server can pick up one JWK from among the JWK candidates.\n\nThis `userInfoSignatureKeyId` property exists for the purpose described above. For key rotation\n(OpenID Connect Core 1.0, [10.1.1. Rotation of Asymmetric Signing Keys](http://openid.net/specs/openid-connect-core-1_0.html#RotateSigKeys)),\nthis mechanism is needed.\n"
                                            "authorizationSignatureKeyId":
                                                type: "string"
                                                description: "The key ID to identify a JWK used for signing authorization responses using an asymmetric key.\n\n[Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\ndefines new values for the `response_mode` request parameter. They are `query.jwt`, `fragment.jwt`,\n`form_post.jwt` and `jwt`. If one of them is specified as the response mode, response parameters\nfrom the authorization endpoint will be packed into a JWT. This property is used to compute the\nvalue of the `exp` claim of the JWT.\n\nAuthlete Server searches the JWK Set for a JWK which satisfies conditions for authorization response\nsignature. If the number of JWK candidates which satisfy the conditions is 1, there is no problem.\nOn the other hand, if there exist multiple candidates, a Key ID is needed to be specified so that\nAuthlete Server can pick up one JWK from among the JWK candidates. This property exists to specify\nthe key ID.\n"
                                            "userInfoEndpoint":
                                                type: "string"
                                                description: "The [user info endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) of the\nservice. A URL that starts with `https://`. For example, `https://example.com/auth/userinfo`.\n\nThe value of this property is used as `userinfo_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "directUserInfoEndpointEnabled":
                                                type: "boolean"
                                                description: "The flag to indicate whether the direct userinfo endpoint is enabled or not. The path\nof the endpoint is `/api/auth/userinfo/direct/service-api-key`.\n"
                                            "dynamicRegistrationSupported":
                                                type: "boolean"
                                                description: "The boolean flag which indicates whether the [OAuth 2.0 Dynamic Client Registration Protocol](https://tools.ietf.org/html/rfc7591)\nis supported.\n"
                                            "registrationEndpoint":
                                                type: "string"
                                                description: "The [registration endpoint](http://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\nof the service. A URL that starts with `https://`. For example, `https://example.com/auth/registration`.\n\nThe value of this property is used as `registration_endpoint` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "registrationManagementEndpoint":
                                                type: "string"
                                                description: "The URI of the registration management endpoint. If dynamic client registration is supported,\nand this is set, this URI will be used as the basis of the client's management endpoint by appending\n`/clientid}/` to it as a path element. If this is unset, the value of `registrationEndpoint` will\nbe used as the URI base instead.\n"
                                                format: "uri"
                                            "policyUri":
                                                type: "string"
                                                description: "The URL of the \"Policy\" of the service.\n\nThe value of this property is used as `op_policy_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "tosUri":
                                                type: "string"
                                                description: "The URL of the \"Terms Of Service\" of the service.\n\nThe value of this property is used as `op_tos_uri` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "serviceDocumentation":
                                                type: "string"
                                                description: "The URL of a page where documents for developers can be found.\n\nThe value of this property is used as `service_documentation` property in the [OpenID Provider Metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "backchannelAuthenticationEndpoint":
                                                type: "string"
                                                description: "The URI of backchannel authentication endpoint, which is defined in the specification of [CIBA\n(Client Initiated Backchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                                format: "uri"
                                            "supportedBackchannelTokenDeliveryModes":
                                                type: "array"
                                                description: "The supported backchannel token delivery modes. This property corresponds to the `backchannel_token_delivery_modes_supported`\nmetadata.\n\nBackchannel token delivery modes are defined in the specification of [CIBA (Client Initiated\nBackchannel Authentication)](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html).\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "PING"
                                                        - "POLL"
                                                        - "PUSH"
                                                    x-stoplight: {"id": "rnu65zla2rf18"}
                                            "backchannelAuthReqIdDuration":
                                                type: "integer"
                                                description: "The duration of backchannel authentication request IDs issued from the backchannel authentication\nendpoint in seconds. This is used as the value of the `expires_in` property in responses from\nthe backchannel authentication endpoint.\n"
                                                format: "int32"
                                            "backchannelPollingInterval":
                                                type: "integer"
                                                description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds. This is used as the value of the `interval` property in responses from the backchannel\nauthentication endpoint.\n"
                                                format: "int32"
                                            "backchannelUserCodeParameterSupported":
                                                type: "boolean"
                                                description: "The boolean flag which indicates whether the `user_code` request parameter is supported at the\nbackchannel authentication endpoint. This property corresponds to the `backchannel_user_code_parameter_supported`\nmetadata.\n"
                                            "backchannelBindingMessageRequiredInFapi":
                                                type: "boolean"
                                                description: "The flag to indicate whether the `binding_message` request parameter is always required whenever\na backchannel authentication request is judged as a request for Financial-grade API.\n\nThe FAPI-CIBA profile requires that the authorization server _\"shall ensure unique authorization\ncontext exists in the authorization request or require a `binding_message` in the authorization\nrequest\"_ (FAPI-CIBA, 5.2.2, 2). The simplest way to fulfill this requirement is to set this property\nto `true`.\n\nIf this property is set to `false`, the `binding_message` request parameter remains optional\neven in FAPI context, but in exchange, your authorization server must implement a custom mechanism\nthat ensures each backchannel authentication request has unique context.\n"
                                            "deviceAuthorizationEndpoint":
                                                type: "string"
                                                description: "The URI of the device authorization endpoint.\n\nDevice authorization endpoint is defined in the specification of OAuth 2.0 Device Authorization Grant.\n"
                                                format: "uri"
                                            "deviceVerificationUri":
                                                type: "string"
                                                description: "The verification URI for the device flow. This URI is used as the value of the `verification_uri`\nparameter in responses from the device authorization endpoint.\n"
                                                format: "uri"
                                            "deviceVerificationUriComplete":
                                                type: "string"
                                                description: "The verification URI for the device flow with a placeholder for a user code. This URI is used\nto build the value of the `verification_uri_complete` parameter in responses from the device\nauthorization endpoint.\n\nIt is expected that the URI contains a fixed string `USER_CODE` somewhere as a placeholder for\na user code. For example, like the following.\n\n`https://example.com/device?user\\_code=USER\\_CODE`\n\nThe fixed string is replaced with an actual user code when Authlete builds a verification URI\nwith a user code for the `verification_uri_complete` parameter.\n\nIf this URI is not set, the `verification_uri_complete` parameter won't appear in device authorization\nresponses.\n"
                                                format: "uri"
                                            "deviceFlowCodeDuration":
                                                type: "integer"
                                                description: "The duration of device verification codes and end-user verification codes issued from the device\nauthorization endpoint in seconds. This is used as the value of the `expires_in` property in responses\nfrom the device authorization endpoint.\n"
                                                format: "int32"
                                            "deviceFlowPollingInterval":
                                                type: "integer"
                                                description: "The minimum interval between polling requests to the token endpoint from client applications in\nseconds in device flow. This is used as the value of the `interval` property in responses from\nthe device authorization endpoint.\n"
                                                format: "int32"
                                            "userCodeCharset":
                                                type: "string"
                                                enum:
                                                    - "BASE20"
                                                    - "NUMERIC"
                                                description: "The character set for end-user verification codes (`user_code`) for Device Flow.\n"
                                                x-stoplight: {"id": "xcfsjhdfggoez"}
                                            "userCodeLength":
                                                type: "integer"
                                                description: "The length of end-user verification codes (`user_code`) for Device Flow.\n"
                                                format: "int32"
                                            "supportedTrustFrameworks":
                                                type: "array"
                                                description: "Trust frameworks supported by this service. This corresponds to the `trust_frameworks_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                items:
                                                    type: "string"
                                            "supportedEvidence":
                                                type: "array"
                                                description: "Evidence supported by this service. This corresponds to the `evidence_supported` [metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                items:
                                                    type: "string"
                                            "supportedIdentityDocuments":
                                                type: "array"
                                                description: "Identity documents supported by this service. This corresponds to the `id_documents_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                items:
                                                    type: "string"
                                            "supportedVerificationMethods":
                                                type: "array"
                                                description: "Verification methods supported by this service. This corresponds to the `id_documents_verification_methods_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                items:
                                                    type: "string"
                                            "supportedVerifiedClaims":
                                                type: "array"
                                                description: "Verified claims supported by this service. This corresponds to the `claims_in_verified_claims_supported`\n[metadata](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#rfc.section.7).\n"
                                                items:
                                                    type: "string"
                                            "verifiedClaimsValidationSchemaSet":
                                                type: "string"
                                                enum:
                                                    - "standard"
                                                    - "standard+id_document"
                                                description: "OIDC4IDA / verifiedClaimsValidationSchemaSet\n"
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of this service.\n"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                            "nbfOptional":
                                                type: "boolean"
                                                description: "The flag indicating whether the nbf claim in the request object is optional even when the authorization\nrequest is regarded as a FAPI-Part2 request.\n\nThe final version of Financial-grade API was approved in January, 2021. The Part 2 of the final\nversion has new requirements on lifetime of request objects. They require that request objects\ncontain an `nbf` claim and the lifetime computed by `exp` - `nbf` be no longer than 60 minutes.\n\nTherefore, when an authorization request is regarded as a FAPI-Part2 request, the request object\nused in the authorization request must contain an nbf claim. Otherwise, the authorization server\nrejects the authorization request.\n\nWhen this flag is `true`, the `nbf` claim is treated as an optional claim even when the authorization\nrequest is regarded as a FAPI-Part2 request. That is, the authorization server does not perform\nthe validation on lifetime of the request object.\n\nSkipping the validation is a violation of the FAPI specification. The reason why this flag has\nbeen prepared nevertheless is that the new requirements (which do not exist in the Implementer's\nDraft 2 released in October, 2018) have big impacts on deployed implementations of client\napplications and Authlete thinks there should be a mechanism whereby to make the migration\nfrom ID2 to Final smooth without breaking live systems.\n"
                                            "issSuppressed":
                                                type: "boolean"
                                                description: "The flag indicating whether generation of the iss response parameter is suppressed.\n\n\"OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response\" has defined a new\nauthorization response parameter, `iss`, as a countermeasure for a certain type of mix-up attacks.\n\nThe specification requires that the `iss` response parameter always be included in authorization\nresponses unless JARM (JWT Secured Authorization Response Mode) is used.\n\nWhen this flag is `true`, the authorization server does not include the `iss` response parameter\nin authorization responses. By turning this flag on and off, developers of client applications\ncan experiment the mix-up attack and the effect of the `iss` response parameter.\n\nNote that this flag should not be `true` in production environment unless there are special\nreasons for it.\n"
                                            "supportedCustomClientMetadata":
                                                type: "array"
                                                description: "custom client metadata supported by this service.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, stored\ninto Authlete database. On the other hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using this property (`supportedCustomClientMetadata`),\nAuthlete can recognize them and stores their values into the database. The stored custom client\nmetadata values can be referenced by `customMetadata`.\n"
                                                items:
                                                    type: "string"
                                            "tokenExpirationLinked":
                                                type: "boolean"
                                                description: "The flag indicating whether the expiration date of an access token never exceeds that of the\ncorresponding refresh token.\n\nWhen a new access token is issued by a refresh token request (= a token request with `grant_type=refresh_token`),\nthe expiration date of the access token may exceed the expiration date of the corresponding\nrefresh token. This behavior itself is not wrong and may happen when `refreshTokenKept` is\n`true` and/or when `refreshTokenDurationKept` is `true`.\n\nWhen this flag is `true`, the expiration date of an access token never exceeds that of the corresponding\nrefresh token regardless of the calculated duration based on other settings such as `accessTokenDuration`,\n`accessTokenDuration` in `extension` and `access_token.duration` scope attribute.\n\nIt is technically possible to set a value which is bigger than the duration of refresh tokens\nas the duration of access tokens although it is strange. In the case, the duration of an access\ntoken becomes longer than the duration of the refresh token which is issued together with the\naccess token. Even if the duration values are configured so, if this flag is `true`, the expiration\ndate of the access token does not exceed that of the refresh token. That is, the duration of\nthe access token will be shortened, and as a result, the access token and the refresh token\nwill have the same expiration date.\n"
                                            "frontChannelRequestObjectEncryptionRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose. See the description of `requestObjectRequired`\nfor details.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the client is `true`.\n"
                                            "requestObjectEncryptionAlgMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata of the client that has sent the request object.\n\nThe request_object_encryption_alg client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting\nRequest Objects sent to the OP. This parameter SHOULD be included when symmetric encryption\nwill be used, since this signals to the OP that a client_secret value needs to be returned\nfrom which the symmetric key will be derived, that might not otherwise be returned. The RP\nMAY still use other supported encryption algorithms or send unencrypted Request Objects, even\nwhen this parameter is present. If both signing and encryption are requested, the Request Object\nwill be signed then encrypted, with the result being a Nested JWT, as defined in [JWT]. The\ndefault, if omitted, is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe Client's property that represents the client metadata is `requestEncryptionAlg`. See the\ndescription of `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the client is `true`.\n"
                                            "requestObjectEncryptionEncMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE `enc` of encrypted request object must match the `request_object_encryption_enc`\nclient metadata of the client that has sent the request object.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\nObjects sent to the OP. If request_object_encryption_alg is specified, the default for this\nvalue is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\nMUST also be provided.\n\nThe Client's property that represents the client metadata is `requestEncryptionEnc`. See the\ndescription of `requestEncryptionEnc` for details.\n\nEven if this flag is false, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag is `true`.\n"
                                            "hsmEnabled":
                                                type: "boolean"
                                                description: "The flag indicating whether HSM (Hardware Security Module) support is enabled for this service.\n\nWhen this flag is `false`, keys managed in HSMs are not used even if they exist. In addition,\n`/api/hsk/*` APIs reject all requests.\n\nEven if this flag is `true`, HSM-related features do not work if the configuration of the Authlete\nserver you are using does not support HSM.\n"
                                            "hsks":
                                                type: "array"
                                                description: "The information about keys managed on HSMs (Hardware Security Modules).\n\nThis `hsks` property is output only, meaning that `hsks` in requests to `/api/service/create`\nAPI and `/api/service/update` API do not have any effect. The contents of this property is controlled\nonly by `/api/hsk/*` APIs.\n"
                                                items:
                                                    type: "object"
                                                    description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                                    properties:
                                                        "kty":
                                                            type: "string"
                                                            description: "The key type (EC or RSA)\n"
                                                        "use":
                                                            type: "string"
                                                            description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                                        "kid":
                                                            type: "string"
                                                            description: "Key ID for the key on the HSM.\n"
                                                        "hsmName":
                                                            type: "string"
                                                            description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                                        "handle":
                                                            type: "string"
                                                            description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                                        "publicKey":
                                                            type: "string"
                                                            description: "The public key that corresponds to the key on the HSM.\n"
                                                    x-stoplight: {"id": "1trqwclfmbcwp"}
                                            "grantManagementEndpoint":
                                                type: "string"
                                                description: "The URL of the grant management endpoint.\n"
                                            "grantManagementActionRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether every authorization request (and any request serving as an authorization\nrequest such as CIBA backchannel authentication request and device authorization request) must\ninclude the `grant_management_action` request parameter.\n\nThis property corresponds to the `grant_management_action_required` server metadata defined\nin [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n\nNote that setting true to this property will result in blocking all public clients because\nthe specification requires that grant management be usable only by confidential clients for\nsecurity reasons.\n"
                                            "unauthorizedOnClientConfigSupported":
                                                type: "boolean"
                                                description: "The flag indicating whether Authlete's `/api/client/registration` API uses `UNAUTHORIZED` as\na value of the `action` response parameter when appropriate.\n\nThe `UNAUTHORIZED` enum value was initially not defined as a possible value of the `action`\nparameter in an `/api/client/registration` API response. This means that implementations of\nclient `configuration` endpoint were not able to conform to [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)\nstrictly.\n\nFor backward compatibility (to avoid breaking running systems), Authlete's `/api/client/registration`\nAPI does not return the `UNAUTHORIZED` enum value if this flag is not turned on.\n\nThe steps an existing implementation of client configuration endpoint has to do in order to\nconform to the requirement related to \"401 Unauthorized\" are as follows.\n\n1. Update the Authlete library (e.g. authlete-java-common) your system is using.\n2. Update your implementation of client configuration endpoint so that it can handle the\n`UNAUTHORIZED` action.\n3. Turn on this `unauthorizedOnClientConfigSupported` flag.\n"
                                            "dcrScopeUsedAsRequestable":
                                                type: "boolean"
                                                description: "The flag indicating whether the `scope` request parameter in dynamic client registration and\nupdate requests (RFC 7591 and RFC 7592) is used as scopes that the client can request.\n\nLimiting the range of scopes that a client can request is achieved by listing scopes in the\n`client.extension.requestableScopes` property and setting the `client.extension.requestableScopesEnabled`\nproperty to `true`. This feature is called \"requestable scopes\".\n\nThis property affects behaviors of `/api/client/registration` and other family APIs.\n"
                                            "endSessionEndpoint":
                                                type: "string"
                                                description: "The endpoint for clients ending the sessions.\n\nA URL that starts with `https://` and has no fragment component. For example, `https://example.com/auth/endSession`.\n\nThe value of this property is used as `end_session_endpoint` property in the [OpenID Provider\nMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).\n"
                                                format: "uri"
                                            "loopbackRedirectionUriVariable":
                                                type: "boolean"
                                                description: "The flag indicating whether the port number component of redirection URIs can be variable when\nthe host component indicates loopback.\n\nWhen this flag is `true`, if the host component of a redirection URI specified in an authorization\nrequest indicates loopback (to be precise, when the host component is localhost, `127.0.0.1`\nor `::1`), the port number component is ignored when the specified redirection URI is compared\nto pre-registered ones. This behavior is described in [7.3. Loopback Interface Redirection](\nhttps://www.rfc-editor.org/rfc/rfc8252.html#section-7.3) of [RFC 8252 OAuth 2.0](https://www.rfc-editor.org/rfc/rfc8252.html)\nfor Native Apps.\n\n[3.1.2.3. Dynamic Configuration](https://www.rfc-editor.org/rfc/rfc6749.html#section-3.1.2.3)\nof [RFC 6749](https://www.rfc-editor.org/rfc/rfc6749.html) states _\"If the client registration\nincluded the full redirection URI, the authorization server MUST compare the two URIs using\nsimple string comparison as defined in [RFC3986] Section 6.2.1.\"_ Also, the description of\n`redirect_uri` in [3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) states\n_\"This URI MUST exactly match one of the Redirection URI values for the Client pre-registered\nat the OpenID Provider, with the matching performed as described in Section 6.2.1 of [RFC3986]\n(**Simple String Comparison**).\"_ These \"Simple String Comparison\" requirements are preceded\nby this flag. That is, even when the conditions described in RFC 6749 and OpenID Connect Core 1.0\nare satisfied, the port number component of loopback redirection URIs can be variable when this\nflag is `true`.\n\n[8.3. Loopback Redirect Considerations](https://www.rfc-editor.org/rfc/rfc8252.html#section-8.3)\nof [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) states as follows.\n\n> While redirect URIs using localhost (i.e., `\"http://localhost:{port}/{path}\"`) function\nsimilarly to loopback IP redirects described in Section 7.3, the use of localhost is NOT RECOMMENDED.\nSpecifying a redirect URI with the loopback IP literal rather than localhost avoids inadvertently\nlistening on network interfaces other than the loopback interface. It is also less susceptible\nto client-side firewalls and misconfigured host name resolution on the user's device.\n\nHowever, Authlete allows the port number component to be variable in the case of `localhost`,\ntoo. It is left to client applications whether they use `localhost` or a literal loopback IP\naddress (`127.0.0.1` for IPv4 or `::1` for IPv6).\n\nSection 7.3 and Section 8.3 of [RFC 8252](https://www.rfc-editor.org/rfc/rfc8252.html) state\nthat loopback redirection URIs use the `\"http\"` scheme, but Authlete allows the port number\ncomponent to be variable in other cases (e.g. in the case of the `\"https\"` scheme), too.\n"
                                            "requestObjectAudienceChecked":
                                                type: "boolean"
                                                description: "The flag indicating whether Authlete checks whether the `aud` claim of request objects matches\nthe issuer identifier of this service.\n\n[Section 6.1. Passing a Request Object by Value](https://openid.net/specs/openid-connect-core-1_0.html#JWTRequests)\nof [OpenID Connect Core 1.0](https://openid.net/specs/openid-connect-core-1_0.html) has the following\nstatement.\n\n> The `aud` value SHOULD be or include the OP's Issuer Identifier URL.\n\nLikewise, [Section 4. Request Object](https://www.rfc-editor.org/rfc/rfc9101.html#section-4) of\n[RFC 9101](https://www.rfc-editor.org/rfc/rfc9101.html) (The OAuth 2.0 Authorization Framework:\nJWT-Secured Authorization Request (JAR)) has the following statement.\n\n> The value of aud should be the value of the authorization server (AS) issuer, as defined in\n[RFC 8414](https://www.rfc-editor.org/rfc/rfc8414.html).\n\nAs excerpted above, validation on the `aud` claim of request objects is optional. However, if\nthis flag is turned on, Authlete checks whether the `aud` claim of request objects matches the issuer\nidentifier of this service and raises an error if they are different.\n"
                                            "accessTokenForExternalAttachmentEmbedded":
                                                type: "boolean"
                                                description: "The flag indicating whether Authlete generates access tokens for\nexternal attachments and embeds them in ID tokens and userinfo\nresponses.\n"
                                            "authorityHints":
                                                type: "array"
                                                description: "Identifiers of entities that can issue entity statements for this\nservice. This property corresponds to the `authority_hints`\nproperty that appears in a self-signed entity statement that is\ndefined in OpenID Connect Federation 1.0.\n"
                                                items:
                                                    type: "string"
                                            "federationEnabled":
                                                type: "boolean"
                                                description: "flag indicating whether this service supports OpenID Connect Federation 1\n"
                                            "federationJwks":
                                                type: "string"
                                                description: "JWK Set document containing keys that are used to sign (1) self-signed\nentity statement of this service and (2) the response from\n`signed_jwks_uri`.\n"
                                            "federationSignatureKeyId":
                                                type: "string"
                                                description: "A key ID to identify a JWK used to sign the entity configuration and\nthe signed JWK Set.\n"
                                            "federationConfigurationDuration":
                                                type: "integer"
                                                description: "The duration of the entity configuration in seconds.\n"
                                            "federationRegistrationEndpoint":
                                                type: "string"
                                                description: "The URI of the federation registration endpoint. This property corresponds\nto the `federation_registration_endpoint` server metadata that is\ndefined in OpenID Connect Federation 1.0.\n"
                                            "organizationName":
                                                type: "string"
                                                description: "The human-readable name representing the organization that operates\nthis service. This property corresponds to the `organization_name`\nserver metadata that is defined in OpenID Connect Federation 1.0.\n"
                                            "predefinedTransformedClaims":
                                                type: "string"
                                                description: "The transformed claims predefined by this service in JSON format.\nThis property corresponds to the `transformed_claims_predefined`\nserver metadata.\n"
                                            "refreshTokenIdempotent":
                                                type: "boolean"
                                                description: "flag indicating whether refresh token requests with the same\nrefresh token can be made multiple times in quick succession and\nthey can obtain the same renewed refresh token within the short\nperiod.\n"
                                            "signedJwksUri":
                                                type: "string"
                                                description: "The URI of the endpoint that returns this service's JWK Set document in\nthe JWT format. This property corresponds to the `signed_jwks_uri`\nserver metadata defined in OpenID Connect Federation 1.0.\n"
                                            "supportedAttachments":
                                                type: "array"
                                                description: "Supported attachment types. This property corresponds to the {@code\nattachments_supported} server metadata which was added by the third\nimplementer's draft of OpenID Connect for Identity Assurance 1.0.\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "EMBEDDED"
                                                        - "EXTERNAL"
                                                    description: "Supported attachment types. This property corresponds to the `attachments_supported`\n server metadata which was added by the third implementer's draft of OpenID Connect\n for Identity Assurance 1.0.\n"
                                            "supportedDigestAlgorithms":
                                                type: "array"
                                                description: "Supported algorithms used to compute digest values of external\nattachments. This property corresponds to the\n`digest_algorithms_supported` server metadata which was added\nby the third implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                                items:
                                                    type: "string"
                                            "supportedDocuments":
                                                type: "array"
                                                description: "Document types supported by this service. This property corresponds\nto the `documents_supported` server metadata.\n"
                                                items:
                                                    type: "string"
                                            "supportedDocumentsMethods":
                                                type: "array"
                                                description: "validation and verification processes supported by this service.\nThis property corresponds to the `documents_methods_supported`\nserver metadata.\n\nThe third implementer's draft of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\nrenamed the\n`id_documents_verification_methods_supported` server metadata to\n`documents_methods_supported`.\n"
                                                items:
                                                    type: "string"
                                            "supportedDocumentsValidationMethods":
                                                type: "array"
                                                description: "Document validation methods supported by this service. This property\ncorresponds to the `documents_validation_methods_supported` server\nmetadata which was added by the third implementer's draft of <a href=\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                                items:
                                                    type: "string"
                                            "supportedDocumentsVerificationMethods":
                                                type: "array"
                                                description: "Document verification methods supported by this service. This property\ncorresponds to the `documents_verification_methods_supported` server\nmetadata which was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                                items:
                                                    type: "string"
                                            "supportedElectronicRecords":
                                                type: "array"
                                                description: "Electronic record types supported by this service. This property\ncorresponds to the `electronic_records_supported` server metadata\nwhich was added by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html)\n"
                                                items:
                                                    type: "string"
                                            "supportedClientRegistrationTypes":
                                                type: "array"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "AUTOMATIC"
                                                        - "EXPLICIT"
                                                    description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                            "tokenExchangeByIdentifiableClientsOnly":
                                                type: "boolean"
                                                description: "The flag indicating whether to prohibit unidentifiable clients from\nmaking token exchange requests.\n"
                                            "tokenExchangeByConfidentialClientsOnly":
                                                type: "boolean"
                                                description: "The flag indicating whether to prohibit public clients from making\ntoken exchange requests.\n"
                                            "tokenExchangeByPermittedClientsOnly":
                                                type: "boolean"
                                                description: "The flag indicating whether to prohibit clients that have no explicit\npermission from making token exchange requests.\n"
                                            "tokenExchangeEncryptedJwtRejected":
                                                type: "boolean"
                                                description: "The flag indicating whether to reject token exchange requests which\nuse encrypted JWTs as input tokens.\n"
                                            "tokenExchangeUnsignedJwtRejected":
                                                type: "boolean"
                                                description: "The flag indicating whether to reject token exchange requests which\nuse unsigned JWTs as input tokens.\n"
                                            "jwtGrantByIdentifiableClientsOnly":
                                                type: "boolean"
                                                description: "The flag indicating whether to prohibit unidentifiable clients from\nusing the grant type \"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                            "jwtGrantEncryptedJwtRejected":
                                                type: "boolean"
                                                description: "The flag indicating whether to reject token requests that use an\nencrypted JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                            "jwtGrantUnsignedJwtRejected":
                                                type: "boolean"
                                                description: "The flag indicating whether to reject token requests that use an\nunsigned JWT as an authorization grant with the grant type\n\"urn:ietf:params:oauth:grant-type:jwt-bearer\".\n"
                                            "dcrDuplicateSoftwareIdBlocked":
                                                type: "boolean"
                                                description: "The flag indicating whether to block DCR (Dynamic Client Registration)\nrequests whose \"software_id\" has already been used previously.\n"
                                            "trustAnchors":
                                                type: "array"
                                                description: "The trust anchors that are referenced when this service resolves\ntrust chains of relying parties.\n\nIf this property is empty, client registration fails regardless of\nwhether its type is `automatic` or `explicit`. It means\nthat OpenID Connect Federation 1.0 does not work.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "entityId":
                                                            type: "string"
                                                            description: "the entity ID of the trust anchor\n"
                                                        "jwks":
                                                            type: "string"
                                                            description: "the JWK Set document containing public keys of the trust anchor\n"
                                            "openidDroppedOnRefreshWithoutOfflineAccess":
                                                type: "boolean"
                                                description: "The flag indicating whether the openid scope should be dropped from\nscopes list assigned to access token issued when a refresh token grant\nis used.\n"
                                            "supportedDocumentsCheckMethods":
                                                type: "array"
                                                description: "Supported document check methods. This property corresponds to the `documents_check_methods_supported`\nserver metadata which was added by the fourth implementer's draft of OpenID Connect for Identity\nAssurance 1.0.\n"
                                                items:
                                                    type: "string"
                                            "rsResponseSigned":
                                                type: "boolean"
                                                description: "The flag indicating whether this service signs responses from the resource server.\n"
                                            "cnonceDuration":
                                                type: "integer"
                                                description: "The duration of `c_nonce`.\n"
                                                format: "int64"
                                            "dpopNonceRequired":
                                                type: "boolean"
                                                description: "Whether to require DPoP proof JWTs to include the `nonce` claim\nwhenever they are presented.\n"
                                            "verifiableCredentialsEnabled":
                                                type: "boolean"
                                                description: "Get the flag indicating whether the feature of Verifiable Credentials\nfor this service is enabled or not.\n"
                                            "credentialJwksUri":
                                                type: "string"
                                                description: "The URL at which the JWK Set document of the credential issuer is\nexposed.\n"
                                            "credentialOfferDuration":
                                                type: "integer"
                                                description: "The default duration of credential offers in seconds.\n"
                                                format: "int64"
                                            "dpopNonceDuration":
                                                type: "integer"
                                                description: "The duration of nonce values for DPoP proof JWTs in seconds.\n"
                                                format: "int64"
                                            "preAuthorizedGrantAnonymousAccessSupported":
                                                type: "boolean"
                                                description: "The flag indicating whether token requests using the pre-authorized\ncode grant flow by unidentifiable clients are allowed.\n"
                                            "credentialTransactionDuration":
                                                type: "integer"
                                                description: "The duration of transaction ID in seconds that may be issued as a\nresult of a credential request or a batch credential request.\n"
                                                format: "int64"
                                            "introspectionSignatureKeyId":
                                                type: "string"
                                                description: "The key ID of the key for signing introspection responses.\n"
                                            "resourceSignatureKeyId":
                                                type: "string"
                                                description: "The key ID of the key for signing introspection responses.\n"
                                            "userPinLength":
                                                type: "integer"
                                                description: "The default length of user PINs.\n"
                                                format: "int32"
                                            "supportedPromptValues":
                                                type: "array"
                                                description: "The supported `prompt` values.\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "NONE"
                                                        - "LOGIN"
                                                        - "CONSENT"
                                                        - "SELECT_ACCOUNT"
                                                    description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                                    x-stoplight: {"id": "wtedd4f92crd8"}
                                            "idTokenReissuable":
                                                type: "boolean"
                                                description: "The flag indicating whether to enable the feature of ID token\nreissuance in the refresh token flow.\n"
                                            "credentialJwks":
                                                type: "string"
                                                description: "The JWK Set document containing private keys that are used to sign\nverifiable credentials.\n"
                                            "fapiModes":
                                                type: "array"
                                                description: "FAPI modes for this service.\n\nWhen the value of this property is not `null`, Authlete always processes requests to this service based\non the specified FAPI modes if the FAPI feature is enabled in Authlete and the FAPI profile is supported\nby this service.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete always\nprocesses requests to this service based on \"Financial-grade API Security Profile 1.0 - Part 2:\nAdvanced\" if the FAPI feature is enabled in Authlete and the FAPI profile is supported by this service.\n"
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "FAPI1_ADVANCED"
                                                        - "FAPI1_BASELINE"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                        - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                        - "FAPI2_SECURITY"
                                            "credentialDuration":
                                                type: "integer"
                                                description: "The default duration of verifiable credentials in seconds.\n"
                                                format: "int64"
                                            "credentialIssuerMetadata":
                                                type: "object"
                                                properties:
                                                    "credentialIssuer":
                                                        type: "string"
                                                        description: "The identifier of a credential request."
                                                    "authorizationServer":
                                                        type: "string"
                                                        description: "The identifier of the authorization server that the credential issuer\nrelies on for authorization.\n"
                                                    "credentialEndpoint":
                                                        type: "boolean"
                                                        description: "The URL of the credential endpoint of the credential issuer."
                                                    "batchCredentialEndpoint":
                                                        type: "integer"
                                                        description: "The URL of the batch credential endpoint of the credential issuer."
                                                        format: "int64"
                                                    "deferredCredentialEndpoint":
                                                        type: "string"
                                                        description: "The URL of the deferred credential endpoint of the credential issuer."
                                                    "credentialsSupported":
                                                        type: "boolean"
                                                        description: "A JSON array describing supported credentials."
                                                x-stoplight: {"id": "uh8qlt4yoqq4b"}
                                            "idTokenAudType":
                                                type: "string"
                                                description: "The type of the `aud` claim in ID tokens.\n"
                                        type: "object"
                                        x-stoplight: {"id": "906lx1kk8hpxi"}
                                    "scopes":
                                        type: "array"
                                        description: "The scopes that the client application requests. This value comes from `scope` request parameter.\nIf the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.\nIf the authorization request does not have `scope` request parameter and the service has not registered any default scope,\nthe value of this parameter is `null`.\n\nIt is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified\nby `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause\nan error and are just ignored.\n\nOpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.\n\n| Name | Description |\n| --- | --- |\n| `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope\". |\n| `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |\n| `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |\n| `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).<br><br> The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |\n| `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |\n| `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). <blockquote>This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).</blockquote>  |\n\nNote that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even\nwhen scope request parameter contains `offline_access`. This behavior is a requirement written in\n[OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            type: "object"
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "uiLocales":
                                        type: "array"
                                        description: "The locales that the client application presented as candidates to be used for UI.\nThis value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values\ndefined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales\" for details.\n\nIt is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified\nby `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not\ncause an error and are just ignored.\n"
                                        items:
                                            type: "string"
                                    "claimsLocales":
                                        type: "array"
                                        description: "End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.\nThe format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).\nSee \"[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)\" for details.\n\nIt is ensured that locales listed by this parameters are contained in the list of supported claim locales\nwhich are specified by `supportedClaimsLocales` configuration parameter of the service.\nUnsupported claim locales in the authorization request do not cause an error and are just ignored.\n"
                                        items:
                                            type: "string"
                                    "claims":
                                        type: "array"
                                        description: "The list of claims that the client application requests to be embedded in the ID token.\nThe value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)\nwhich are expanded to claims.\n\nSee [OpenID Connect Core 1.0, 5.5. Requesting Claims using the \"claims\" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)\nfor `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\nfor the special scopes.\n"
                                        items:
                                            type: "string"
                                    "acrEssential":
                                        type: "boolean"
                                        description: "This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.\nThis parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of\nthe `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the \"acr\" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "`true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.\n`false` if the value is the original numeric client ID.\n"
                                    "acrs":
                                        type: "array"
                                        description: "The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.\nThis value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values\" for `acr_values`\nrequest parameter, and see \"[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\ndefault_acr_values\" for `defaultAcrs` configuration parameter.\n"
                                        items:
                                            type: "string"
                                    "subject":
                                        type: "string"
                                        description: "The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.\nThe value comes from `sub` claim in `claims` request parameter.\n"
                                    "loginHint":
                                        type: "string"
                                        description: "A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter."
                                    "prompts":
                                        type: "array"
                                        description: "The list of values of prompt request parameter. See \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for prompt request parameter."
                                        items:
                                            enum:
                                                - "NONE"
                                                - "LOGIN"
                                                - "CONSENT"
                                                - "SELECT_ACCOUNT"
                                            type: "string"
                                            description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                            x-stoplight: {"id": "wtedd4f92crd8"}
                                    "lowestPrompt":
                                        enum:
                                            - "NONE"
                                            - "LOGIN"
                                            - "CONSENT"
                                            - "SELECT_ACCOUNT"
                                        type: "string"
                                        description: "The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.\n\nWhen the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.\n\nSee \"[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt\" for `prompt` request parameter.\n"
                                        x-stoplight: {"id": "wtedd4f92crd8"}
                                    "requestObjectPayload":
                                        type: "string"
                                        description: "The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.\n"
                                    "idTokenClaims":
                                        type: "string"
                                        description: "The value of the `id_token` property in the claims request parameter or in the claims property in a request object.\n\nA client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.\nThere are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.\nIn both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the \"claims\"\nRequest Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).\n\nThe following is an excerpt from the specification.\nYou can find `userinfo` and `id_token` are top-level properties.\n\n```json\n{\n  \"userinfo\":\n  {\n    \"given_name\": { \"essential\": true },\n    \"nickname\": null,\n    \"email\": { \"essential\": true },\n    \"email_verified\": { \"essential\": true },\n    \"picture\": null,\n    \"http://example.info/claims/groups\": null\n  },\n  \"id_token\":\n  {\n    \"auth_time\": { \"essential\": true },\n    \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\" ] }\n  }\n}\n```\n\nThis value of this property is the value of the `id_token` property in JSON format.\nFor example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.\n\n```json\n{\n  \"auth_time\": { \"essential\": true },\n  \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\" ] }\n}\n```\n\nNote that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,\nthis property holds the former value.\n"
                                    "userInfoClaims":
                                        type: "string"
                                        description: "The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.\n\nA client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.\nThere are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.\nIn both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the \"claims\"\nRequest Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).\n\nThe following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.\n\n```json\n{\n  \"userinfo\":\n  {\n    \"given_name\": { \"essential\": true },\n    \"nickname\": null,\n    \"email\": { \"essential\": true },\n    \"email_verified\": { \"essential\": true },\n    \"picture\": null,\n    \"http://example.info/claims/groups\": null\n  },\n  \"id_token\":\n  {\n    \"auth_time\": { \"essential\": true },\n    \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\" ] }\n  }\n}\n````\n\nThe value of this property is the value of the `userinfo` property in JSON format.\nFor example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.\n\n```json\n{\n  \"given_name\": { \"essential\": true },\n  \"nickname\": null,\n  \"email\": { \"essential\": true },\n  \"email_verified\": { \"essential\": true },\n  \"picture\": null,\n  \"http://example.info/claims/groups\": null\n}\n```\n\nNote that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,\nthe value of this property holds the former value.\n"
                                    "resources":
                                        type: "array"
                                        description: "The resources specified by the `resource` request parameters or by the `resource` property in the request object.\nIf both are given, the values in the request object should be set. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "purpose":
                                        type: "string"
                                        description: "The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)\nof [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:\n\n> purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.\nIf these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "ticket":
                                        type: "string"
                                        description: "A ticket issued by Authlete to the service implementation. This is needed when the service\nimplementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`\nAPI.\n"
                                    "dynamicScopes":
                                        type: "array"
                                        description: "The dynamic scopes which the client application requested by the scope request parameter.\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The scope name."
                                                "value":
                                                    type: "string"
                                                    description: "The scope value."
                                            x-stoplight: {"id": "5mot14b0ec5an"}
                                    "gmAction":
                                        type: "string"
                                        enum:
                                            - "CREATE"
                                            - "QUERY"
                                            - "REPLACE"
                                            - "REVOKE"
                                            - "MERGE"
                                        description: "The grant management action of the device authorization request.\n\nThe `grant_management_action` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n"
                                    "grantId":
                                        type: "string"
                                        description: "the value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "grant":
                                        type: "object"
                                        properties:
                                            "scopes":
                                                type: "array"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "scope":
                                                            type: "string"
                                                            description: "Space-delimited scopes.\n"
                                                        "resource":
                                                            type: "array"
                                                            description: "List of resource indicators.\n"
                                                            items:
                                                                type: "string"
                                            "claims":
                                                type: "array"
                                                description: "The claims associated with the Grant.\n"
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "elements":
                                                        type: "array"
                                                        description: "Elements of this authorization details.\n"
                                                        items:
                                                            type: "object"
                                                            properties:
                                                                "type":
                                                                    type: "string"
                                                                    description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                                "locations":
                                                                    type: "array"
                                                                    description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "actions":
                                                                    type: "array"
                                                                    description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "dataTypes":
                                                                    type: "array"
                                                                    description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "identifier":
                                                                    type: "string"
                                                                    description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                                "privileges":
                                                                    type: "array"
                                                                    description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "otherFields":
                                                                    type: "string"
                                                                    description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                            required:
                                                                - "type"
                                                            x-stoplight: {"id": "cp8779lbx2pfx"}
                                                type: "object"
                                                description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                                x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "grantSubject":
                                        type: "string"
                                        description: "The subject identifying the user who has given the grant identified\nby the `grant_id` request parameter of the device authorization\nrequest.\n\nAuthlete 2.3 and newer versions support <a href=\n\"https://openid.net/specs/fapi-grant-management.html\">Grant Management\nfor OAuth 2.0</a>. An authorization request may contain a `grant_id`\nrequest parameter which is defined in the specification. If the value of\nthe request parameter is valid, {@link #getGrantSubject()} will return\nthe subject of the user who has given the grant to the client application.\nAuthorization server implementations may use the value returned from\n{@link #getGrantSubject()} in order to determine the user to authenticate.\n\nThe user your system will authenticate during the authorization process\n(or has already authenticated) may be different from the user of the\ngrant. The first implementer's draft of \"Grant Management for OAuth 2.0\"\ndoes not mention anything about the case, so the behavior in the case is\nleft to implementations. Authlete will not perform the grant management\naction when the `subject` passed to Authlete does not match the\nuser of the grant.\n"
                                    "requestedClaimsForTx":
                                        type: "array"
                                        description: "Get names of claims that are requested indirectly by <i>\"transformed\nclaims\"</i>.\n\n<p>\nA client application can request <i>\"transformed claims\"</i> by adding\nnames of transformed claims in the `claims` request parameter.\nThe following is an example of the `claims` request parameter\nthat requests a predefined transformed claim named `18_or_over`\nand a transformed claim named `nationality_usa` to be embedded\nin the response from the userinfo endpoint.\n</p>\n\n```json\n{\n  \"transformed_claims\": {\n    \"nationality_usa\": {\n      \"claim\": \"nationalities\",\n      \"fn\": [\n        [ \"eq\", \"USA\" ],\n        \"any\"\n      ]\n    }\n  },\n  \"userinfo\": {\n    \"::18_or_over\": null,\n    \":nationality_usa\": null\n  }\n}\n```\n\nThe example above assumes that a transformed claim named `18_or_over`\nis predefined by the authorization server like below.\n\n```json\n{\n  \"18_or_over\": {\n    \"claim\": \"birthdate\",\n    \"fn\": [\n      \"years_ago\",\n      [ \"gte\", 18 ]\n    ]\n  }\n}\n```\n\nIn the example, the `nationalities` claim is requested indirectly\nby the `nationality_usa` transformed claim. Likewise, the\n`birthdate` claim is requested indirectly by the `18_or_over`\ntransformed claim.\n\nWhen the `claims` request parameter of an authorization request is\nlike the example above, this `requestedClaimsForTx` property will\nhold the following value.\n\n```json\n[ \"birthdate\", \"nationalities\" ]\n```\n\nIt is expected that the authorization server implementation prepares values\nof the listed claims and passes them as the value of the `claimsForTx`\nrequest parameter when it calls the `/api/auth/userinfo/issue` API. The following\nis an example of the value of the `claimsForTx` request parameter.\n\n```json\n{\n  \"birthdate\": \"1970-01-23\",\n  \"nationalities\": [ \"DEU\", \"USA\" ]\n}\n```\n"
                                        items:
                                            type: "string"
                                    "requestedVerifiedClaimsForTx":
                                        type: "array"
                                        description: "Names of verified claims that will be referenced when transformed claims are computed.\n"
                                        items:
                                            type: "array"
                                            items:
                                                type: "string"
                                    "transformedClaims":
                                        type: "string"
                                        description: "the value of the `transformed_claims` property in the `claims` request\nparameter of an authorization request or in the `claims` property in a\nrequest object.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                    "claimsAtUserInfo":
                                        type: "array"
                                        description: "Get the list of claims that the client application requests to be\nembedded in userinfo responses. The value comes from the `\"scope\"`\nand `\"claims\"` request parameters of the original authorization\nrequest.\n"
                                        items:
                                            type: "string"
                                    "credentialOfferInfo":
                                        type: "object"
                                        properties:
                                            "identifier":
                                                type: "string"
                                                description: "The identifier of the credential offer."
                                            "credentialOffer":
                                                type: "string"
                                                description: "The credential offer in the JSON format."
                                            "credentialIssuer":
                                                type: "string"
                                                description: "The identifier of the credential issuer."
                                            "credentials":
                                                type: "string"
                                                description: "The value of the `credentials` object in the JSON format."
                                            "authorizationCodeGrantIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the `authorization_code` object is\nincluded in the `grants` object.\n"
                                            "issuerStateIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the `issuer_state` property is\nincluded in the `authorization_code` object in the `grants`\nobject.\n"
                                            "issuerState":
                                                type: "string"
                                                description: "The value of the `issuer_state` property in the\n`authorization_code` object in the `grants` object.\n"
                                            "preAuthorizedCodeGrantIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object is\nincluded in the `grants` object.\n"
                                            "preAuthorizedCode":
                                                type: "string"
                                                description: "The value of the `pre-authorized_code` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                            "userPinRequired":
                                                type: "boolean"
                                                description: "The value of the `user_pin_required` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                            "userPin":
                                                type: "string"
                                                description: "The value of the user PIN associated with the credential offer."
                                            "subject":
                                                type: "string"
                                                description: "The subject associated with the credential offer."
                                            "expiresAt":
                                                type: "integer"
                                                description: "The time at which the credential offer will expire."
                                                format: "int64"
                                            "context":
                                                type: "string"
                                                description: "The general-purpose arbitrary string."
                                            "properties":
                                                type: "array"
                                                description: "Extra properties to associate with the credential offer."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                        "hidden":
                                                            type: "boolean"
                                                            description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                                    x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                            "jwtAtClaims":
                                                type: "string"
                                                description: "Additional claims that are added to the payload part of the JWT\naccess token.\n"
                                            "authTime":
                                                type: "integer"
                                                description: "The time at which the user authentication was performed during\nthe course of issuing the credential offer.\n"
                                                format: "int64"
                                            "acr":
                                                type: "string"
                                                description: "The Authentication Context Class Reference of the user authentication\nperformed during the course of issuing the credential offer.\n"
                                        x-stoplight: {"id": "2b3b8gpjt66hn"}
                                    "issuableCredentials":
                                        type: "string"
                                        description: "Get the information about the <b>issuable credentials</b> that can\nbe obtained by presenting the access token that will be issued as a\nresult of the authorization request.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A004001", "resultMessage": "[A004001] Authlete has successfully issued a ticket to the service (API Key = 21653835348762) for the authorization request from the client (ID = 26478243745571). [response_type=code, openid=false]", "acrEssential": false, "action": "INTERACTION", "client": {"clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasEnabled": true, "clientName": "My updated client", "logo_uri": "https://my-client.example.com/logo.png", "number": 6164}, "clientIdAliasUsed": false, "display": "PAGE", "maxAge": 0, "scopes": [{"defaultEntry": false, "description": "A permission to read your history.", "name": "history.read"}, {"defaultEntry": false, "description": "A permission to read your timeline.", "name": "timeline.read"}], "service": {"apiKey": 21653835348762, "clientIdAliasEnabled": true, "number": 5041, "serviceName": "My updated service"}, "ticket": "hXoY87t_t23enrVHWxpXNP5FfVDhDypD3T6H6lt4IPA"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "red", "label": "Core API"}]
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/authorization \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\": \"response_type=code&client_id=26478243745571&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&scope=timeline.read+history.read&code_challenge=E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM&code_challenge_method=S256\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nAuthorizationRequest req = new AuthorizationRequest();\nreq.setParameters(...);\n\napi.authorization(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = AuthorizationRequest()\nreq.parameters = ...\n\napi.authorization(req)\n"}]
            x-stoplight: {"id": "jbz0d4wlhud2y"}
    "/api/{serviceId}/auth/authorization/fail":
        post:
            tags:
                - "Authorization Endpoint"
            summary: "Fail Authorization Request"
            description: "This API generates a content of an error authorization response that the authorization server implementation\nreturns to the client application.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the authorization endpoint of the service\nin order to generate an error response to the client application.\n\nThe description of the `/auth/authorization` API describes the timing when this API should be called.\n\nThe response from `/auth/authorization/fail` API has some parameters.\nAmong them, it is `action` parameter that the authorization server implementation should check first because\nit denotes the next action that the authorization server implementation should take.\nAccording to the value of `action`, the authorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\". Authlete recommends `application/json` as the content type.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application since\n\"500 Internal Server Error\" is not required by OAuth 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted\nor expired) and that the reason of the invalidity was probably due to the end-user's too-delayed\nresponse to the authorization UI.\n\nA response with HTTP status of \"400 Bad Request\" should be returned to the client application and\nAuthlete recommends `application/json` as the content type.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application since\n\"400 Bad Request\" is not required by OAuth 2.0.\n\n**LOCATION**\n\nWhen the value of `action` is `LOCATION`, it means that the response to the client application must\nbe \"302 Found\" with Location header.\n\nThe parameter responseContent contains a redirect URI with (1) an authorization code, an ID token\nand/or an access token (on success) or (2) an error code (on failure), so it can be used as the\nvalue of `Location` header.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 302 Found\nLocation: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORM**\n\nWhen the value of `action` is `FORM`, it means that the response to the client application must be 200 OK\nwith an HTML which triggers redirection by JavaScript.\nThis happens when the authorization request from the client application contained `response_mode=form_post`.\n\nThe value of `responseContent` is an HTML which can be used as the entity body of the response.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "auth_authorization_fail_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket issued from Authlete `/auth/authorization` API.\n"
                                "reason":
                                    type: "string"
                                    enum:
                                        - "UNKNOWN"
                                        - "NOT_LOGGED_IN"
                                        - "MAX_AGE_NOT_SUPPORTED"
                                        - "EXCEEDS_MAX_AGE"
                                        - "DIFFERENT_SUBJECT"
                                        - "ACR_NOT_SATISFIED"
                                        - "DENIED"
                                        - "SERVER_ERROR"
                                        - "NOT_AUTHENTICATED"
                                        - "ACCOUNT_SELECTION_REQUIRED"
                                        - "CONSENT_REQUIRED"
                                        - "INTERACTION_REQUIRED"
                                        - "INVALID_TARGET"
                                    description: "The reason of the failure of the authorization request.\nFor more details, see [NO_INTERACTION] in the description of `/auth/authorization` API.\n"
                                "description":
                                    type: "string"
                                    description: "The custom description about the authorization failure.\n"
                            required:
                                - "ticket"
                                - "reason"
                        examples:
                            "default":
                                value: {"ticket": "qA7wGybwArICpbUSutrf5Xc9-i1fHE0ySOHxR1eBoBQ", "reason": "NOT_AUTHENTICATED"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "LOCATION"
                                            - "FORM"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A004201", "resultMessage": "[A004201] The authorization request from the service does not contain 'parameters' parameter.", "action": "BAD_REQUEST", "responseContent": "{\\\"error_description\\\":\\\"[A004201] The authorization request from the service does not contain 'parameters' parameter.\\\",\\\"error\\\":\\\"invalid_request\\\",\\\"error_uri\\\":\\\"https://docs.authlete.com/#A004201\\\"}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "red", "label": "Core API"}]
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/authorization/fail \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q\", \"reason\": \"NOT_AUTHENTICATED\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nAuthorizationFailRequest req = new AuthorizationFailRequest();\nreq.setTicket(\"c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q\");\nreq.setReason(AuthorizationFailRequest.Reason.NOT_AUTHENTICATED);\n\napi.authorizationFail(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = AuthorizationFailRequest()\nreq.ticket = 'c4iy3TWGn74UMO7ihRl0ZS8OEUzV9axBlBbJbqxH-9Q'\nreq.reason = AuthorizationFailReason.NOT_AUTHENTICATED\n\napi.authorizationFail(req)\n"}]
            x-stoplight: {"id": "t951u8ssrj6nn"}
    "/api/{serviceId}/auth/authorization/issue":
        post:
            tags:
                - "Authorization Endpoint"
            summary: "Issue Authorization Response"
            description: "This API parses request parameters of an authorization request and returns necessary data for the\nauthorization server implementation to process the authorization request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the authorization endpoint of\nthe service in order to generate a successful response to the client application.\n\nThe description of the `/auth/authorization` API describes the timing when this API should be called\nand the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.\n\nThe response from `/auth/authorization/issue` API has some parameters.\nAmong them, it is `action` parameter that the authorization server implementation should check first\nbecause it denotes the next action that the authorization server implementation should take.\nAccording to the value of `action`, the authorization server implementation must take the steps\ndescribed below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application since\n\"500 Internal Server Error\" is not required by OAuth 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of \"action\" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted\nor expired) and that the reason of the invalidity was probably due to the end-user's too-delayed\nresponse to the authorization UI.\n\nThe HTTP status of the response returned to the client application should be \"400 Bad Request\"\nand the content type should be `application/json` although OAuth 2.0 specification does not mention\nthe format of the error response.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application since\n\"400 Bad Request\" is not required by OAuth 2.0.\n\n**LOCATION**\n\nWhen the value of `action` is `LOCATION`, it means that the response to the client application\nshould be \"302 Found\" with `Location` header.\n\nThe value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID\ntoken and/or an access token (on success) or (2) an error code (on failure), so it can be used as\nthe value of `Location` header.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 302 Found\nLocation: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORM**\n\nWhen the value of `action` is `FORM`, it means that the response to the client application should\nbe \"200 OK\" with an HTML which triggers redirection by JavaScript. This happens when the authorization\nrequest from the client contains `response_mode=form_post` request parameter.\n\nThe value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,\nso it can be used as the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "auth_authorization_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket issued from Authlete `/auth/authorization` API.\n"
                                "subject":
                                    type: "string"
                                    description: "The subject (= a user account managed by the service) who has granted authorization to the client application.\n"
                                "authTime":
                                    type: "integer"
                                    description: "The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.\n"
                                    format: "int64"
                                "acr":
                                    type: "string"
                                    description: "The Authentication Context Class Reference performed for the end-user authentication."
                                "claims":
                                    type: "string"
                                    description: "The claims of the end-user (= pieces of information about the end-user) in JSON format.\nSee [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.\n"
                                "properties":
                                    type: "array"
                                    description: "Extra properties to associate with an access token and/or an authorization code."
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "scopes":
                                    type: "array"
                                    description: "Scopes to associate with an access token and/or an authorization code.\nIf a non-empty string array is given, it replaces the scopes specified by the original authorization request.\n"
                                    items:
                                        type: "string"
                                "sub":
                                    type: "string"
                                    description: "The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,\nthe value of the `subject` request parameter is used as the value of the `sub` claim.\n"
                                "idtHeaderParams":
                                    type: "string"
                                    description: "JSON that represents additional JWS header parameters for ID tokens that may be issued based on\nthe authorization request.\n"
                                "claimsForTx":
                                    type: "string"
                                    description: "Claim key-value pairs that are used to compute transformed claims.\n"
                                "consentedClaims":
                                    type: "array"
                                    description: "the claims that the user has consented for the client application\nto know.\n"
                                    items:
                                        type: "string"
                                "authorizationDetails":
                                    properties:
                                        "elements":
                                            type: "array"
                                            description: "Elements of this authorization details.\n"
                                            items:
                                                type: "object"
                                                properties:
                                                    "type":
                                                        type: "string"
                                                        description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                    "locations":
                                                        type: "array"
                                                        description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "actions":
                                                        type: "array"
                                                        description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "dataTypes":
                                                        type: "array"
                                                        description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "identifier":
                                                        type: "string"
                                                        description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                    "privileges":
                                                        type: "array"
                                                        description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "otherFields":
                                                        type: "string"
                                                        description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                required:
                                                    - "type"
                                                x-stoplight: {"id": "cp8779lbx2pfx"}
                                    type: "object"
                                    description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                    x-stoplight: {"id": "1nyzf1nnowolm"}
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT access token.\n"
                                "accessToken":
                                    type: "string"
                                    description: "The representation of an access token that may be issued as a result of the Authlete API call.\n"
                            required:
                                - "ticket"
                                - "subject"
                        examples:
                            "default":
                                value: {"ticket": "FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc", "subject": "john"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "LOCATION"
                                            - "FORM"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "accessToken":
                                        type: "string"
                                        description: "The newly issued access token. Note that an access token is issued from an authorization endpoint only\nwhen `response_type` contains token.\n"
                                    "accessTokenExpiresAt":
                                        type: "integer"
                                        description: "The datetime at which the newly issued access token will expire. The value is represented in milliseconds\nsince the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of the newly issued access token in seconds.\n"
                                        format: "int64"
                                    "idToken":
                                        type: "string"
                                        description: "The newly issued ID token. Note that an ID token is issued from an authorization endpoint only\nwhen `response_type` contains `id_token`.\n"
                                    "authorizationCode":
                                        type: "string"
                                        description: "The newly issued authorization code. Note that an authorization code is issued only\nwhen `response_type` contains code.\n"
                                    "jwtAccessToken":
                                        type: "string"
                                        description: "The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,\nthis property is always set to `null`.\n"
                                    "ticketInfo":
                                        type: "string"
                                        description: "The information about the ticket.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A040001", "resultMessage": "[A040001] The authorization request was processed successfully.", "accessTokenDuration": 0, "accessTokenExpiresAt": 0, "action": "LOCATION", "authorizationCode": "Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo", "responseContent": "https://my-client.example.com/cb1?code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&iss=https%3A%2F%2Fmy-service.example.com"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "red", "label": "Core API"}]
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/authorization/issue \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc\", \"subject\": \"john\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nAuthorizationIssueRequest req = new AuthorizationIssueRequest();\nreq.setTicket(\"FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc\");\nreq.setSubject(\"john\");\n\napi.authorizationIssue(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = AuthorizationIssueRequest()\nreq.ticket = 'FFgB9gwb_WXh6g1u-UQ8ZI-d_k4B-o-cm7RkVzI8Vnc'\nreq.subject = 'john'\n\napi.authorizationIssue(req)\n"}]
            x-stoplight: {"id": "3kzxsk2qa71xm"}
    "/api/{serviceId}/pushed_auth_req":
        post:
            tags:
                - "Pushed Authorization Endpoint"
            summary: "Process Pushed Authorization Request"
            description: "This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.\n"
            operationId: "pushed_auth_req_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "The pushed authorization request body received from the client application.\n\nThe value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from\nthe client application.\n"
                                "clientId":
                                    type: "string"
                                    description: "The client ID extracted from `Authorization` header of the pushed request from the client application.\n"
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret extracted from `Authorization` header of the pushed authorization request from the client application.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "The client certificate from the MTLS connection to pushed authorization endpoint from the client application."
                                "clientCertificatePath":
                                    type: "string"
                                    description: "The certificate path presented by the client during client authentication. These certificates are strings in PEM format.\n"
                                "dpop":
                                    type: "string"
                                    description: "DPoP Header\n"
                                "htm":
                                    type: "string"
                                    description: "HTTP Method (for DPoP validation).\n"
                                "htu":
                                    type: "string"
                                    description: "HTTP URL base (for DPoP validation).\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256", "clientId": "5921531358155430", "clientSecret": "P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
                        examples:
                            "default":
                                value: {"parameters": "response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256", "clientId": "5921531358155430", "clientSecret": "P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA", "clientLocked": false}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "CREATED"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "PAYLOAD_TOO_LARGE"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the authorization server implementation should take. Any other value other than \"CREATED\" should be handled as unsuccessful result."
                                    "requestUri":
                                        type: "string"
                                        description: "The request_uri created to the client to be used as request_uri on the authorize call.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication.\n"
                                    "clientAuthMethod":
                                        type: "string"
                                        enum:
                                            - "NONE"
                                            - "CLIENT_SECRET_BASIC"
                                            - "CLIENT_SECRET_POST"
                                            - "CLIENT_SECRET_JWT"
                                            - "PRIVATE_KEY_JWT"
                                            - "TLS_CLIENT_AUTH"
                                            - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                        description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                    "dpopNonce":
                                        type: "string"
                                        description: "Get the expected nonce value for DPoP proof JWT, which should be used\nas the value of the `DPoP-Nonce` HTTP header.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A245001", "resultMessage": "[A245001] Successfully registered a request object for client (5921531358155430), URI is urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg.", "action": "CREATED", "requestUri": "urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg", "responseContent": "{\"expires_in\":600,\"request_uri\":\"urn:ietf:params:oauth:request_uri:CAK9YEtNorwXE3UwSyihsBOL0jFrqUup7yAACw5y5Zg\"}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/pushed_auth_req \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\": \"response_type=code%20id_token&client_id=5921531358155430&redirect_uri=https%3A%2F%2Fserver.example.com%2Fcb&state=SOME_VALUE_ABLE_TO_PREVENT_CSRF&scope=openid&nonce=SOME_VALUE_ABLE_TO_PREVENT_REPLAY_ATTACK&code_challenge=5ZWDQJiryK3eaLtSeFV8y1XySMCWtyITxICLaTwvK8g&code_challenge_method=S256\", \"clientId\": \"5921531358155430\", \"clientSecret\" : \"P_FouxWlI7zcOep_9vBwR9qMAVJQiCiUiK1HrAP4GziOyezHQpqY0f5dHXK4JT4tnvI51OkbWVoEM9GnOyJViA\"}'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nPushedAuthReqRequest req = new PushedAuthReqRequest();\nreq.setParameters(...);\nreq.setClientId(\"57297408867\");\nreq.setClientSecret(\"J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A\");\n\napi.token(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = PushedAuthReqRequest()\nreq.parameters = ...\nreq.clientId = '57297408867'\nreq.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'\n\napi.token(req)\n"}]
            x-stoplight: {"id": "rxbtwolq7q592"}
    "/api/{serviceId}/auth/token":
        post:
            tags:
                - "Token Endpoint"
            summary: "Process Token Request"
            description: "This API parses request parameters of an authorization request and returns necessary data for the\nauthorization server implementation to process the authorization request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from with the implementation of the token endpoint of the service.\nThe endpoint implementation must extract the request parameters from the token request from the\nclient application and pass them as the value of parameters request parameter to Authlete's `/auth/token` API.\nThe value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)\nof the token request.\n\nIn addition, if the token endpoint of the authorization server implementation supports basic authentication\nas a means of [client authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3),\nthe client credentials must be extracted from `Authorization` header and they must be passed as\n`clientId` request parameter and `clientSecret` request parameter to Authlete's `/auth/token` API.\n\nThe following code snippet is an example in JAX-RS showing how to extract request parameters from\nthe token request and client credentials from Authorization header.\n\n```java\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic Response post(\n        @HeaderParam(HttpHeaders.AUTHORIZATION) String auth,\n        String parameters)\n{\n    // Convert the value of Authorization header (credentials of\n    // the client application), if any, into BasicCredentials.\n    BasicCredentials credentials = BasicCredentials.parse(auth);\n\n    // The credentials of the client application extracted from\n    // 'Authorization' header. These may be null.\n    String clientId     = credentials == null ? null\n                        : credentials.getUserId();\n    String clientSecret = credentials == null ? null\n                        : credentials.getPassword();\n\n    // Process the given parameters.\n    return process(parameters, clientId, clientSecret);\n}\n```\n\nThe response from `/auth/token` API has some parameters. Among them, it is action parameter that\nthe service implementation should check first because it denotes the next action that the authorization\nserver implementation should take. According to the value of action, the authorization server\nimplementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\". Authlete recommends `application/json` as the content\ntype although OAuth 2.0 specification does not mention the format of the error response when the\nredirect URI is not usable.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be\nused as the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application\nsince \"500 Internal Server Error\" is not required by OAuth 2.0.\n\n\n**INVALID_CLIENT**\n\nWhen the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed.\nIn this case, the HTTP status of the response to the client application is either \"400 Bad Request\"\nor \"401 Unauthorized\". This requirement comes from [RFC 6749, 5.2. Error Response](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2).\nThe description about `invalid_client` shown below is an excerpt from RFC 6749.\n\nClient authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code\nto indicate which HTTP authentication schemes are supported. If the client attempted to authenticate\nvia the `Authorization` request header field, the authorization server MUST respond with an HTTP\n401 (Unauthorized) status code and include the `WWW-Authenticate` response header field matching\nthe authentication scheme used by the client.\n\nIn either case, the value of `responseContent` is a JSON string which can be used as the entity\nbody of the response to the client application.\n\nThe following illustrate responses which the service implementation must generate and return to\nthe client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n<br>\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {challenge}\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\nis invalid.\n\nA response with HTTP status of \"400 Bad Request\" must be returned to the client application and\nthe content type must be `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n**PASSWORD**\n\nWhen the value of `\"action\"` is `\"PASSWORD\"`, it means that\nthe request from the client application is valid and `grant_type`\nis `\"password\"`. That is, the flow is\n<a href=\"https://www.rfc-editor.org/rfc/rfc6749.html#section-4.3\">\"Resource Owner\nPassword Credentials\"</a>.\n\nIn this case, {@link #getUsername()} returns the value of `\"username\"`\nrequest parameter and {@link #getPassword()} returns the value of {@code\n\"password\"} request parameter which were contained in the token request\nfrom the client application. The service implementation must validate the\ncredentials of the resource owner (= end-user) and take either of the\nactions below according to the validation result.\n\n1. When the credentials are valid, call Authlete's /auth/token/issue} API to generate an access token for the client\n    application. The API requires `\"ticket\"` request parameter and\n    `\"subject\"` request parameter.\n    Use the value returned from {@link #getTicket()} method as the value\n    for `\"ticket\"` parameter.\n2. The response from `/auth/token/issue` API ({@link\n    TokenIssueResponse}) contains data (an access token and others)\n    which should be returned to the client application. Use the data\n    to generate a response to the client application.\n3. When the credentials are invalid</b>, call Authlete's {@code\n    /auth/token/fail} API with `reason=`{@link\n    TokenFailRequest.Reason#INVALID_RESOURCE_OWNER_CREDENTIALS\n    INVALID_RESOURCE_OWNER_CREDENTIALS} to generate an error response\n    for the client application. The API requires `\"ticket\"`\n    request parameter. Use the value returned from {@link #getTicket()}\n    method as the value for `\"ticket\"` parameter.\n4. The response from `/auth/token/fail` API ({@link\n    TokenFailResponse}) contains error information which should be\n    returned to the client application. Use it to generate a response\n    to the client application.\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the request from the client application is valid\nand an access token, and optionally an ID token, is ready to be issued.\n\nThe HTTP status of the response returned to the client application must be \"200 OK\" and the content\ntype must be `application/json`.\n\nThe value of `responseContent` is a JSON string which contains an access token (and optionally\nan ID token), so it can be used as the entity body of the response.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n\n**TOKEN_EXCHANGE (Authlete 2.3 onwards)**\n\nWhen the value of `\"action\"` is `\"TOKEN_EXCHANGE\"`, it means\nthat the request from the client application is a valid token exchange\nrequest (cf. <a href=\"https://www.rfc-editor.org/rfc/rfc8693.html\">RFC\n8693 OAuth 2.0 Token Exchange</a>) and that the request has already passed\nthe following validation steps.\n\n\n1. Confirm that the value of the `requested_token_type` request parameter\nis one of the registered token type identifiers if the request parameter is\ngiven and its value is not empty.\n2. Confirm that the `subject_token` request parameter is given and its\nvalue is not empty.\n3. Confirm that the `subject_token_type` request parameter is given and\nits value is one of the registered token type identifiers.\n4. Confirm that the `actor_token_type` request parameter is given and\nits value is one of the registered token type identifiers if the\n`actor_token` request parameter is given and its value is not empty.\n5. Confirm that the `actor_token_type` request parameter is not given\nor its value is empty when the `actor_token` request parameter is\nnot given or its value is empty.\n\n\nFurthermore, Authlete performs additional validation on the tokens specified\nby the `subject_token` request parameter and the `actor_token`\nrequest parameter according to their respective token types as shown below.\n\n**Token Validation Steps**\n\n*Token Type: `urn:ietf:params:oauth:token-type:jwt`*\n\n1. Confirm that the format conforms to the JWT specification [RFC 7519][https://www.rfc-editor.org/rfc/rfc7519.html].\n2. Check if the JWT is encrypted and if it is encrypted, then (a) reject\n        the token exchange request when the {@link\n        Service#isTokenExchangeEncryptedJwtRejected()\n        tokenExchangeEncryptedJwtRejected} flag of the service is `true`\n        or (b) skip remaining validation steps when the flag is `false`.\n        Note that Authlete does not verify an encrypted JWT because there is\n        no standard way to obtain the key to decrypt the JWT with. This means\n        that you must verify an encrypted JWT by yourself when one is used as\n        an input token with the token type\n        { @code \"urn:ietf:params:oauth:token-type:jwt\" }.\n3. Confirm that the current time has not reached the time indicated by\n        the `exp` claim if the JWT contains the claim.\n4. Confirm that the current time is equal to or after the time indicated\n        by the `iat` claim if the JWT contains the claim.\n5.Confirm that the current time is equal to or after the time indicated\n        by the `nbf` claim if the JWT contains the claim.\n6. Check if the JWT is signed and if it is not signed, then (a) reject\n        the token exchange request when the {@link\n        Service#isTokenExchangeUnsignedJwtRejected()\n        tokenExchangeUnsignedJwtRejected} flag of the service is `true`\n        or (b) finish validation on the input token. Note that Authlete does\n        not verify the signature of the JWT because there is no standard way\n        to obtain the key to verify the signature of a JWT with. This means\n        that you must verify the signature by yourself when a signed JWT is\n        used as an input token with the token type\n        `\"urn:ietf:params:oauth:token-type:jwt\"`.\n\n*Token Type: `urn:ietf:params:oauth:token-type:access_token`*\n\n1. Confirm that the token is an access token that has been issued by\n        the Authlete server of your service. This implies that access\n        tokens issued by other systems cannot be used as a subject token\n        or an actor token with the token type\n        <code>urn:ietf:params:oauth:token-type:access_token</code>.\n2. Confirm that the access token has not expired.\n3. Confirm that the access token belongs to the service.\n\n*Token Type: `urn:ietf:params:oauth:token-type:refresh_token`*\n\n1. Confirm that the token is a refresh token that has been issued by\n        the Authlete server of your service. This implies that refresh\n        tokens issued by other systems cannot be used as a subject token\n        or an actor token with the token type\n        <code>urn:ietf:params:oauth:token-type:refresh_token</code>.\n2. Confirm that the refresh token has not expired.\n3. Confirm that the refresh token belongs to the service.\n\n*Token Type: `urn:ietf:params:oauth:token-type:id_token`*\n\n1. Confirm that the format conforms to the JWT specification (<a href=\n        \"https://www.rfc-editor.org/rfc/rfc7519.html\">RFC 7519</a>).\n2. Check if the ID Token is encrypted and if it is encrypted, then (a)\n        reject the token exchange request when the {@link\n        Service#isTokenExchangeEncryptedJwtRejected()\n        tokenExchangeEncryptedJwtRejected} flag of the service is `true`\n        or (b) skip remaining validation steps when the flag is `false`.\n        Note that Authlete does not verify an encrypted ID Token because\n        there is no standard way to obtain the key to decrypt the ID Token\n        with in the context of token exchange where the client ID for the\n        encrypted ID Token cannot be determined. This means that you must\n        verify an encrypted ID Token by yourself when one is used as an\n        input token with the token type\n        `\"urn:ietf:params:oauth:token-type:id_token\"`.\n3. Confirm that the ID Token contains the `exp` claim and the\n        current time has not reached the time indicated by the claim.\n4. Confirm that the ID Token contains the `iat` claim and the\n        current time is equal to or after the time indicated by the claim.\n5. Confirm that the current time is equal to or after the time indicated\n        by the `nbf` claim if the ID Token contains the claim.\n6. Confirm that the ID Token contains the `iss` claim and the\n        value is a valid URI. In addition, confirm that the URI has the\n        `https` scheme, no query component and no fragment component.\n7. Confirm that the ID Token contains the `aud` claim and its\n        value is a JSON string or an array of JSON strings.\n8. Confirm that the value of the `nonce` claim is a JSON string\n        if the ID Token contains the claim.\n9. Check if the ID Token is signed and if it is not signed, then (a)\n        reject the token exchange request when the {@link\n        Service#isTokenExchangeUnsignedJwtRejected()\n        tokenExchangeUnsignedJwtRejected} flag of the service is `true`\n        or (b) finish validation on the input token.\n10. Confirm that the signature algorithm is asymmetric. This implies that\n        ID Tokens whose signature algorithm is symmetric (`HS256`,\n        `HS384` or `HS512`) cannot be used as a subject token or\n        an actor token with the token type\n        `urn:ietf:params:oauth:token-type:id_token`.\n11. Verify the signature of the ID Token. Signature verification is\n        performed even in the case where the issuer of the ID Token is not\n        your service. But in that case, the issuer must support the discovery\n        endpoint defined in <a href=\n        \"https://openid.net/specs/openid-connect-discovery-1_0.html\">OpenID\n        Connect Discovery 1.0</a>. Otherwise, signature verification fails.\n\n*Token Type: `urn:ietf:params:oauth:token-type:saml1`*\n\n(Authlete does not perform any validation for this token type.)\n\n*Token Type: `urn:ietf:params:oauth:token-type:saml2`*\n\n(Authlete does not perform any validation for this token type.)\n\nThe specification of Token Exchange (<a href=\n\"https://www.rfc-editor.org/rfc/rfc8693.html\">RFC 8693</a>) is very\nflexible. In other words, the specification has abandoned the task of\ndetermining details. Therefore, for secure token exchange, you have\nto complement the specification with your own rules. For that purpose,\nAuthlete provides some configuration options as listed below.\nAuthorization server implementers may utilize them and/or implement\ntheir own rules.\n\n\nIn the case of {@link Action#TOKEN_EXCHANGE TOKEN_EXCHANGE}, the {@link\n#getResponseContent()} method returns `null`. You have to construct\nthe token response by yourself.\n\nFor example, you may generate an access token by calling Authlete's\n`/api/auth/token/create` API and construct a token response like\nbelow.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {challenge}\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-cache, no-store\n{\n    \"access_token\": \"{@link TokenCreateResponse#getAccessToken()}\",\n    \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": { @link TokenCreateResponse#getExpiresIn() },\n    \"scope\": \"String.join(\" \", {@link TokenCreateResponse#getScopes()})\"\n}\n```\n\n\n**JWT_BEARER JWT_BEARER (Authlete 2.3 onwards)**\n\nWhen the value of `\"action\"` is `\"JWT_BEARER\"`, it means that\nthe request from the client application is a valid token request with the\ngrant type `\"urn:ietf:params:oauth:grant-type:jwt-bearer\"` (<a href=\n\"https://www.rfc-editor.org/rfc/rfc7523.html\">RFC 7523 JSON Web Token (JWT)\nProfile for OAuth 2.0 Client Authentication and Authorization Grants</a>)\nand that the request has already passed the following validation steps.\n\n1. Confirm that the `assertion` request parameter is given and its value\n  is not empty.\n2. Confirm that the format of the assertion conforms to the JWT specification\n  (<a href=\"https://www.rfc-editor.org/rfc/rfc7519.html\">RFC 7519</a>).\n\n3. Check if the JWT is encrypted and if it is encrypted, then (a) reject the\n  token request when the {@link Service#isJwtGrantEncryptedJwtRejected()\n  jwtGrantEncryptedJwtRejected} flag of the service is `true` or (b)\n  skip remaining validation steps when the flag is `false`. Note that\n  Authlete does not verify an encrypted JWT because there is no standard way\n  to obtain the key to decrypt the JWT with. This means that you must verify\n  an encrypted JWT by yourself.\n4. Confirm that the JWT contains the `iss` claim and its value is a\n  JSON string.\n5. Confirm that the JWT contains the `sub` claim and its value is a\n  JSON string.\n6. Confirm that the JWT contains the `aud` claim and its value is\n  either a JSON string or an array of JSON strings.\n7. Confirm that the issuer identifier of the service (cf. {@link Service#getIssuer()})\n  or the URL of the token endpoint (cf. {@link Service#getTokenEndpoint()})\n  is listed as audience in the `aud` claim.\n8. Confirm that the JWT contains the `exp` claim and the current time\n  has not reached the time indicated by the claim.\n9. Confirm that the current time is equal to or after the time indicated by\n  by the `iat` claim if the JWT contains the claim.\n10. Confirm that the current time is equal to or after the time indicated by\n  by the `nbf` claim if the JWT contains the claim.\n11. Check if the JWT is signed and if it is not signed, then (a) reject the\n  token request when the {@link Service#isJwtGrantUnsignedJwtRejected()\n  jwtGrantUnsignedJwtRejected} flag of the service is `true` or (b)\n  finish validation on the JWT. Note that Authlete does not verify the\n  signature of the JWT because there is no standard way to obtain the key\n  to verify the signature of a JWT with. This means that you must verify\n  the signature by yourself.\n\nAuthlete provides some configuration options for the grant type as listed\nbelow. Authorization server implementers may utilize them and/or implement\ntheir own rules.\n\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-cache, no-store\n{\n      \"access_token\": \"{@link TokenCreateResponse#getAccessToken()}\",\n      \"token_type\":   \"Bearer\",\n      \"expires_in\":   {@link TokenCreateResponse#getExpiresIn()},\n      \"scope\":        \"String.join(\" \", {@link TokenCreateResponse#getScopes()})\"\n                          }\n```\n\n  Finally, note again that Authlete does not verify the signature of the JWT\n  specified by the `assertion` request parameter. You must verify the\n  signature by yourself.\n\n</details>\n"
            operationId: "auth_token_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server\nimplementation received from the client application.\n\nThe value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from\nthe client application.\n"
                                "clientId":
                                    type: "string"
                                    description: "The client ID extracted from `Authorization` header of the token request from the client application.\n\nIf the token endpoint of the authorization server implementation supports basic authentication as\na means of client authentication, and the request from the client application contained its client ID\nin `Authorization` header, the value should be extracted and set to this parameter.\n"
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret extracted from `Authorization` header of the token request from the client application.\n\nIf the token endpoint of the authorization server implementation supports basic authentication as a means of\nclient authentication, and the request from the client application contained its client secret in `Authorization` header,\nthe value should be extracted and set to this parameter.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "The client certificate from the MTLS of the token request from the client application."
                                "clientCertificatePath":
                                    type: "string"
                                    description: "The certificate path presented by the client during client authentication. These certificates are strings in PEM format.\n"
                                "properties":
                                    type: "string"
                                    description: "Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)\nfor details.\n"
                                "dpop":
                                    type: "string"
                                    description: "`DPoP` header presented by the client during the request to the token endpoint.\n\nThe header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "htm":
                                    type: "string"
                                    description: "HTTP method of the token request. This field is used to validate the `DPoP` header.\n\nIn normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "htu":
                                    type: "string"
                                    description: "URL of the token endpoint. This field is used to validate the `DPoP` header.\n\nIf this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "accessToken":
                                    type: "string"
                                    description: "The representation of an access token that may be issued as a result of the Authlete API call.\n"
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT access token.\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk", "clientId": "26478243745571", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "INVALID_CLIENT"
                                            - "BAD_REQUEST"
                                            - "PASSWORD"
                                            - "OK"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "username":
                                        type: "string"
                                        description: "The value of `username` request parameter in the token request.\nThe client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).\nIn other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.\n\nThis parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.\n"
                                    "password":
                                        type: "string"
                                        description: "The value of `password` request parameter in the token request.\nThe client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).\nIn other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.\n\nThis parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.\n"
                                    "ticket":
                                        type: "string"
                                        description: "The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.\n\nThis parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.\n"
                                    "accessToken":
                                        type: "string"
                                        description: "The newly issued access token."
                                    "accessTokenExpiresAt":
                                        type: "integer"
                                        description: "The datetime at which the newly issued access token will expire.\nThe value is represented in milliseconds since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of the newly issued access token in seconds."
                                        format: "int64"
                                    "refreshToken":
                                        type: "string"
                                        description: "The newly issued refresh token."
                                    "refreshTokenExpiresAt":
                                        type: "integer"
                                        description: "The datetime at which the newly issued refresh token will expire.\nThe value is represented in milliseconds since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "refreshTokenDuration":
                                        type: "integer"
                                        description: "The duration of the newly issued refresh token in seconds."
                                        format: "int64"
                                    "idToken":
                                        type: "string"
                                        description: "The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter\nof the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.\n"
                                    "grantType":
                                        type: "string"
                                        description: "The grant type of the token request."
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID."
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.\nAlso, if the token request was invalid and it failed to identify a client, this parameter is `null`.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "The flag which indicates whether the client ID alias was used when the token request was made.\n`true` if the client ID alias was used when the token request was made.\n"
                                    "subject":
                                        type: "string"
                                        description: "The subject (= resource owner's ID) of the access token.\nEven if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was\n[Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token\nis not associated with any specific end-user.\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes covered by the access token."
                                        items:
                                            type: "string"
                                    "properties":
                                        type: "array"
                                        description: "The extra properties associated with the access token.\nThis parameter is `null` when no extra property is associated with the issued access token.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                                "hidden":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                            type: "object"
                                            x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                    "jwtAccessToken":
                                        type: "string"
                                        description: "The newly issued access token in JWT format. If the authorization server is configured\nto issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a\nnon-null value), a JWT-based access token is issued along with the original random-string\none.\n"
                                    "resources":
                                        type: "array"
                                        description: "The resources specified by the `resource` request parameters in the token request.\nSee \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "accessTokenResources":
                                        type: "array"
                                        description: "The target resources of the access token being issued. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAuthMethod":
                                        type: "string"
                                        description: "The client authentication method that was performed at the token endpoint.\n"
                                    "grantId":
                                        type: "string"
                                        description: "the value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "audiences":
                                        type: "array"
                                        description: "The audiences on the token exchange request\n"
                                        items:
                                            type: "string"
                                    "requestedTokenType":
                                        type: "string"
                                        enum:
                                            - "urn:ietf:params:oauth:token-type:jwt"
                                            - "urn:ietf:params:oauth:token-type:access_token"
                                            - "urn:ietf:params:oauth:token-type:refresh_token"
                                            - "urn:ietf:params:oauth:token-type:id_token"
                                            - "urn:ietf:params:oauth:token-type:saml1"
                                            - "urn:ietf:params:oauth:token-type:saml2"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        description: "The grant type of the access token when the access token was created.\n"
                                    "subjectToken":
                                        type: "string"
                                    "subjectTokenType":
                                        enum:
                                            - "urn:ietf:params:oauth:token-type:jwt"
                                            - "urn:ietf:params:oauth:token-type:access_token"
                                            - "urn:ietf:params:oauth:token-type:refresh_token"
                                            - "urn:ietf:params:oauth:token-type:id_token"
                                            - "urn:ietf:params:oauth:token-type:saml1"
                                            - "urn:ietf:params:oauth:token-type:saml2"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        type: "string"
                                        description: "The grant type of the access token when the access token was created.\n"
                                    "subjectTokenInfo":
                                        type: "object"
                                        properties:
                                            "clientId":
                                                type: "integer"
                                                description: "The client id."
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The alias of the client."
                                            "clientIdAliasUsed":
                                                type: "boolean"
                                                description: "Flag specifying if the alias was used to identify the client"
                                            "subject":
                                                type: "string"
                                                description: "the resource owner unique id"
                                            "scopes":
                                                type: "array"
                                                description: "The scopes granted on the token"
                                                items:
                                                    type: "string"
                                            "expiresAt":
                                                type: "integer"
                                                description: "time which the token expires."
                                            "properties":
                                                type: "array"
                                                description: "Extra properties associated with the token"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                        "hidden":
                                                            type: "boolean"
                                                            description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                                    type: "object"
                                                    x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                            "resources":
                                                type: "array"
                                                description: "The array of the resources of the token."
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "type":
                                                        type: "string"
                                                        description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                    "locations":
                                                        type: "array"
                                                        description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "actions":
                                                        type: "array"
                                                        description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "dataTypes":
                                                        type: "array"
                                                        description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "identifier":
                                                        type: "string"
                                                        description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                    "privileges":
                                                        type: "array"
                                                        description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "otherFields":
                                                        type: "string"
                                                        description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                required:
                                                    - "type"
                                                type: "object"
                                                x-stoplight: {"id": "cp8779lbx2pfx"}
                                            "clientEntityId":
                                                type: "string"
                                                description: "The entity ID of the client.\n"
                                            "clientEntityIdUsed":
                                                type: "boolean"
                                                description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                    "actorToken":
                                        type: "string"
                                    "actorTokenType":
                                        enum:
                                            - "urn:ietf:params:oauth:token-type:jwt"
                                            - "urn:ietf:params:oauth:token-type:access_token"
                                            - "urn:ietf:params:oauth:token-type:refresh_token"
                                            - "urn:ietf:params:oauth:token-type:id_token"
                                            - "urn:ietf:params:oauth:token-type:saml1"
                                            - "urn:ietf:params:oauth:token-type:saml2"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        type: "string"
                                        description: "The grant type of the access token when the access token was created.\n"
                                    "actorTokenInfo":
                                        properties:
                                            "clientId":
                                                type: "integer"
                                                description: "The client id."
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The alias of the client."
                                            "clientIdAliasUsed":
                                                type: "boolean"
                                                description: "Flag specifying if the alias was used to identify the client"
                                            "subject":
                                                type: "string"
                                                description: "the resource owner unique id"
                                            "scopes":
                                                type: "array"
                                                description: "The scopes granted on the token"
                                                items:
                                                    type: "string"
                                            "expiresAt":
                                                type: "integer"
                                                description: "time which the token expires."
                                            "properties":
                                                type: "array"
                                                description: "Extra properties associated with the token"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                        "hidden":
                                                            type: "boolean"
                                                            description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                                    type: "object"
                                                    x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                            "resources":
                                                type: "array"
                                                description: "The array of the resources of the token."
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "type":
                                                        type: "string"
                                                        description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                    "locations":
                                                        type: "array"
                                                        description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "actions":
                                                        type: "array"
                                                        description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "dataTypes":
                                                        type: "array"
                                                        description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "identifier":
                                                        type: "string"
                                                        description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                    "privileges":
                                                        type: "array"
                                                        description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "otherFields":
                                                        type: "string"
                                                        description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                required:
                                                    - "type"
                                                type: "object"
                                                x-stoplight: {"id": "cp8779lbx2pfx"}
                                            "clientEntityId":
                                                type: "string"
                                                description: "The entity ID of the client.\n"
                                            "clientEntityIdUsed":
                                                type: "boolean"
                                                description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                        type: "object"
                                    "assertion":
                                        type: "string"
                                        description: "For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants\n"
                                    "previousRefreshTokenUsed":
                                        type: "boolean"
                                        description: "Indicate whether the previous refresh token that had been kept in the database for a short time was used\n"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                    "cnonceDuration":
                                        type: "integer"
                                        description: "Duration of the `c_nonce` in seconds.\n"
                                        format: "int64"
                                    "dpopNonce":
                                        type: "string"
                                        description: "Get the expected nonce value for DPoP proof JWT, which should be used\nas the value of the `DPoP-Nonce` HTTP header.\n"
                                    "cnonce":
                                        type: "string"
                                        description: "Get the `c_nonce`.\n"
                                    "cnonceExpiresAt":
                                        type: "integer"
                                        description: "Get the time at which the `c_nonce` expires in milliseconds since\nthe Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "requestedIdTokenClaims":
                                        type: "array"
                                        description: "Get the names of the claims that the authorization request (which resulted\nin generation of the access token) requested to be embedded in ID tokens.\n"
                                        items:
                                            type: "string"
                                    "refreshTokenScopes":
                                        type: "array"
                                        description: "Scopes associated with the refresh token.\n"
                                        items:
                                            type: "string"
                            examples:
                                "default":
                                    value: {"resultCode": "A050001", "resultMessage": "[A050001] The token request (grant_type=authorization_code) was processed successfully.", "accessToken": "C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ", "accessTokenDuration": 3600, "accessTokenExpiresAt": 1640252942736, "action": "OK", "clientAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasUsed": false, "grantType": "AUTHORIZATION_CODE", "refreshToken": "60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo", "refreshTokenDuration": 3600, "refreshTokenExpiresAt": 1640252942736, "responseContent": "{\\\"access_token\\\":\\\"C4SrUTijIj2IxqE1xBASr3dxQWgso3BpY49g8CyjGjQ\\\",\\\"refresh_token\\\":\\\"60k0cZ38sJcpTgdxvG9Sqa-3RG5AmGExGpFB-1imSxo\\\",\\\"scope\\\":\\\"history.read timeline.read\\\",\\\"token_type\\\":\\\"Bearer\\\",\\\"expires_in\\\":3600}", "scopes": ["history.read", "timeline.read"], "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "subject": "john"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\": \"grant_type=authorization_code&code=Xv_su944auuBgc5mfUnxXayiiQU9Z4-T_Yae_UfExmo&redirect_uri=https%3A%2F%2Fmy-client.example.com%2Fcb1&code_verifier=dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\", \"clientId\": \"57297408867\", \"clientSecret\": \"J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nTokenRequest req = new TokenRequest();\nreq.setParameters(...);\nreq.setClientId(\"57297408867\");\nreq.setClientSecret(\"J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A\");\n\napi.token(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenRequest()\nreq.parameters = ...\nreq.clientId = '57297408867'\nreq.clientSecret = 'J_3C7P0nDTP7CwCg_HyPQh7bTQ1696CC8GWot-EjesZmdBiU5Gsidq5Ve3tMaN2x2_VcKV1UE1U3ZdGKRuTs7A'\n\napi.token(req)\n"}]
            x-stoplight: {"id": "0mfylwj3ltmkm"}
    "/api/{serviceId}/auth/token/fail":
        post:
            tags:
                - "Token Endpoint"
            summary: "Fail Token Request"
            description: "This API generates a content of an error token response that the authorization server implementation\nreturns to the client application.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the token endpoint of the service\nin order to generate an error response to the client application.\n\nThe description of the `/auth/token` API describes the timing when this API should be called. See\nthe description for the case of `action=PASSWORD`.\n\nThe response from `/auth/token/fail` API has some parameters. Among them, it is `action` parameter\nthat the authorization server implementation should check first because it denotes the next action\nthat the authorization server implementation should take. According to the value of `action`, the\nauthorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application\nsince \"500 Internal Server Error\" is not required by OAuth 2.0.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that Authlete's `/auth/token/fail` API successfully\ngenerated an error response for the client application.\n\nThe HTTP status of the response returned to the client application must be \"400 Bad Request\" and\nthe content type must be `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n</details>\n"
            operationId: "auth_token_fail_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket issued from Authlete `/auth/token` API.\n"
                                "reason":
                                    type: "string"
                                    enum:
                                        - "UNKNOWN"
                                        - "INVALID_RESOURCE_OWNER_CREDENTIALS"
                                        - "INVALID_TARGET"
                                    description: "The reason of the failure of the token request.\n"
                            required:
                                - "ticket"
                                - "reason"
                        examples:
                            "default":
                                value: {"ticket": "83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c", "reason": "INVALID_RESOURCE_OWNER_CREDENTIALS"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter. See description for details.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A067301", "resultMessage": "[A067301] The credentials (username & password) passed to the token endpoint are invalid.", "action": "BAD_REQUEST", "responseContent": "{\\\"error_description\\\":\\\"[A067301] The credentials (username & password) passed to the token endpoint are invalid.\\\",\\\"error\\\":\\\"invalid_request\\\",\\\"error_uri\\\":\\\"https://docs.authlete.com/#A067301\\\"}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/fail \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c\", \"reason\": \"INVALID_RESOURCE_OWNER_CREDENTIALS\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nTokenFailRequest req = new TokenFailRequest();\nreq.setTicket(\"83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c\");\nreq.setReason(TokenFailRequest.Reason.INVALID_RESOURCE_OWNER_CREDENTIALS);\n\napi.tokenFail(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenFailRequest()\nreq.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'\nreq.reason = TokenFailReason.INVALID_RESOURCE_OWNER_CREDENTIALS\n\napi.tokenFail(req)\n"}]
            x-stoplight: {"id": "ruk18a6r89bsg"}
    "/api/{serviceId}/auth/token/issue":
        post:
            tags:
                - "Token Endpoint"
            summary: "Issue Token Response"
            description: "This API generates a content of a successful token response that the authorization server implementation\nreturns to the client application.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the token endpoint of the service\nin order to generate a successful response to the client application.\n\nThe description of the `/auth/token` API describes the timing when this API should be called. See\nthe description for the case of `action=PASSWORD`.\n\nThe response from `/auth/token/issue` API has some parameters. Among them, it is `action` parameter\nthat the authorization server implementation should check first because it denotes the next action\nthat the authorization server implementation should take. According to the value of `action`, the\nauthorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client application\nsince \"500 Internal Server Error\" is not required by OAuth 2.0.\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that Authlete's `/auth/token/issue` API successfully\ngenerated an access token.\n\nThe HTTP status of the response returned to the client application must be \"200 OK\" and the content\ntype must be`application/json`.\n\nThe value of `responseContent` is a JSON string which contains an access token, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n</details>\n"
            operationId: "auth_token_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket issued from Authlete `/auth/token` API.\n"
                                "subject":
                                    type: "string"
                                    description: "The subject (= unique identifier) of the authenticated user.\n"
                                "properties":
                                    type: "array"
                                    description: "Extra properties to associate with a newly created access token. Note that properties parameter is accepted only\nwhen `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`\nif you want to specify properties.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT access token.\n"
                                "accessToken":
                                    type: "string"
                                    description: "The representation of an access token that may be issued as a result of the Authlete API call.\n"
                            required:
                                - "ticket"
                                - "subject"
                        examples:
                            "default":
                                value: {"ticket": "p7SXQ9JFjng7KFOZdCMBKcoR3ift7B54l1LGIgQXqEM", "subject": "john"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format is JSON.\n"
                                    "accessToken":
                                        type: "string"
                                        description: "The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`."
                                    "accessTokenExpiresAt":
                                        type: "integer"
                                        description: "The datetime at which the newly issued access token will expire.\nThe value is represented in milliseconds since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of the newly issued access token in seconds."
                                        format: "int64"
                                    "refreshToken":
                                        type: "string"
                                        description: "The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.\nIf `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow\nis invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.\n"
                                    "refreshTokenExpiresAt":
                                        type: "integer"
                                        description: "The datetime at which the newly issued refresh token will expire.\nThe value is represented in milliseconds since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "refreshTokenDuration":
                                        type: "integer"
                                        description: "The duration of the newly issued refresh token in seconds."
                                        format: "int64"
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID."
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias. If the client did not have an alias, this parameter is `null`.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "The flag which indicates whether the client ID alias was used when the token request was made.\n`true` if the client ID alias was used when the token request was made.\n"
                                    "subject":
                                        type: "string"
                                        description: "The subject (= resource owner's ID) of the access token.\nEven if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was\n[Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means\nthe access token is not associated with any specific end-user.\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes covered by the access token."
                                        items:
                                            type: "string"
                                    "properties":
                                        type: "array"
                                        description: "The extra properties associated with the access token.\nThis parameter is `null` when no extra property is associated with the issued access token.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                                "hidden":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                            type: "object"
                                            x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                    "jwtAccessToken":
                                        type: "string"
                                        description: "The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens\n(= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the\noriginal random-string one.\n"
                                    "accessTokenResources":
                                        type: "array"
                                        description: "The target resources of the access token being issued. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                    "refreshTokenScopes":
                                        type: "array"
                                        description: "The scopes associated with the refresh token. May be null.\n"
                                        items:
                                            type: "string"
                            examples:
                                "default":
                                    value: {"resultCode": "A054001", "resultMessage": "[A054001] The token request (grant_type=password) was processed successfully.", "accessToken": "OthV6TlZ2pPUtlBBvBSGFYzSdgVy87SSIPz2Zjwi-m0", "accessTokenDuration": 3600, "accessTokenExpiresAt": 1640331371876, "action": "OK", "clientAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasUsed": false, "refreshToken": "ICPN0-sG3BH4szqiNqaFHZrWUGt7e0zaPuhys3ejQow", "refreshTokenDuration": 3600, "refreshTokenExpiresAt": 1640331371876, "responseContent": "{\\\"access_token\\\":\\\"OthV6TlZ2pPUtlBBvBSGFYzSdgVy87SSIPz2Zjwi-m0\\\",\\\"refresh_token\\\":\\\"ICPN0-sG3BH4szqiNqaFHZrWUGt7e0zaPuhys3ejQow\\\",\\\"scope\\\":null,\\\"token_type\\\":\\\"Bearer\\\",\\\"expires_in\\\":3600}", "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "subject": "john"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/issue \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"p7SXQ9JFjng7KFOZdCMBKcoR3ift7B54l1LGIgQXqEM\", \"subject\": \"john\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nTokenIssueRequest req = new TokenIssueRequest()\nreq.setTicket(\"83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c\");\n\napi.tokenIssue(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenIssueRequest()\nreq.ticket = '83BNqKIhGMyrkvop_7jQjv2Z1612LNdGSQKkvkrf47c'\n\napi.tokenIssue(req)\n"}]
            x-stoplight: {"id": "c07bjfwfn5z76"}
    "/api/{serviceId}/auth/introspection":
        post:
            tags:
                - "Introspection Endpoint"
            summary: "Process Introspection Request"
            description: "This API gathers information about an access token.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementations of protected resource endpoints\nof the authorization server implementation in order to get information about the access token which\nwas presented by the client application.\n\nIn general, a client application accesses a protected resource endpoint of a service with an access\ntoken, and the implementation of the endpoint checks whether the presented access token has enough\nprivileges (= scopes) to access the protected resource before returning the protected resource to\nthe client application. To achieve this flow, the endpoint implementation has to know detailed\ninformation about the access token. Authlete `/auth/introspection` API can be used to get such information.\n\nThe response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter\nthat the authorization server implementation should check first because it denotes the next action\nthat the authorization server implementation should take. According to the value of `action`, the\nauthorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\". Authlete recommends `application/json` as the content\ntype although OAuth 2.0 specification does not mention the format of the error response when the\nredirect URI is not usable.\n\nThe value of `responseContent` is a string which describes the error in the format of\n[RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if\nthe protected resource of the service implementation wants to return an error response to the client\napplication in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration\nparameter of the service is Bearer), the value of `responseContent` can be used as the value of\n`WWW-Authenticate` header.\n\nThe following is an example response which complies with RFC 6750.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\ndoes not contain an access token (= the request from the authorization server implementation to\nAuthlete does not contain `token` request parameter).\n\nA response with HTTP status of \"400 Bad Request\" must be returned to the client application and\nthe content type must be `application/json`.\n\n\nThe value of `responseContent` is a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if the\nprotected resource of the service implementation wants to return an error response to the client\napplication in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration\nparameter of the service is `Bearer`), the value of `responseContent` can be used as the value of\n`WWW-Authenticate` header.\n\nThe following is an example response which complies with RFC 6750.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist or has\nexpired.\n\nThe value of `responseContent` is a string which describes the error in the format of RFC\n6750 (OAuth 2.0 Bearer Token Usage), so if the protected resource of the service implementation\nwants to return an error response to the client application in the way that complies with [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (in other words, if `accessTokenType` configuration\nparameter of the service is `Bearer`), the value of `responseContent` can be used as the value of\n`WWW-Authenticate` header.\n\nThe following is an example response which complies with RFC 6750.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORBIDDEN**\n\nWhen the value of `action` is `FORBIDDEN`, it means that the access token does not cover the required\nscopes or that the subject associated with the access token is different from the subject contained\nin the request.\n\nA response with HTTP status of \"400 Bad Request\" must be returned to the client application and\nthe content type must be `application/json`.\n\nThe value of `responseContent` is a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage), so if the\nprotected resource of the service implementation wants to return an error response to the client\napplication in the way that complies with RFC 6750 (in other words, if `accessTokenType` configuration\nparameter of the service is Bearer), the value of `responseContent` can be used as the value of\n`WWW-Authenticate` header.\n\nThe following is an example response which complies with RFC 6750.\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the access token which the client application\npresented is valid (= exists and has not expired).\n\nThe implementation of the protected resource endpoint is supposed to return the protected resource\nto the client application.\n\nWhen action is `OK`, the value of `responseContent` is `\"Bearer error=\\\"invalid_request\\\"\"`. This\nis the simplest string which can be used as the value of `WWW-Authenticate` header to indicate\n\"400 Bad Request\". The implementation of the protected resource endpoint may use this string to\ntell the client application that the request was bad (e.g. in case necessary request parameters\nfor the protected resource endpoint are missing). However, in such a case, the implementation\nshould generate a more informative error message to help developers of client applications.\n\nThe following is an example error response which complies with RFC 6750.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\nBasically, The value of `responseContent` is a string which describes the error in the format of\n[RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage). So, if\nthe service has selected `Bearer` as the value of `accessTokenType` configuration parameter, the\nvalue of `responseContent` can be used directly as the value of `WWW-Authenticate` header. However,\nif the service has selected another different token type, the service has to generate error messages\nfor itself.\n\n_**JWT-based access token**_\n\nSince version 2.1, Authlete provides a feature to issue access tokens in JWT format. This feature\ncan be enabled by setting a non-null value to the `accessTokenSignAlg` property of the service\n(see the description of the Service class for details). `/api/auth/introspection` API can accept\naccess tokens in JWT format. However, note that the API does not return information contained in\na given JWT-based access token but returns information stored in the database record which corresponds\nto the given JWT-based access token. Because attributes of the database record can be modified\nafter the access token is issued (for example, by using `/api/auth/token/update` API), information\nreturned by `/api/auth/introspection` API and information the given JWT-based access token holds\nmay be different.\n\n</details>\n"
            operationId: "auth_introspection_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "token":
                                    type: "string"
                                    description: "An access token to introspect."
                                "scopes":
                                    type: "array"
                                    description: "A string array listing names of scopes which the caller (= a protected resource endpoint of the\nservice) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,\nthe format of `scopes` is a space-separated list of scope names.\n\nIf this parameter is a non-empty array and if it contains a scope which is not covered by the\naccess token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.\n"
                                    items:
                                        type: "string"
                                "subject":
                                    type: "string"
                                    description: "A subject (= a user account managed by the service) whom the caller (= a protected resource\nendpoint of the service) requires.\n\nIf this parameter is not `null` and if the value does not match the subject who is associated\nwith the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "Client certificate in PEM format, used to validate binding against access tokens using the TLS\nclient certificate confirmation method.\n"
                                "dpop":
                                    type: "string"
                                    description: "`DPoP` header presented by the client during the request to the resource server.\n\nThe header contains a signed JWT which includes the public key that is paired with the private\nkey used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application\nLayer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.\n"
                                "htm":
                                    type: "string"
                                    description: "HTTP method of the request from the client to the protected resource endpoint. This field is\nused to validate the `DPoP` header.\n\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "htu":
                                    type: "string"
                                    description: "URL of the protected resource endpoint. This field is used to validate the `DPoP` header.\n\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "resources":
                                    type: "array"
                                    description: "The resources specified by the `resource` request parameters in the token request. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                    items:
                                        type: "string"
                                "acrValues":
                                    type: "array"
                                    description: "Authentication Context Class Reference values one of which the user authentication performed during the course \nof issuing the access token must satisfy.\n"
                                    items:
                                        type: "string"
                                "maxAge":
                                    type: "integer"
                                    description: "The maximum authentication age which is the maximum allowable elapsed time since the user authentication \nwas performed during the course of issuing the access token.\n"
                                    format: "int64"
                                "requiredComponents":
                                    type: "array"
                                    description: "HTTP Message Components required to be in the signature. If absent, defaults to [ \"@method\", \"@target-uri\", \"authorization\" ].\n"
                                    items:
                                        type: "string"
                                "uri":
                                    type: "string"
                                    description: "The full URL of the userinfo endpoint.\n"
                                "message":
                                    type: "string"
                                    description: "The HTTP message body of the request, if present.\n"
                                "headers":
                                    type: "array"
                                    description: "HTTP headers to be included in processing the signature. If this is a signed request, this must include the \nSignature and Signature-Input headers, as well as any additional headers covered by the signature.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                            required:
                                - "token"
                        examples:
                            "default":
                                value: {"token": "VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI", "subject": "john", "scopes": ["history.read", "timeline.read"]}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.\n"
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID."
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.\nAlso, if the token request was invalid and it failed to identify a client, this parameter is `null`.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "The flag which indicates whether the client ID alias was used when the token request was made.\n`true` if the client ID alias was used when the token request was made.\n"
                                    "expiresAt":
                                        type: "integer"
                                        description: "The time at which the access token expires.\nThe value is represented in milliseconds since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                                    "subject":
                                        type: "string"
                                        description: "The subject who is associated with the access token.\nThe value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes covered by the access token.\n"
                                        items:
                                            type: "string"
                                    "existent":
                                        type: "boolean"
                                        description: "`true` if the access token exists.\n"
                                    "usable":
                                        type: "boolean"
                                        description: "true` if the access token is usable (= exists and has not expired).\n"
                                    "sufficient":
                                        type: "boolean"
                                        description: "`true` if the access token exists.\n"
                                    "refreshable":
                                        type: "boolean"
                                        description: "`true` if the access token can be refreshed using the associated refresh token which had been issued\nalong with the access token. `false` if the refresh token for the access token has expired or the access\ntoken has no associated refresh token.\n"
                                    "properties":
                                        type: "array"
                                        description: "The extra properties associated with the access token."
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                                "hidden":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                            type: "object"
                                            x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                    "certificateThumbprint":
                                        type: "string"
                                        description: "The client certificate thumbprint used to validate the access token.\n"
                                    "resources":
                                        type: "array"
                                        description: "The target resources. This represents the resources specified by the `resource` request parameters\nor by the `resource` property in the request object.\n\nSee \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "accessTokenResources":
                                        type: "array"
                                        description: "The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.\n\nIn some flows, the initial request and the subsequent token request are sent to different endpoints.\nExample flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.\nIn these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.\nThe purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original\nset of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the\n`resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.\n\nSee \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "scopeDetails":
                                        type: "array"
                                        description: "The scopes property of this class is a list of scope names. The property does not hold information\nabout scope attributes. This scopeDetails property was newly created to convey information about\nscope attributes.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            type: "object"
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "grantId":
                                        type: "string"
                                        description: "The value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "grant":
                                        properties:
                                            "scopes":
                                                type: "array"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "scope":
                                                            type: "string"
                                                            description: "Space-delimited scopes.\n"
                                                        "resource":
                                                            type: "array"
                                                            description: "List of resource indicators.\n"
                                                            items:
                                                                type: "string"
                                            "claims":
                                                type: "array"
                                                description: "The claims associated with the Grant.\n"
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "elements":
                                                        type: "array"
                                                        description: "Elements of this authorization details.\n"
                                                        items:
                                                            type: "object"
                                                            properties:
                                                                "type":
                                                                    type: "string"
                                                                    description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                                "locations":
                                                                    type: "array"
                                                                    description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "actions":
                                                                    type: "array"
                                                                    description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "dataTypes":
                                                                    type: "array"
                                                                    description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "identifier":
                                                                    type: "string"
                                                                    description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                                "privileges":
                                                                    type: "array"
                                                                    description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "otherFields":
                                                                    type: "string"
                                                                    description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                            required:
                                                                - "type"
                                                            x-stoplight: {"id": "cp8779lbx2pfx"}
                                                type: "object"
                                                description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                                x-stoplight: {"id": "1nyzf1nnowolm"}
                                        type: "object"
                                    "forExternalAttachment":
                                        type: "boolean"
                                        description: "the flag which indicates whether the access token is for an external\nattachment.\n"
                                    "consentedClaims":
                                        type: "array"
                                        description: "the claims that the user has consented for the client application\nto know.\n"
                                        items:
                                            type: "string"
                                    "grantType":
                                        enum:
                                            - "AUTHORIZATION_CODE"
                                            - "IMPLICIT"
                                            - "PASSWORD"
                                            - "CLIENT_CREDENTIALS"
                                            - "REFRESH_TOKEN"
                                            - "CIBA"
                                            - "DEVICE_CODE"
                                            - "TOKEN_EXCHANGE"
                                            - "JWT_BEARER"
                                        type: "string"
                                        description: "The grant type of the access token when the access token was created.\n"
                                        x-stoplight: {"id": "033u82mqvyogn"}
                                    "acr":
                                        type: "string"
                                        description: "The Authentication Context Class Reference of the user authentication that the authorization server performed \nduring the course of issuing the access token.\n"
                                    "authTime":
                                        type: "integer"
                                        description: "The time when the user authentication was performed during the course of issuing the access token.\n"
                                        format: "int64"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                    "forCredentialIssuance":
                                        type: "boolean"
                                        description: "The flag indicating whether the token is for credential issuance."
                                    "cnonce":
                                        type: "string"
                                        description: "The c_nonce"
                                    "cnonceExpiresAt":
                                        type: "integer"
                                        description: "The time at which the `c_nonce` expires."
                                        format: "int64"
                                    "issuableCredentials":
                                        type: "string"
                                        description: "The credentials that can be obtained by presenting the access token."
                                    "dpopNonce":
                                        type: "string"
                                        description: "The expected nonce value for DPoP proof JWT, which should be used\nas the value of the `DPoP-Nonce` HTTP header.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A056001", "resultMessage": "[A056001] The access token is valid.", "action": "OK", "clientAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "clientId": 26478243745571, "clientIdAlias": "my-client", "clientIdAliasUsed": false, "existent": true, "expiresAt": 1640416873000, "refreshable": true, "responseContent": "Bearer error=\"invalid_request\"", "scopes": ["history.read", "timeline.read"], "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "subject": "john", "sufficient": true, "usable": true}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/introspection \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"token\": \"VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\", \"scopes\": [ \"history.read\", \"timeline.read\" ] }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nIntrospectionRequest req = new IntrospectionRequest();\nreq.setToken(\"VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI\");\nreq.setScopes(new String[] { \"history.read\", \"timeline.read\" });\n\napi.introspection(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = IntrospectionRequest()\nreq.token = 'VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI'\nreq.scopes = [ 'history.read', 'timeline.read' ]\n\napi.introspection(req)\n"}]
            x-stoplight: {"id": "0fdkys212ey9b"}
    "/api/{serviceId}/auth/introspection/standard":
        post:
            tags:
                - "Introspection Endpoint"
            summary: "Process OAuth 2.0 Introspection Request"
            description: "This API exists to help your authorization server provide its own introspection API which complies\nwith [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementations of the introspection endpoint\nof your service. The authorization server implementation should retrieve the value of `action` from\nthe response and take the following steps according to the value.\n\nIn general, a client application accesses a protected resource endpoint of a service with an access\ntoken, and the implementation of the endpoint checks whether the presented access token has enough\nprivileges (= scopes) to access the protected resource before returning the protected resource to\nthe client application. To achieve this flow, the endpoint implementation has to know detailed\ninformation about the access token. Authlete `/auth/introspection` API can be used to get such information.\n\nThe response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter\nthat the authorization server implementation should check first because it denotes the next action\nthat the authorization server implementation should take. According to the value of `action`, the\nauthorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response\nbody of error responses.\n\nThe following illustrates an example response which the introspection endpoint of the authorization\nserver implementation generates and returns to the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\nis invalid. This happens when the request from the client did not include the token request parameter.\nSee \"[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)\" in\nRFC 7662 for details about requirements for introspection requests.\n\nThe HTTP status of the response returned to the client application should be \"400 Bad Request\".\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)\ndoes not mention anything about the response body of error responses.\n\nThe following illustrates an example response which the introspection endpoint of the authorization\nserver implementation generates and returns to the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\n\n{responseContent}\n```\n\n**OK**\n\nWhen the value of `action` is `OK`, the request from the client application is valid.\n\nThe HTTP status of the response returned to the client application must be \"200 OK\" and its content\ntype must be `application/json`.\n\nThe value of `responseContent` is a JSON string which complies with the introspection response\ndefined in \"2.2. Introspection Response\" in RFC7662.\n\nThe following illustrates the response which the introspection endpoint of your authorization server\nimplementation should generate and return to the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{responseContent}\n```\n\nNote that RFC 7662 says _\"To prevent token scanning attacks, **the endpoint MUST also require some\nform of authorization to access this endpoint**\"_. This means that you have to protect your introspection\nendpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.\nIn most cases, as mentioned in RFC 7662, \"401 Unauthorized\" is a proper response when an introspection\nrequest does not satisfy authorization requirements imposed by your introspection endpoint.\n\n</details>\n"
            operationId: "auth_introspection_standard_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "Request parameters which comply with the introspection request defined\nin \"[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)\" in\nRFC 7662.\n\nThe implementation of the introspection endpoint of your authorization server will receive an\nHTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters\nin the `application/x-www-form-urlencoded` format. It is the entity body of the request that\nAuthlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.\n"
                                "withHiddenProperties":
                                    type: "string"
                                    description: "Flag indicating whether to include hidden properties in the output.\n\nAuthlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.\nEach key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute\nis set to `true` are not embedded in the standard introspection output.\n\nIf the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard\nAPI includes all the associated key-value pairs into the output regardless of the value of the\nhidden attribute.\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A145001", "resultMessage": "[A145001] Introspection was performed successfully (type=access_token, active=true).", "action": "OK", "responseContent": "{\\\"sub\\\":\\\"john\\\",\\\"scope\\\":\\\"history.read timeline.read\\\",\\\"iss\\\":\\\"https://my-service.example.com\\\",\\\"active\\\":true,\\\"token_type\\\":\\\"Bearer\\\",\\\"exp\\\":1640416873,\\\"client_id\\\":\\\"26478243745571\\\"}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/introspection/standard \\\n-H \"Content-Type:application/json\" \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\":\"token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nStandardIntrospectionRequest req = new StandardIntrospectionRequest();\nreq.setParameters(...);\n\napi.standardIntrospection(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = StandardIntrospectionRequest()\nreq.parameters = ...\n\napi.standardIntrospection(req)\n"}]
            x-stoplight: {"id": "43zylm7dsfs5l"}
    "/api/{serviceId}/auth/revocation":
        post:
            tags:
                - "Revocation Endpoint"
            summary: "Process Revocation Request"
            description: "This API revokes access tokens and refresh tokens.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the revocation endpoint ([RFC\n7009](tools.ietf.org/html/rfc7009)) of the authorization server implementation in order to revoke\naccess tokens and refresh tokens.\n\nThe response from `/auth/revocation` API has some parameters. Among them, it is `action` parameter\nthat the authorization server implementation should check first because it denotes the next action\nthat the authorization server implementation should take. According to the value of `action`, the\nauthorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\".\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be\nused as the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**INVALID_CLIENT**\n\nWhen the value of `action` is `INVALID_CLIENT`, it means that authentication of the client failed.\nIn this case, the HTTP status of the response to the client application is either \"400 Bad Request\"\nor \"401 Unauthorized\". The description about `invalid_client` shown below is an excerpt from [RFC\n6749](https://datatracker.ietf.org/doc/html/rfc6749).\n\n`invalid_client`\n\n> Client authentication failed (e.g., unknown client, no client authentication included, or unsupported\nauthentication method). The authorization server MAY return an HTTP 401 (Unauthorized) status code\nto indicate which HTTP authentication schemes are supported. If the client attempted to authenticate\nvia the `Authorization` request header field, the authorization server MUST respond with an HTTP\n401 (Unauthorized) status code and include the `WWW-Authenticate` response header field matching\nthe authentication scheme used by the client.\n\nIn either case, the value of `responseContent` is a JSON string which can be used as the entity\nbody of the response to the client application.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n<br>\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {challenge}\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\nis invalid.\n\nThe HTTP status of the response returned to the client application must be \"400 Bad Request\" and\nthe content type must be `application/json`. [RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009),\n[2.2.1. Error Respons](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2.1) states \"The\nerror presentation conforms to the definition in [Section 5.2](https://datatracker.ietf.org/doc/html/rfc6749#section-5.2)\nof [[RFC 6749](https://datatracker.ietf.org/doc/html/rfc6749)].\"\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the request from the client application is valid\nand the presented token has been revoked successfully or if the client submitted an invalid token.\nNote that invalid tokens do not cause an error. See [2.2. Revocation Response](https://datatracker.ietf.org/doc/html/rfc7009#section-2.2) for details.\n\nThe HTTP status of the response returned to the client application must be 200 OK.\n\nIf the original request from the client application contains callback request parameter and its\nvalue is not empty, the content type should be `application/javascript` and the content should be\na JavaScript snippet for JSONP.\n\nThe value of `responseContent` is JavaScript snippet if the original request from the client application\ncontains callback request parameter and its value is not empty. Otherwise, the value of `responseContent`\nis `null`.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/javascript\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "auth_revocation_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint\n([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the\nclient application.\n\nThe value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request\nfrom the client application.\n"
                                "clientId":
                                    type: "string"
                                    description: "The client ID extracted from `Authorization` header of the revocation request from the client application.\n\nIf the revocation endpoint of the authorization server implementation supports Basic Authentication\nas a means of client authentication, and the request from the client application contains its client ID in\n`Authorization` header, the value should be extracted and set to this parameter.\n"
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret extracted from `Authorization` header of the revocation request from the client application.\n\nIf the revocation endpoint of the authorization server implementation supports basic authentication as a means of\nclient authentication, and the request from the client application contained its client secret in `Authorization` header,\nthe value should be extracted and set to this parameter.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "The client certificate used in the TLS connection between the client application and the revocation endpoint.\n"
                                "clientCertificatePath":
                                    type: "string"
                                    description: "The certificate path presented by the client during client authentication.\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token", "clientId": "26478243745571", "clientSecret": "gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "INVALID_CLIENT"
                                            - "BAD_REQUEST"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A113001", "resultMessage": "[A113001] The token has been revoked successfully.", "action": "OK"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/revocation \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\": \"token=VFGsNK-5sXiqterdaR7b5QbRX9VTwVCQB87jbr2_xAI&token_type_hint=access_token\", \"clientId\": \"26478243745571\", \"clientSecret\": \"gXz97ISgLs4HuXwOZWch8GEmgL4YMvUJwu3er_kDVVGcA0UOhA9avLPbEmoeZdagi9yC_-tEiT2BdRyH9dbrQQ\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nRevocationRequest req = new RevocationRequest();\nrequest.setParameters(...);\n\napi.revocation(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = RevocationRequest()\nreq.parameters = ...\n\napi.revocation(req)\n"}]
            x-stoplight: {"id": "vv92nqph5orb5"}
    "/api/{serviceId}/auth/userinfo":
        post:
            tags:
                - "UserInfo Endpoint"
            summary: "Process UserInfo Request"
            description: "This API gathers information about a user.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)\nof the authorization server in order to get information about the user that is associated with\nan access token.\n\nThe response from `/auth/userinfo` API has various parameters. Among them, it is `action` parameter\nthat the authorization server implementation should check first because it denotes the next action\nthat the authorization server implementation should take. According to the value of `action`, the\nservice implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete. In either case, from the\nviewpoint of the client application, it is an error on the server side. Therefore, the service\nimplementation should generate a response to the client application with HTTP status of \"500 Internal\nServer Error\".\n\nThe value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)\n(OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`\nas the value of`WWW-Authenticate` header.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 500 Internal Server Error\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\ndoes not contain an access token (= the request from the authorization server implementation to\nAuthlete does not contain `token` parameter).\n\nThe value of `responseContent` is a string which describes the error in the format\nof [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the\nuserinfo endpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`\nheader.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has\nexpired, or is not associated with any subject (= any user account).\n\nThe value of `responseContent` is a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`\nheader.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORBIDDEN**\n\nWhen the value of `action` is `FORBIDDEN`, it means that the access token does not include the\n`openid` scope.\n\nThe value of `responseContent` is a string which describes the error in the format of [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750)\n(OAuth 2.0 Bearer Token Usage) so the userinfo endpoint implementation can use the value of `responseContent`\nas the value of`WWW-Authenticate` header.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the access token which the client application\npresented is valid. To be concrete, it means that the access token exists, has not expired, includes\nthe openid scope, and is associated with a subject (= a user account).\n\nWhat the userinfo endpoint implementation should do next is to collect information about the subject\n(user) from your database. The value of the `subject` is contained in the subject parameter in the\nresponse from this API and the names of data, i.e., the claims names are contained in the claims\nparameter in the response. For example, if the `subject` parameter is `joe123` and the claims\nparameter is `[ \"given_name\", \"email\" ]`, you need to extract information about joe123's given name\nand email from your database.\n\nThen, call Authlete's `/auth/userinfo/issue` API with the collected information and the access token\nin order to make Authlete generate an ID token.\n\nIf an error occurred during the above steps, generate an error response to the client. The response\nshould comply with [RFC 6750](https://datatracker.ietf.org/doc/html/rfc6750). For example, if the\nsubject associated with the access token does not exist in your database any longer, you may feel\nlike generating a response like below.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: Bearer error=\"invalid_token\",\n error_description=\"The subject associated with the access token does not exist.\"\nCache-Control: no-store\nPragma: no-cache\n```\n\nAlso, an error might occur on database access. If you treat the error as an internal server error,\nthen the response would be like the following.\n\n```\nHTTP/1.1 500 Internal Server Error\nWWW-Authenticate: Bearer error=\"server_error\",\n error_description=\"Failed to extract information about the subject from the database.\"\nCache-Control: no-store\nPragma: no-cache\n```\n</details>\n"
            operationId: "auth_userinfo_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "token":
                                    type: "string"
                                    description: "An access token.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "Client certificate used in the TLS connection established between the client application and the userinfo endpoint.\n\nThe value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to\na client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]\n(https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.\n"
                                "dpop":
                                    type: "string"
                                    description: "`DPoP` header presented by the client during the request to the user info endpoint.\n\nThe header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "htm":
                                    type: "string"
                                    description: "HTTP method of the user info request. This field is used to validate the DPoP header.\nIn normal cases, the value is either `GET` or `POST`.\n"
                                "htu":
                                    type: "string"
                                    description: "URL of the user info endpoint. This field is used to validate the DPoP header.\n\nIf this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "uri":
                                    type: "string"
                                    description: "The full URL of the userinfo endpoint.\n"
                                "message":
                                    type: "string"
                                    description: "The HTTP message body of the request, if present.\n"
                                "headers":
                                    type: "array"
                                    description: "HTTP headers to be included in processing the signature. If this is a signed request, this must include the \nSignature and Signature-Input headers, as well as any additional headers covered by the signature.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                            required:
                                - "token"
                        examples:
                            "default":
                                value: {"token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "claims":
                                        type: "array"
                                        description: "The list of claims that the client application requests to be embedded in the ID token.\n"
                                        items:
                                            type: "string"
                                    "clientId":
                                        type: "integer"
                                        description: "The ID of the client application which is associated with the access token.\n"
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias when the authorization request for the access token was made.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "The flag which indicates whether the client ID alias was used when the authorization\nrequest for the access token was made.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation can use as the value of `WWW-Authenticate`\nheader on errors.\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes covered by the access token.\n"
                                        items:
                                            type: "string"
                                    "subject":
                                        type: "string"
                                        description: "The subject (= resource owner's ID).\n"
                                    "token":
                                        type: "string"
                                        description: "The access token that came along with the userinfo request.\n"
                                    "properties":
                                        type: "array"
                                        description: "The extra properties associated with the access token.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                                "hidden":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                            type: "object"
                                            x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                    "userInfoClaims":
                                        type: "string"
                                        description: "The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.\n\nA client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.\nThere are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.\nIn both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the \"claims\"\nRequest Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).\n\nThe following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.\n\n```json\n{\n  \"userinfo\":\n  {\n    \"given_name\": { \"essential\": true },\n    \"nickname\": null,\n    \"email\": { \"essential\": true },\n    \"email_verified\": { \"essential\": true },\n    \"picture\": null,\n    \"http://example.info/claims/groups\": null\n  },\n  \"id_token\":\n  {\n    \"auth_time\": { \"essential\": true },\n    \"acr\": { \"values\": [ \"urn:mace:incommon:iap:silver\" ] }\n  }\n}\n````\n\nThe value of this property is the value of the `userinfo` property in JSON format.\nFor example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.\n\n```json\n{\n  \"given_name\": { \"essential\": true },\n  \"nickname\": null,\n  \"email\": { \"essential\": true },\n  \"email_verified\": { \"essential\": true },\n  \"picture\": null,\n  \"http://example.info/claims/groups\": null\n}\n```\n\nNote that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,\nthe value of this property holds the former value.\n"
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "consentedClaims":
                                        type: "array"
                                        description: "the claims that the user has consented for the client application\nto know.\n"
                                        items:
                                            type: "string"
                                    "requestedClaimsForTx":
                                        type: "array"
                                        description: "Get names of claims that are requested indirectly by <i>\"transformed\nclaims\"</i>.\n\n<p>\nA client application can request <i>\"transformed claims\"</i> by adding\nnames of transformed claims in the `claims` request parameter.\nThe following is an example of the `claims` request parameter\nthat requests a predefined transformed claim named `18_or_over`\nand a transformed claim named `nationality_usa` to be embedded\nin the response from the userinfo endpoint.\n</p>\n\n```json\n{\n  \"transformed_claims\": {\n    \"nationality_usa\": {\n      \"claim\": \"nationalities\",\n      \"fn\": [\n        [ \"eq\", \"USA\" ],\n        \"any\"\n      ]\n    }\n  },\n  \"userinfo\": {\n    \"::18_or_over\": null,\n    \":nationality_usa\": null\n  }\n}\n```\n\nThe example above assumes that a transformed claim named `18_or_over`\nis predefined by the authorization server like below.\n\n```json\n{\n  \"18_or_over\": {\n    \"claim\": \"birthdate\",\n    \"fn\": [\n      \"years_ago\",\n      [ \"gte\", 18 ]\n    ]\n  }\n}\n```\n\nIn the example, the `nationalities` claim is requested indirectly\nby the `nationality_usa` transformed claim. Likewise, the\n`birthdate` claim is requested indirectly by the `18_or_over`\ntransformed claim.\n\nWhen the `claims` request parameter of an authorization request is\nlike the example above, this `requestedClaimsForTx` property will\nhold the following value.\n\n```json\n[ \"birthdate\", \"nationalities\" ]\n```\n\nIt is expected that the authorization server implementation prepares values\nof the listed claims and passes them as the value of the `claimsForTx`\nrequest parameter when it calls the `/api/auth/userinfo/issue` API. The following\nis an example of the value of the `claimsForTx` request parameter.\n\n```json\n{\n  \"birthdate\": \"1970-01-23\",\n  \"nationalities\": [ \"DEU\", \"USA\" ]\n}\n```\n"
                                        items:
                                            type: "string"
                                    "requestedVerifiedClaimsForTx":
                                        type: "array"
                                        description: "Names of verified claims that will be referenced when transformed claims are computed.\n"
                                        items:
                                            type: "array"
                                            items:
                                                type: "string"
                                    "transformedClaims":
                                        type: "string"
                                        description: "the value of the `transformed_claims` property in the `claims` request\nparameter of an authorization request or in the `claims` property in a\nrequest object.\n"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                                    "dpopNonce":
                                        type: "string"
                                        description: "The expected nonce value for DPoP proof JWT, which should be used\nas the value of the `DPoP-Nonce` HTTP header.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A091001", "resultMessage": "[A091001] The access token presented at the userinfo endpoint is valid.", "action": "OK", "clientId": 15518267821, "clientIdAliasUsed": false, "scopes": ["openid"], "subject": "john", "token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/userinfo \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"token\": \"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nUserInfoRequest req = new UserInfoRequest();\nreq.setToken(\"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\");\n\napi.userinfo(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = UserInfoRequest()\nreq.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'\n\napi.userinfo(req)\n"}]
            x-stoplight: {"id": "xay6yojzi3zqk"}
    "/api/{serviceId}/auth/userinfo/issue":
        post:
            tags:
                - "UserInfo Endpoint"
            summary: "Issue UserInfo Response"
            description: "This API generates an ID token.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the [userinfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo)\nof the authorization server in order to generate an ID token. Before calling this API, a valid\nresponse from `/auth/userinfo` API must be obtained. Then, call this API with the access token\ncontained in the response and the claims values of the user (subject) associated with the access\ntoken. See **OK** written in the description of `/auth/userinfo` API for details.\n\nThe response from `/auth/userinfo/issue` API has various parameters. Among them, it is `action`\nparameter that the authorization server implementation should check first because it denotes the\nnext action that the authorization server implementation should take. According to the value of\n`action`, the service implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete. In either case, from the\nviewpoint of the client application, it is an error on the server side. Therefore, the service\nimplementation should generate a response to the client application with HTTP status of \"500 Internal\nServer Error\".\n\nThe parameter `responseContent` returns a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`\nheader.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 500 Internal Server Error\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\ndoes not contain an access token (= the request from the authorization server implementation to\nAuthlete does not contain `token` parameter).\n\nThe parameter `responseContent` returns a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`\nheader.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 400 Bad Request\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that the access token does not exist, has\nexpired, or is not associated with any subject (= any user account).\n\nThe parameter `responseContent` returns a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`\nheader.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**FORBIDDEN**\n\nWhen the value of `action` is `FORBIDDEN`, it means that the access token does not include the\n`openid` scope.\n\nThe parameter `responseContent` returns a string which describes the error in the format of [RFC\n6750](https://datatracker.ietf.org/doc/html/rfc6750) (OAuth 2.0 Bearer Token Usage) so the userinfo\nendpoint implementation can use the value of `responseContent` as the value of`WWW-Authenticate`\nheader.\n\nThe following is an example response which complies with RFC 6750. Note that OpenID Connect Core\n1.0 requires that an error response from userinfo endpoint comply with RFC 6750. See [5.3.3. UserInfo\nResponse](https://openid.net/specs/openid-connect-core-1_0.html#UserInfoError) for details.\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: {responseContent}\nCache-Control: no-store\nPragma: no-cache\n```\n\n**JSON**\n\nWhen the value of `action` is `JSON`, it means that the access token which the client application\npresented is valid and an ID token was successfully generated in the format of JSON.\n\nThe userinfo endpoint implementation is expected to generate a response to the client application.\nThe content type of the response must be `application/json` and the response body must be an ID\ntoken in JSON format.\n\nThe value of `responseContent` is the ID token in JSON format when `action` is `JSON`, so\na response to the client can be built like below.\n\n```\nHTTP/1.1 200 OK\nCache-Control: no-store\nPragma: no-cache\nContent-Type: application/json;charset=UTF-8\n\n{responseContent}\n```\n\n**JWT**\n\nWhen the value of `action` is `JWT`, it means that the access token which the client application\npresented is valid and an ID token was successfully generated in the format of JWT (JSON Web Token)\n([RFC 7519](https://datatracker.ietf.org/doc/html/rfc7519)).\n\nThe userinfo endpoint implementation is expected to generate a response to the client application.\nThe content type of the response must be `application/jwt` and the response body must be an ID\ntoken in JWT format.\n\nThe value of `responseContent` is the ID token in JSON format when `action` is `JWT`, so a response\nto the client can be built like below.\n\n```\nHTTP/1.1 200 OK\nCache-Control: no-store\nPragma: no-cache\nContent-Type: application/jwt\n\n{responseContent}\n```\n\n</details>\n"
            operationId: "auth_userinfo_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "token":
                                    type: "string"
                                    description: "The access token that has been passed to the userinfo endpoint by the client application. In other words,\nthe access token which was contained in the userinfo request.\n"
                                "claims":
                                    type: "string"
                                    description: "Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).\n"
                                "sub":
                                    type: "string"
                                    description: "The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of\nthe `sub` claim. Otherwise, the value of the subject associated with the access token is used.\n"
                                "claimsForTx":
                                    type: "string"
                                    description: "Claim key-value pairs that are used to compute transformed claims.\n"
                                "requestSignature":
                                    type: "string"
                                    description: "The Signature header value from the request.\n"
                                "headers":
                                    type: "array"
                                    description: "HTTP headers to be included in processing the signature. If this is a signed request, this must include the \nSignature and Signature-Input headers, as well as any additional headers covered by the signature.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                        type: "object"
                                        x-stoplight: {"id": "n57wymw8an6im"}
                            required:
                                - "token"
                        examples:
                            "default":
                                value: {"token": "Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "JSON"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation can use as the value of `WWW-Authenticate`\nheader on errors.\n"
                                    "signature":
                                        type: "string"
                                        description: "The signature header of the response message.\n"
                                    "signatureInput":
                                        type: "string"
                                        description: "The signature-input header of the response message\n"
                                    "contentDigest":
                                        type: "string"
                                        description: "The content-digest header of the response message\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A096001", "resultMessage": "[A096001] An ID token was generated successfully.", "action": "JSON", "responseContent": "{\\\"exp\\\":1511600971,\\\"sub\\\":\\\"john\\\",\\\"aud\\\":[\\\"26478243745571\\\"],\\\"iss\\\":\\\"https://authlete.com\\\",\\\"iat\\\":1511514571}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/userinfo/issue \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"token\": \"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nUserInfoIssueRequest req = new UserInfoIssueRequest();\nreq.setToken(\"Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI\");\n\napi.userinfoIssue(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = UserInfoIssueRequest()\nreq.token = 'Ntm9MDb8WXQAevqrBkd84KTTHbYHVQrTjgUZCOWqEUI'\n\napi.userinfoIssue(req)\n"}]
            x-stoplight: {"id": "j9e5yr8x86tcu"}
    "/api/{serviceId}/idtoken/reissue":
        post:
            tags:
                - "Token Endpoint"
            summary: "Reissue ID Token"
            description: "The API is expected to be called only when the value of the `action`\nparameter in a response from the `/auth/token` API is [ID_TOKEN_REISSUABLE](https://authlete.github.io/authlete-java-common/com/authlete/common/dto/TokenResponse.Action.html#ID_TOKEN_REISSUABLE). The purpose\nof the `/idtoken/reissue` API is to generate a token response that\nincludes a new ID token together with a new access token and a refresh\ntoken.\n"
            operationId: "idtoken_reissue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "<p>\nThe value of this parameter should be (a) the value of the\n\"`jwtAccessToken`\" parameter in a response from the\n`/auth/token` API when the value is available, or (b)\nthe value of the \"`accessToken`\" parameter in the\nresponse from the `/auth/token` API when the value of\nthe \"`jwtAccessToken`\" parameter is not available.\n</p>\n"
                                "refreshToken":
                                    type: "string"
                                    description: "<p>\nThe value of this parameter should be the value of the\n\"`refreshToken`\" parameter in a response from the\n`/auth/token` API.\n</p>\n"
                                "sub":
                                    type: "string"
                                    description: "The value that should be used as the value of the \"`sub`\"\nclaim of the ID token.\n\n<p>\nThis parameter is optional. When omitted, the value of the subject\nassociated with the access token is used.\n</p>\n"
                                "claims":
                                    type: "string"
                                    description: "Additional claims that should be embedded in the payload part of\nthe ID token. The format is a JSON object.\n\n<p>\nThis parameter is optional.\n</p>\n"
                                "idtHeaderParams":
                                    type: "string"
                                    description: "Additional parameters that should be embedded in the JWS header of\nthe ID token. The format is a JSON object.\n\n<p>\nThis parameter is optional.\n</p>\n"
                                "idTokenAudType":
                                    type: "string"
                                    description: "The type of the \"`aud`\" claim of the ID token being issued.\n\n<p>\nValid values of this parameter are as follows.\n</p>\n\n<blockquote>\n<table border=\"1\" cellpadding=\"5\" style=\"border-collapse: collapse;\">\n  <tr bgcolor=\"orange\">\n    <th>Value</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>\"`array`\"</td>\n    <td>The type of the `aud` claim becomes an array of strings.</td>\n  </tr>\n  <tr>\n    <td>\"`string`\"</td>\n    <td>The type of the `aud` claim becomes a single string.</td>\n  </tr>\n</table>\n</blockquote>\n\n<p>\nThis parameter is optional, and the default value on omission is\n\"`array`\".\n</p>\n\n<p>\nThis parameter takes precedence over the `idTokenAudType` property\nof {@link Service} (cf. {@link Service#getIdTokenAudType()}).\n</p>\n"
                            required:
                                - "accessToken"
                                - "refreshToken"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "INTERNAL_SERVER_ERROR"
                                            - "CALLER_ERROR"
                                        description: "The next action that the implementation of the token endpoint should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The response content that can be used as the message body of the token response that should\nbe returned from the token endpoint.\n"
                                    "idToken":
                                        type: "string"
                                        description: "The reissued ID token\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "o76xpdy060dgp"}
    "/api/{serviceId}/gm":
        post:
            tags:
                - "Grant Management Endpoint"
            summary: "Process Grant Management Request"
            description: "The API is for the implementation of the grant management endpoint which is\ndefined in \"<a href=\"https://openid.net/specs/fapi-grant-management.html\">Grant Management for OAuth 2.0</a>\".\n"
            operationId: "grant_m_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "An access token to introspect."
                                "scopes":
                                    type: "array"
                                    description: "A string array listing names of scopes which the caller (= a protected resource endpoint of the\nservice) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,\nthe format of `scopes` is a space-separated list of scope names.\n\nIf this parameter is a non-empty array and if it contains a scope which is not covered by the\naccess token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.\n"
                                    items:
                                        type: "string"
                                "subject":
                                    type: "string"
                                    description: "A subject (= a user account managed by the service) whom the caller (= a protected resource\nendpoint of the service) requires.\n\nIf this parameter is not `null` and if the value does not match the subject who is associated\nwith the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "Client certificate in PEM format, used to validate binding against access tokens using the TLS\nclient certificate confirmation method.\n"
                                "dpop":
                                    type: "string"
                                    description: "`DPoP` header presented by the client during the request to the resource server.\n\nThe header contains a signed JWT which includes the public key that is paired with the private\nkey used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application\nLayer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.\n"
                                "htm":
                                    type: "string"
                                    description: "HTTP method of the request from the client to the protected resource endpoint. This field is\nused to validate the `DPoP` header.\n\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "htu":
                                    type: "string"
                                    description: "URL of the protected resource endpoint. This field is used to validate the `DPoP` header.\n\nSee [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)\nfor details.\n"
                                "resources":
                                    type: "array"
                                    description: "The resources specified by the `resource` request parameters in the token request. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                    items:
                                        type: "string"
                                "gmAction":
                                    enum:
                                        - "CREATE"
                                        - "QUERY"
                                        - "REPLACE"
                                        - "REVOKE"
                                        - "MERGE"
                                    type: "string"
                                    description: "The grant management action of the device authorization request.\n\nThe `grant_management_action` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n"
                                "grantId":
                                    type: "string"
                                    description: "The value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                        examples:
                            "default":
                                value: {"token": "", "accessToken": "eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA", "subject": "123457884", "grantId": "57297408867", "gmAction": "REVOKE"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NO_CONTENT"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "NOT_FOUND"
                                            - "CALLER_ERROR"
                                            - "AUTHLETE_ERROR"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "dpopNonce":
                                        type: "string"
                                        description: "Get the expected nonce value for DPoP proof JWT, which should be used\nas the value of the `DPoP-Nonce` HTTP header.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "x2bzb8vhlszrg"}
    "/api/{serviceId}/service/jwks/get":
        get:
            tags:
                - "JWK Set Endpoint"
            summary: "Get JWK Set"
            description: "This API gathers JWK Set information for a service so that its client applications can verify\nsignatures by the service and encrypt their requests to the service.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the jwk set endpoint of the\nservice where the service that supports OpenID Connect must expose its JWK Set information so that\nclient applications can verify signatures by the service and encrypt their requests to the service.\nThe URI of the endpoint can be found as the value of `jwks_uri` in [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\nif the service supports [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html).\n\n</details>\n"
            operationId: "service_jwks_get_api"
            parameters:
                - name: "includePrivateKeys"
                  in: "query"
                  description: "The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`."
                  required: false
                  schema:
                    type: "boolean"
                - name: "pretty"
                  in: "query"
                  description: "This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`."
                  required: false
                  schema:
                    type: "boolean"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "keys":
                                        type: "array"
                                        description: "An array of [JWK](https://datatracker.ietf.org/doc/html/rfc7517)s."
                                        items:
                                            type: "object"
                                            description: "An object representing JWK. See [RFC 7517](https://datatracker.ietf.org/doc/html/rfc7517) for more details.\n"
                            examples:
                                "default":
                                    value: {"keys": [{"e": "AQAB", "n": "kVXi0XB8LGYZfFPXymaszWjBQsO22tasQH3PEiPeLSymBHbp7PtqM8O8xblqhbxV-24lKNs2zDugQaBiVt4zpalyYxL5kqnfY247priZRfmeUatdECh81T-i3VcLpz_M5yfljfVp3sFdaURUQNA3ow9VtUfvPIxN_9YIxXN1zP2nLP5amC2XA8xMt5iubRwbbPbrLyg69zTOzosDVhRTSs5adHK5HNwVn8wCCZPbU7u1cQD8hFNn8xlQcmOmJjSXUQ9slBpLc7G-dUEOI59RxiPd4R44GtSe8gA1WFXvOAdtGjivSm8BAbxuNO8HFtDJmpVl9YsDr9FsxirFl9ZPKs", "kty": "RSA", "use": "sig", "kid": "rsa-sig-001"}, {"e": "AQAB", "n": "lQui3_DlrkLs_dyaOQBOclphIIRTTMo0gNlnAgfEM9xjbYQJQzi0CLtO6eseecE3HtvDBWVTw-rMM_NMJTlPTO0_ODWvmJRjXy9DZGEm05LFd_qr6jZ7cdOvjD7zUC3GI9TIokPbjGzueBPJjtAvv_tAazRFCQQfiFy7sQR3u-J4tM8fNo9szo9H09R_eA29llZ3hU39JDKs9nzG60I1mVZtJYPx0_bnO8eYeVDHqoj4SZ4jeru3iX9iDeccH_cDm3M87UomUh-Ri4LlAxXgewDvOaPxAef9ADkDvBVmRo5t60_PJxQ3Tug2EKK-xF1_T7I4TxgS7ga8entMmCxLca", "kty": "RSA", "use": "enc", "kid": "rsa-enc-001"}, {"crv": "P-256", "kty": "EC", "use": "sig", "y": "824At71mYpbGK2oOCKAL1Z2scLPrbVwhM882v3a9gBq", "x": "ZXE3h9BxCyyb_Z9ZJ5qH4Vx650y09qwI1EpZO4o4OmL", "kid": "ec256-sig-001"}, {"crv": "P-256", "kty": "EC", "use": "enc", "y": "j80Y3leZHHnxC_gN-Ols_l_VfEBQkfGDFFDG5LNJKMl", "x": "xAdEkaExYWGGAC1xYjwxzvqcaCyDloylZk04yiE9_OF", "kid": "ec256-enc-001"}]}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/service/jwks/get?pretty=true \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nboolean pretty = true;\nboolean includePrivateKey = false;\n\napi.getServiceJwks(pretty, includePrivateKey);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\npretty = True\nincludePrivateKey = False\n\napi.getServiceJwks(pretty, includePrivateKey)\n"}]
            x-stoplight: {"id": "3cyhxyrogmj10"}
    "/api/{serviceId}/service/configuration":
        get:
            tags:
                - "Service Management"
            summary: "Get Service Configuration"
            description: "This API gathers configuration information about a service.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the configuration endpoint of\nthe service where the service that supports OpenID Connect and [OpenID Connect Discovery 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html)\nmust expose its configuration information in a JSON format. Details about the format are described\nin \"[3. OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\"\nin OpenID Connect Discovery 1.0.\n\n</details>\n"
            operationId: "service_configuration_api"
            parameters:
                - name: "pretty"
                  in: "query"
                  description: "This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`."
                  required: false
                  schema:
                    type: "boolean"
                - name: "patch"
                  in: "query"
                  description: "Get the JSON Patch [RFC 6902 JavaScript Object Notation (JSON) Patch](https://www.rfc-editor.org/rfc/rfc6902) to be applied."
                  required: false
                  schema:
                    type: "string"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                description: "An object representing OpenID Provider configuration information. See [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) and [OpenID Provider Configuration Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse) for more details.\n"
                            examples:
                                "default":
                                    value: {"issuer": "https://my-service.example.com", "authorization_endpoint": "https://my-service.example.com/authz", "token_endpoint": "https://my-service.example.com/token", "scopes_supported": ["history.read", "timeline.read"], "response_types_supported": ["code"], "response_modes_supported": ["query", "fragment", "form_post", "query.jwt", "fragment.jwt", "form_post.jwt", "jwt"], "grant_types_supported": ["authorization_code", "password", "refresh_token"], "subject_types_supported": ["public", "pairwise"], "id_token_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "id_token_encryption_alg_values_supported": ["RSA1_5", "RSA-OAEP", "RSA-OEAP-256", "ECDH-ES", "ECDH-ES+A128KW", "ECDH-ES+A192KW", "ECDH-ES+A256KW", "A128KW", "A192KW", "A256KW", "dir", "A128GCMKW", "A192GCMKW", "A256GCMKW", "PBES2-HS256+A128KW", "PBES2-HS384+A192KW", "PBES2-HS512+A256KW"], "id_token_encryption_enc_values_supported": ["A128CBC-HS256", "A192CBC-HS384", "A256CBC-HS512", "A128GCM", "A192GCM", "A256GCM"], "userinfo_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA", "none"], "userinfo_encryption_alg_values_supported": ["RSA1_5", "RSA-OAEP", "RSA-OEAP-256", "ECDH-ES", "ECDH-ES+A128KW", "ECDH-ES+A192KW", "ECDH-ES+A256KW", "A128KW", "A192KW", "A256KW", "dir", "A128GCMKW", "A192GCMKW", "A256GCMKW", "PBES2-HS256+A128KW", "PBES2-HS384+A192KW", "PBES2-HS512+A256KW"], "userinfo_encryption_enc_values_supported": ["A128CBC-HS256", "A192CBC-HS384", "A256CBC-HS512", "A128GCM", "A192GCM", "A256GCM"], "request_object_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "request_object_encryption_alg_values_supported": ["RSA1_5", "RSA-OAEP", "RSA-OEAP-256", "ECDH-ES", "ECDH-ES+A128KW", "ECDH-ES+A192KW", "ECDH-ES+A256KW", "A128KW", "A192KW", "A256KW", "dir", "A128GCMKW", "A192GCMKW", "A256GCMKW", "PBES2-HS256+A128KW", "PBES2-HS384+A192KW", "PBES2-HS512+A256KW"], "request_object_encryption_enc_values_supported": ["A128CBC-HS256", "A192CBC-HS384", "A256CBC-HS512", "A128GCM", "A192GCM", "A256GCM"], "authorization_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "authorization_encryption_alg_values_supported": ["RSA1_5", "RSA-OAEP", "RSA-OEAP-256", "ECDH-ES", "ECDH-ES+A128KW", "ECDH-ES+A192KW", "ECDH-ES+A256KW", "A128KW", "A192KW", "A256KW", "dir", "A128GCMKW", "A192GCMKW", "A256GCMKW", "PBES2-HS256+A128KW", "PBES2-HS384+A192KW", "PBES2-HS512+A256KW"], "authorization_encryption_enc_values_supported": ["A128CBC-HS256", "A192CBC-HS384", "A256CBC-HS512", "A128GCM", "A192GCM", "A256GCM"], "token_endpoint_auth_methods_supported": ["client_secret_basic"], "token_endpoint_auth_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "display_values_supported": ["page"], "claim_types_supported": ["normal"], "claims_parameter_supported": true, "request_parameter_supported": true, "request_uri_parameter_supported": true, "require_request_uri_registration": true, "revocation_endpoint": "https://my-service.example.com/revocation", "revocation_endpoint_auth_methods_supported": [], "revocation_endpoint_auth_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "introspection_endpoint": "https://my-service.example.com/introspection", "introspection_endpoint_auth_methods_supported": [], "introspection_endpoint_auth_signing_alg_values_supported": ["HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "code_challenge_methods_supported": ["plain", "S256"], "tls_client_certificate_bound_access_tokens": false, "backchannel_token_delivery_modes_supported": [], "backchannel_authentication_request_signing_alg_values_supported": ["RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "backchannel_user_code_parameter_supported": false, "require_pushed_authorization_requests": false, "authorization_details_supported": true, "verified_claims_supported": false, "dpop_signing_alg_values_supported": ["RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512", "ES256K", "EdDSA"], "require_signed_request_object": false, "authorization_response_iss_parameter_supported": true}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/service/configuration?pretty=true \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\napi.getServiceConfiguration(true);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\napi.getServiceConfiguration(True)\n"}]
            x-stoplight: {"id": "hyuk0suhigwv6"}
    "/api/{serviceId}/client/registration":
        post:
            tags:
                - "Dynamic Client Registration"
            summary: "Register Client"
            description: "Register a client. This API is supposed to be used to implement a client registration endpoint that\ncomplies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591) (OAuth 2.0 Dynamic Client\nRegistration Protocol).\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from the within the implementation of the client registration\nendpoint of the authorization server. The authorization server implementation should retrieve\nthe value of `action` from the response and take the following steps according to the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from a viewpoint of the client or developer, it is an error on the server side.\nTherefore, the authorization server implementation should generate a response with \"500 Internal\nServer Error\"s and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client or developer since\n\"500 Internal Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer\nwas wrong.\n\nThe authorization server implementation should generate a response with \"400 Bad Request\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**CREATED**\n\nWhen the value of `action` is `CREATED`, it means that the request from the client or developer is\nvalid.\n\nThe authorization server implementation should generate a response to the client or developer with\n\"201 CREATED\" and `application/json`.\n\nThe `responseContent` a JSON string which can be used as the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 201 CREATED\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "client_registration_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "json":
                                    type: "string"
                                    description: "Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)\n(OAuth 2.0 Dynamic Client Registration Protocol).\n"
                                "token":
                                    type: "string"
                                    description: "The client registration access token. Used only for GET, UPDATE, and DELETE requests.\n"
                                "clientId":
                                    type: "string"
                                    description: "The client's identifier. Used for GET, UPDATE, and DELETE requests\n"
                            required:
                                - "json"
                        examples:
                            "default":
                                value: {"json": "{ \"client_name\": \"My Dynamic Client\" }"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "CREATED"
                                        description: "The next action that the authorization server implementation should take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "client":
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "serviceNumber":
                                                type: "integer"
                                                description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "clientName":
                                                type: "string"
                                                description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientNames":
                                                type: "array"
                                                description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "description":
                                                type: "string"
                                                description: "The description about the client application."
                                            "descriptions":
                                                type: "array"
                                                description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientId":
                                                type: "integer"
                                                description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientSecret":
                                                type: "string"
                                                description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                                readOnly: true
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always set to `true`."
                                            "clientType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "CONFIDENTIAL"
                                                description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                            "applicationType":
                                                type: "string"
                                                enum:
                                                    - "WEB"
                                                    - "NATIVE"
                                                description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                                x-stoplight: {"id": "44dohgvzte9r5"}
                                            "logoUri":
                                                type: "string"
                                                description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "logoUris":
                                                type: "array"
                                                description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "contacts":
                                                type: "array"
                                                description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    type: "string"
                                            "tlsClientCertificateBoundAccessTokens":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                            "dynamicallyRegistered":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                readOnly: true
                                            "softwareId":
                                                type: "string"
                                                description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "softwareVersion":
                                                type: "string"
                                                description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "registrationAccessTokenHash":
                                                type: "string"
                                                description: "The hash of the registration access token for this client.\n"
                                            "createdAt":
                                                type: "integer"
                                                description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "modifiedAt":
                                                type: "integer"
                                                description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "grantTypes":
                                                type: "array"
                                                description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "AUTHORIZATION_CODE"
                                                        - "IMPLICIT"
                                                        - "PASSWORD"
                                                        - "CLIENT_CREDENTIALS"
                                                        - "REFRESH_TOKEN"
                                                        - "CIBA"
                                                        - "DEVICE_CODE"
                                                        - "TOKEN_EXCHANGE"
                                                        - "JWT_BEARER"
                                                    type: "string"
                                                    description: "The grant type of the access token when the access token was created.\n"
                                                    x-stoplight: {"id": "033u82mqvyogn"}
                                            "responseTypes":
                                                type: "array"
                                                description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "NONE"
                                                        - "CODE"
                                                        - "TOKEN"
                                                        - "ID_TOKEN"
                                                        - "CODE_TOKEN"
                                                        - "CODE_ID_TOKEN"
                                                        - "ID_TOKEN_TOKEN"
                                                        - "CODE_ID_TOKEN_TOKEN"
                                                    type: "string"
                                                    x-stoplight: {"id": "t7wed2d7tkpy7"}
                                            "redirectUris":
                                                type: "array"
                                                description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                                items:
                                                    type: "string"
                                            "authorizationSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "authorizationEncryptionAlg":
                                                type: "string"
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "authorizationEncryptionEnc":
                                                type: "string"
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "tokenAuthMethod":
                                                enum:
                                                    - "NONE"
                                                    - "CLIENT_SECRET_BASIC"
                                                    - "CLIENT_SECRET_POST"
                                                    - "CLIENT_SECRET_JWT"
                                                    - "PRIVATE_KEY_JWT"
                                                    - "TLS_CLIENT_AUTH"
                                                    - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                type: "string"
                                                description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "tokenAuthSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "selfSignedCertificateKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                            "tlsClientAuthSubjectDn":
                                                type: "string"
                                                description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanDns":
                                                type: "string"
                                                description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanUri":
                                                type: "string"
                                                description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanIp":
                                                type: "string"
                                                description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanEmail":
                                                type: "string"
                                                description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "parRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                            "requestObjectRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                            "requestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "requestEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "requestEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "requestUris":
                                                type: "array"
                                                description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                                items:
                                                    type: "string"
                                            "defaultMaxAge":
                                                type: "integer"
                                                description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                format: "int32"
                                            "defaultAcrs":
                                                type: "array"
                                                description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                                items:
                                                    type: "string"
                                            "idTokenSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "idTokenEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "idTokenEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "authTimeRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "subjectType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "PAIRWISE"
                                                description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "zm5yes2y915ld"}
                                            "sectorIdentifierUri":
                                                type: "string"
                                                description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                            "derivedSectorIdentifier":
                                                type: "string"
                                                description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                                readOnly: true
                                            "jwksUri":
                                                type: "string"
                                                description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "jwks":
                                                type: "string"
                                                description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "userInfoSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "userInfoEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "userInfoEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "loginUri":
                                                type: "string"
                                                description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUri":
                                                type: "string"
                                                description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUris":
                                                type: "array"
                                                description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "policyUri":
                                                type: "string"
                                                description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "policyUris":
                                                type: "array"
                                                description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientUri":
                                                type: "string"
                                                description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientUris":
                                                type: "array"
                                                description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "bcDeliveryMode":
                                                type: "string"
                                                description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcNotificationEndpoint":
                                                type: "string"
                                                description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcRequestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "bcUserCodeRequired":
                                                type: "boolean"
                                                description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of this client.\n"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                            "extension":
                                                type: "object"
                                                properties:
                                                    "requestableScopes":
                                                        type: "array"
                                                        description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                        items:
                                                            type: "string"
                                                    "requestableScopesEnabled":
                                                        type: "boolean"
                                                        description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                                    "accessTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "refreshTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "idTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "tokenExchangePermitted":
                                                        type: "boolean"
                                                        description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                                x-stoplight: {"id": "0h8bpbau8xawc"}
                                            "authorizationDetailsTypes":
                                                type: "array"
                                                description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                                items:
                                                    type: "string"
                                            "customMetadata":
                                                type: "string"
                                                description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                            "frontChannelRequestObjectEncryptionRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionAlgMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionEncMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                            "digestAlgorithm":
                                                type: "string"
                                                description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                            "singleAccessTokenPerSubject":
                                                type: "boolean"
                                                description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                            "pkceRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                            "pkceS256Required":
                                                type: "boolean"
                                                description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                            "dpopRequired":
                                                type: "boolean"
                                                description: "If the DPoP is required for this client\n"
                                            "automaticallyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                            "explicitlyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                            "rsRequestSigned":
                                                type: "boolean"
                                                description: "The flag indicating whether this service signs responses from the resource server.\n"
                                            "rsSignedRequestKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                            "clientRegistrationTypes":
                                                type: "array"
                                                description: "The client registration types that the client has declared it may use.\n"
                                                items:
                                                    enum:
                                                        - "AUTOMATIC"
                                                        - "EXPLICIT"
                                                    type: "string"
                                                    description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                            "organizationName":
                                                type: "string"
                                                description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                            "signedJwksUri":
                                                type: "string"
                                                description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of this client.\n"
                                            "trustAnchorId":
                                                type: "string"
                                                description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                            "trustChain":
                                                type: "array"
                                                description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                                items:
                                                    type: "string"
                                            "trustChainExpiresAt":
                                                type: "integer"
                                                description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                                format: "int64"
                                            "trustChainUpdatedAt":
                                                type: "integer"
                                                description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                                format: "int64"
                                            "locked":
                                                type: "boolean"
                                                description: "The flag which indicates whether this client is locked.\n"
                                            "credentialOfferEndpoint":
                                                type: "string"
                                                description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                            "fapiModes":
                                                type: "array"
                                                description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                                items:
                                                    enum:
                                                        - "FAPI1_ADVANCED"
                                                        - "FAPI1_BASELINE"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                        - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                        - "FAPI2_SECURITY"
                                                    type: "string"
                                            "responseModes":
                                                type: "array"
                                                description: "The response modes that this client may use."
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "QUERY"
                                                        - "FRAGMENT"
                                                        - "FORM_POST"
                                                        - "JWT"
                                                        - "QUERY_JWT"
                                                        - "FRAGMENT_JWT"
                                                        - "FORM_POST_JWT"
                                            "credentialResponseEncryptionRequired":
                                                type: "boolean"
                                                description: "True if credential responses to this client must be always encrypted."
                                        type: "object"
                                        x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "default":
                                    value: {"resultCode": "A202001", "resultMessage": "[A202001] The client was created with id 26837717140341.", "action": "CREATED", "client": {"authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26837717140341, "clientIdAliasEnabled": false, "clientName": "My Dynamic Client", "clientSecret": "bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw", "clientType": "CONFIDENTIAL", "createdAt": 1641735467000, "defaultMaxAge": 0, "developer": "authlete_21653835348762", "dynamicallyRegistered": true, "frontChannelRequestObjectEncryptionRequired": false, "idTokenSignAlg": "RS256", "modifiedAt": 1641735467013, "number": 6248, "parRequired": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}, "responseContent": "{\\\"default_max_age\\\":0,\\\"registration_client_uri\\\":\\\"https://my-service.example.com/dcr/register/26837717140341\\\",\\\"registration_access_token\\\":\\\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\\\",\\\"client_id\\\":\\\"26837717140341\\\",\\\"token_endpoint_auth_method\\\":\\\"client_secret_basic\\\",\\\"require_pushed_authorization_requests\\\":false,\\\"backchannel_user_code_parameter\\\":false,\\\"client_secret\\\":\\\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\\\",\\\"client_id_issued_at\\\":1641735467,\\\"tls_client_certificate_bound_access_tokens\\\":false,\\\"client_name\\\":\\\"My Dynamic Client\\\",\\\"id_token_signed_response_alg\\\":\\\"RS256\\\",\\\"subject_type\\\":\\\"public\\\",\\\"client_secret_expires_at\\\":0,\\\"require_signed_request_object\\\":false}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"json\": \"{ \\\"client_name\\\": \\\"My Dynamic Client\\\" }\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nClientRegistrationRequest req = new ClientRegistrationRequest();\nreq.setJson(...);\n\napi.dynamicClientRegister(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = new ClientRegistrationRequest()\nreq.json = '...'\n\napi.dynamicClientRegister(req)\n"}]
            x-stoplight: {"id": "y9ttl9v9etsr2"}
    "/api/{serviceId}/client/registration/get":
        post:
            tags:
                - "Dynamic Client Registration"
            summary: "Get Client"
            description: "Get a dynamically registered client. This API is supposed to be used to implement a client registration\nmanagement endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)\n(OAuth 2.0 Dynamic Registration Management).\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from the within the implementation of the client registration\nmanagement endpoint of the authorization server. The authorization server implementation should\nretrieve the value of `action` from the response and take the following steps according to the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from a viewpoint of the client or developer, it is an error on the server side.\nTherefore, the authorization server implementation should generate a response to the client or developer\nwith \"500 Internal Server Error\"s and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client or developer since\n\"500 Internal Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer\nwas wrong.\n\nThe authorization server implementation should generate a response to the client or developer with\n\"400 Bad Request\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by\nthe client configuration request (RFC 7592) is invalid, or the client application which the token\nis tied to does not exist any longer or is invalid.\n\nThe HTTP status of the response returned to the client application must be \"401 Unauthorized\" and\nthe content type must be `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the endpoint implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nNOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of\n`Service.unauthorizedOnClientConfigSupported` for details.\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the request from the client or developer is valid.\n\nThe authorization server implementation should generate a response to the client or developer with\n\"200 OK\" and `application/json`.\n\nThe `responseContent` a JSON string which can be used as the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "client_registration_get_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
                        examples:
                            "default":
                                value: {"clientId": "26837717140341", "json": "", "token": "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA", "clientLocked": false}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A217001", "clientLocked": false, "resultMessage": "[A217001] The client information has been returned.", "action": "CREATED", "client": {"authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26837717140341, "clientIdAliasEnabled": false, "clientName": "My Dynamic Client", "clientSecret": "bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw", "clientType": "CONFIDENTIAL", "createdAt": 1641735467000, "defaultMaxAge": 0, "developer": "authlete_21653835348762", "dynamicallyRegistered": true, "frontChannelRequestObjectEncryptionRequired": false, "idTokenSignAlg": "RS256", "modifiedAt": 1641735467000, "number": 6248, "parRequired": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}, "responseContent": "{\\\"default_max_age\\\":0,\\\"registration_client_uri\\\":\\\"https://my-service.example.com/dcr/register/26837717140341\\\",\\\"registration_access_token\\\":\\\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\\\",\\\"client_id\\\":\\\"26837717140341\\\",\\\"token_endpoint_auth_method\\\":\\\"client_secret_basic\\\",\\\"require_pushed_authorization_requests\\\":false,\\\"backchannel_user_code_parameter\\\":false,\\\"client_secret\\\":\\\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\\\",\\\"client_id_issued_at\\\":1641735467,\\\"tls_client_certificate_bound_access_tokens\\\":false,\\\"client_name\\\":\\\"My Dynamic Client\\\",\\\"id_token_signed_response_alg\\\":\\\"RS256\\\",\\\"subject_type\\\":\\\"public\\\",\\\"client_secret_expires_at\\\":0,\\\"require_signed_request_object\\\":false}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration/get \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"clientId\": \"26837717140341\", \"token\": \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nClientRegistrationRequest req = new ClientRegistrationRequest();\nreq.setClientId(\"26837717140341\");\nreq.setToken(\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\");\n\napi.dynamicClientGet(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = new ClientRegistrationRequest()\nreq.clientId = '26837717140341'\nreq.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'\n\napi.dynamicClientGet(req)\n"}]
            x-stoplight: {"id": "zfx8l5r6djnua"}
    "/api/{serviceId}/client/registration/update":
        post:
            tags:
                - "Dynamic Client Registration"
            summary: "Update Client"
            description: "Update a dynamically registered client. This API is supposed to be used to implement a client\nregistration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)\n(OAuth 2.0 Dynamic Registration Management).\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from the within the implementation of the client registration\nmanagement endpoint of the authorization server. The authorization server implementation should\nretrieve the value of `action` from the response and take the following steps according to the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from a viewpoint of the client or developer, it is an error on the server side.\nTherefore, the authorization server implementation should generate a response with \"500 Internal\nServer Error\"s and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client or developer since\n\"500 Internal Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer\nwas wrong.\n\nThe authorization server implementation should generate a response with \"400 Bad Request\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by\nthe client configuration request (RFC 7592) is invalid, or the client application which the token\nis tied to does not exist any longer or is invalid.\n\nThe HTTP status of the response returned to the client application must be \"401 Unauthorized\" and\nthe content type must be `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the endpoint implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nNOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of\n`Service.unauthorizedOnClientConfigSupported` for details.\n\n**UPDATED**\n\nWhen the value of `action` is `UPDATED`, it means that the request from the client or developer is\nvalid.\n\nThe authorization server implementation should generate a response to the client or developer with\n\"200 OK\" and `application/json`.\n\nThe `responseContent` a JSON string which can be used as the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "client_registration_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "clientId":
                                    type: "string"
                                    description: "Client ID.\n"
                                "token":
                                    type: "string"
                                    description: "Client registration access token.\n"
                                "json":
                                    type: "string"
                                    description: "Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)\n(OAuth 2.0 Dynamic Client Registration Protocol).\n"
                            required:
                                - "clientId"
                                - "token"
                                - "json"
                        examples:
                            "default":
                                value: {"clientId": "26837717140341", "token": "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA", "json": "{\"client_name\":\"My Updated Dynamic Client\",\"default_max_age\":0,\"registration_client_uri\":\"https://my-service.example.com/dcr/register/26837717140341\",\"client_id\":\"26837717140341\",\"token_endpoint_auth_method\":\"client_secret_basic\",\"require_pushed_authorization_requests\":false,\"backchannel_user_code_parameter\":false,\"client_secret\":\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\",\"tls_client_certificate_bound_access_tokens\":false,\"id_token_signed_response_alg\":\"RS256\",\"subject_type\":\"public\",\"require_signed_request_object\":false}"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "UPDATED"
                                            - "UNAUTHORIZED"
                                        description: "The next action that the authorization server implementation should take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "client":
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "serviceNumber":
                                                type: "integer"
                                                description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "clientName":
                                                type: "string"
                                                description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientNames":
                                                type: "array"
                                                description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "description":
                                                type: "string"
                                                description: "The description about the client application."
                                            "descriptions":
                                                type: "array"
                                                description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientId":
                                                type: "integer"
                                                description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientSecret":
                                                type: "string"
                                                description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                                readOnly: true
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always set to `true`."
                                            "clientType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "CONFIDENTIAL"
                                                description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                            "applicationType":
                                                type: "string"
                                                enum:
                                                    - "WEB"
                                                    - "NATIVE"
                                                description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                                x-stoplight: {"id": "44dohgvzte9r5"}
                                            "logoUri":
                                                type: "string"
                                                description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "logoUris":
                                                type: "array"
                                                description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "contacts":
                                                type: "array"
                                                description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    type: "string"
                                            "tlsClientCertificateBoundAccessTokens":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                            "dynamicallyRegistered":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                readOnly: true
                                            "softwareId":
                                                type: "string"
                                                description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "softwareVersion":
                                                type: "string"
                                                description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "registrationAccessTokenHash":
                                                type: "string"
                                                description: "The hash of the registration access token for this client.\n"
                                            "createdAt":
                                                type: "integer"
                                                description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "modifiedAt":
                                                type: "integer"
                                                description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "grantTypes":
                                                type: "array"
                                                description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "AUTHORIZATION_CODE"
                                                        - "IMPLICIT"
                                                        - "PASSWORD"
                                                        - "CLIENT_CREDENTIALS"
                                                        - "REFRESH_TOKEN"
                                                        - "CIBA"
                                                        - "DEVICE_CODE"
                                                        - "TOKEN_EXCHANGE"
                                                        - "JWT_BEARER"
                                                    type: "string"
                                                    description: "The grant type of the access token when the access token was created.\n"
                                                    x-stoplight: {"id": "033u82mqvyogn"}
                                            "responseTypes":
                                                type: "array"
                                                description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "NONE"
                                                        - "CODE"
                                                        - "TOKEN"
                                                        - "ID_TOKEN"
                                                        - "CODE_TOKEN"
                                                        - "CODE_ID_TOKEN"
                                                        - "ID_TOKEN_TOKEN"
                                                        - "CODE_ID_TOKEN_TOKEN"
                                                    type: "string"
                                                    x-stoplight: {"id": "t7wed2d7tkpy7"}
                                            "redirectUris":
                                                type: "array"
                                                description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                                items:
                                                    type: "string"
                                            "authorizationSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "authorizationEncryptionAlg":
                                                type: "string"
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "authorizationEncryptionEnc":
                                                type: "string"
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "tokenAuthMethod":
                                                enum:
                                                    - "NONE"
                                                    - "CLIENT_SECRET_BASIC"
                                                    - "CLIENT_SECRET_POST"
                                                    - "CLIENT_SECRET_JWT"
                                                    - "PRIVATE_KEY_JWT"
                                                    - "TLS_CLIENT_AUTH"
                                                    - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                type: "string"
                                                description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "tokenAuthSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "selfSignedCertificateKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                            "tlsClientAuthSubjectDn":
                                                type: "string"
                                                description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanDns":
                                                type: "string"
                                                description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanUri":
                                                type: "string"
                                                description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanIp":
                                                type: "string"
                                                description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanEmail":
                                                type: "string"
                                                description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "parRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                            "requestObjectRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                            "requestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "requestEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "requestEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "requestUris":
                                                type: "array"
                                                description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                                items:
                                                    type: "string"
                                            "defaultMaxAge":
                                                type: "integer"
                                                description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                format: "int32"
                                            "defaultAcrs":
                                                type: "array"
                                                description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                                items:
                                                    type: "string"
                                            "idTokenSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "idTokenEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "idTokenEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "authTimeRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "subjectType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "PAIRWISE"
                                                description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "zm5yes2y915ld"}
                                            "sectorIdentifierUri":
                                                type: "string"
                                                description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                            "derivedSectorIdentifier":
                                                type: "string"
                                                description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                                readOnly: true
                                            "jwksUri":
                                                type: "string"
                                                description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "jwks":
                                                type: "string"
                                                description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "userInfoSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "userInfoEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "userInfoEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "loginUri":
                                                type: "string"
                                                description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUri":
                                                type: "string"
                                                description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUris":
                                                type: "array"
                                                description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "policyUri":
                                                type: "string"
                                                description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "policyUris":
                                                type: "array"
                                                description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientUri":
                                                type: "string"
                                                description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientUris":
                                                type: "array"
                                                description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "bcDeliveryMode":
                                                type: "string"
                                                description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcNotificationEndpoint":
                                                type: "string"
                                                description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcRequestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "bcUserCodeRequired":
                                                type: "boolean"
                                                description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of this client.\n"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                            "extension":
                                                type: "object"
                                                properties:
                                                    "requestableScopes":
                                                        type: "array"
                                                        description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                        items:
                                                            type: "string"
                                                    "requestableScopesEnabled":
                                                        type: "boolean"
                                                        description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                                    "accessTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "refreshTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "idTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "tokenExchangePermitted":
                                                        type: "boolean"
                                                        description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                                x-stoplight: {"id": "0h8bpbau8xawc"}
                                            "authorizationDetailsTypes":
                                                type: "array"
                                                description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                                items:
                                                    type: "string"
                                            "customMetadata":
                                                type: "string"
                                                description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                            "frontChannelRequestObjectEncryptionRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionAlgMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionEncMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                            "digestAlgorithm":
                                                type: "string"
                                                description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                            "singleAccessTokenPerSubject":
                                                type: "boolean"
                                                description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                            "pkceRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                            "pkceS256Required":
                                                type: "boolean"
                                                description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                            "dpopRequired":
                                                type: "boolean"
                                                description: "If the DPoP is required for this client\n"
                                            "automaticallyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                            "explicitlyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                            "rsRequestSigned":
                                                type: "boolean"
                                                description: "The flag indicating whether this service signs responses from the resource server.\n"
                                            "rsSignedRequestKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                            "clientRegistrationTypes":
                                                type: "array"
                                                description: "The client registration types that the client has declared it may use.\n"
                                                items:
                                                    enum:
                                                        - "AUTOMATIC"
                                                        - "EXPLICIT"
                                                    type: "string"
                                                    description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                            "organizationName":
                                                type: "string"
                                                description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                            "signedJwksUri":
                                                type: "string"
                                                description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of this client.\n"
                                            "trustAnchorId":
                                                type: "string"
                                                description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                            "trustChain":
                                                type: "array"
                                                description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                                items:
                                                    type: "string"
                                            "trustChainExpiresAt":
                                                type: "integer"
                                                description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                                format: "int64"
                                            "trustChainUpdatedAt":
                                                type: "integer"
                                                description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                                format: "int64"
                                            "locked":
                                                type: "boolean"
                                                description: "The flag which indicates whether this client is locked.\n"
                                            "credentialOfferEndpoint":
                                                type: "string"
                                                description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                            "fapiModes":
                                                type: "array"
                                                description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                                items:
                                                    enum:
                                                        - "FAPI1_ADVANCED"
                                                        - "FAPI1_BASELINE"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                        - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                        - "FAPI2_SECURITY"
                                                    type: "string"
                                            "responseModes":
                                                type: "array"
                                                description: "The response modes that this client may use."
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "QUERY"
                                                        - "FRAGMENT"
                                                        - "FORM_POST"
                                                        - "JWT"
                                                        - "QUERY_JWT"
                                                        - "FRAGMENT_JWT"
                                                        - "FORM_POST_JWT"
                                            "credentialResponseEncryptionRequired":
                                                type: "boolean"
                                                description: "True if credential responses to this client must be always encrypted."
                                        type: "object"
                                        x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "default":
                                    value: {"resultCode": "A213001", "resultMessage": "[A213001] The client has been updated.", "action": "UPDATED", "client": {"authTimeRequired": false, "bcUserCodeRequired": false, "clientId": 26837717140341, "clientIdAliasEnabled": false, "clientName": "My Updated Dynamic Client", "clientSecret": "bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw", "clientType": "CONFIDENTIAL", "createdAt": 1641735467000, "defaultMaxAge": 0, "developer": "authlete_21653835348762", "dynamicallyRegistered": true, "frontChannelRequestObjectEncryptionRequired": false, "idTokenSignAlg": "RS256", "modifiedAt": 1641826276936, "number": 6248, "parRequired": false, "requestObjectEncryptionAlgMatchRequired": false, "requestObjectEncryptionEncMatchRequired": false, "requestObjectRequired": false, "serviceNumber": 5041, "subjectType": "PUBLIC", "tlsClientCertificateBoundAccessTokens": false, "tokenAuthMethod": "CLIENT_SECRET_BASIC"}, "responseContent": "{\\\"default_max_age\\\":0,\\\"registration_client_uri\\\":\\\"https://my-service.example.com/dcr/register/26837717140341\\\",\\\"registration_access_token\\\":\\\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\\\",\\\"client_id\\\":\\\"26837717140341\\\",\\\"token_endpoint_auth_method\\\":\\\"client_secret_basic\\\",\\\"require_pushed_authorization_requests\\\":false,\\\"backchannel_user_code_parameter\\\":false,\\\"client_secret\\\":\\\"bMsjvZm2FE1_mqJgxhmYj_Wr8rA0Pia_A_j-V076qQm6-P1edKB055W579GBe7MSbOdxZ3dJKsKinCtdIFwxpw\\\",\\\"client_id_issued_at\\\":1641735467,\\\"tls_client_certificate_bound_access_tokens\\\":false,\\\"client_name\\\":\\\"My Updated Dynamic Client\\\",\\\"id_token_signed_response_alg\\\":\\\"RS256\\\",\\\"subject_type\\\":\\\"public\\\",\\\"client_secret_expires_at\\\":0,\\\"require_signed_request_object\\\":false}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration/update \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"clientId\": \"26837717140341\", \"token\": \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\", \"json\": \"...\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nClientRegistrationRequest req = new ClientRegistrationRequest();\nreq.setClientId(\"26837717140341\");\nreq.setToken(\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\");\nreq.setJson(\"...\");\n\napi.dynamicClientUpdate(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = new ClientRegistrationRequest()\nreq.clientId = '26837717140341'\nreq.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'\nreq.json = '...'\n\napi.dynamicClientUpdate(req)\n"}]
            x-stoplight: {"id": "ussf3nte28zg0"}
    "/api/{serviceId}/client/registration/delete":
        post:
            tags:
                - "Dynamic Client Registration"
            summary: "Delete Client"
            description: "Delete a dynamically registered client. This API is supposed to be used to implement a client\nregistration management endpoint that complies with [RFC 7592](https://datatracker.ietf.org/doc/html/rfc7592)\n(OAuth 2.0 Dynamic Registration Management).\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from the within the implementation of the client registration\nmanagement endpoint of the authorization server. The authorization server implementation should\nretrieve the value of `action` from the response and take the following steps according to the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from a viewpoint of the client or developer, it is an error on the server side.\nTherefore, the authorization server implementation should generate a response with \"500 Internal\nServer Error\"s and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nThe endpoint implementation may return another different response to the client or developer since\n\"500 Internal Server Error\" is not required by the specification.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client or developer\nwas wrong.\n\nThe authorization server implementation should generate a response with \"400 Bad Request\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that the registration access token used by\nthe client configuration request (RFC 7592) is invalid, or the client application which the token\nis tied to does not exist any longer or is invalid.\n\nThe HTTP status of the response returned to the client application must be \"401 Unauthorized\" and\nthe content type must be `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the endpoint implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\nNOTE: The `UNAUTHORIZED` value was added in October, 2021. See the description of\n`Service.unauthorizedOnClientConfigSupported` for details.\n\n**DELETED**\n\nWhen the value of `action` is `DELETED`, it means that the request from the client or developer is\nvalid.\n\nThe authorization server implementation should generate a response to the client or developer with\n\"204 No Content\".\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client or developer.\n\n```\nHTTP/1.1 204 No Content\nCache-Control: no-store\nPragma: no-cache\n```\n</details>\n"
            operationId: "client_registration_delete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "clientId":
                                    type: "string"
                                    description: "Client ID.\n"
                                "token":
                                    type: "string"
                                    description: "Client registration access token.\n"
                            required:
                                - "clientId"
                                - "token"
                        examples:
                            "default":
                                value: {"clientId": "26837717140341", "token": "qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "DELETED"
                                            - "UNAUTHORIZED"
                                        description: "The next action that the authorization server implementation should take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                                    "client":
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "serviceNumber":
                                                type: "integer"
                                                description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "clientName":
                                                type: "string"
                                                description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientNames":
                                                type: "array"
                                                description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "description":
                                                type: "string"
                                                description: "The description about the client application."
                                            "descriptions":
                                                type: "array"
                                                description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientId":
                                                type: "integer"
                                                description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientSecret":
                                                type: "string"
                                                description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                                readOnly: true
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always set to `true`."
                                            "clientType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "CONFIDENTIAL"
                                                description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                            "applicationType":
                                                type: "string"
                                                enum:
                                                    - "WEB"
                                                    - "NATIVE"
                                                description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                                x-stoplight: {"id": "44dohgvzte9r5"}
                                            "logoUri":
                                                type: "string"
                                                description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "logoUris":
                                                type: "array"
                                                description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "contacts":
                                                type: "array"
                                                description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    type: "string"
                                            "tlsClientCertificateBoundAccessTokens":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                            "dynamicallyRegistered":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                readOnly: true
                                            "softwareId":
                                                type: "string"
                                                description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "softwareVersion":
                                                type: "string"
                                                description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "registrationAccessTokenHash":
                                                type: "string"
                                                description: "The hash of the registration access token for this client.\n"
                                            "createdAt":
                                                type: "integer"
                                                description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "modifiedAt":
                                                type: "integer"
                                                description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "grantTypes":
                                                type: "array"
                                                description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "AUTHORIZATION_CODE"
                                                        - "IMPLICIT"
                                                        - "PASSWORD"
                                                        - "CLIENT_CREDENTIALS"
                                                        - "REFRESH_TOKEN"
                                                        - "CIBA"
                                                        - "DEVICE_CODE"
                                                        - "TOKEN_EXCHANGE"
                                                        - "JWT_BEARER"
                                                    type: "string"
                                                    description: "The grant type of the access token when the access token was created.\n"
                                                    x-stoplight: {"id": "033u82mqvyogn"}
                                            "responseTypes":
                                                type: "array"
                                                description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "NONE"
                                                        - "CODE"
                                                        - "TOKEN"
                                                        - "ID_TOKEN"
                                                        - "CODE_TOKEN"
                                                        - "CODE_ID_TOKEN"
                                                        - "ID_TOKEN_TOKEN"
                                                        - "CODE_ID_TOKEN_TOKEN"
                                                    type: "string"
                                                    x-stoplight: {"id": "t7wed2d7tkpy7"}
                                            "redirectUris":
                                                type: "array"
                                                description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                                items:
                                                    type: "string"
                                            "authorizationSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "authorizationEncryptionAlg":
                                                type: "string"
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "authorizationEncryptionEnc":
                                                type: "string"
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "tokenAuthMethod":
                                                enum:
                                                    - "NONE"
                                                    - "CLIENT_SECRET_BASIC"
                                                    - "CLIENT_SECRET_POST"
                                                    - "CLIENT_SECRET_JWT"
                                                    - "PRIVATE_KEY_JWT"
                                                    - "TLS_CLIENT_AUTH"
                                                    - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                type: "string"
                                                description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "tokenAuthSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "selfSignedCertificateKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                            "tlsClientAuthSubjectDn":
                                                type: "string"
                                                description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanDns":
                                                type: "string"
                                                description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanUri":
                                                type: "string"
                                                description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanIp":
                                                type: "string"
                                                description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanEmail":
                                                type: "string"
                                                description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "parRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                            "requestObjectRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                            "requestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "requestEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "requestEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "requestUris":
                                                type: "array"
                                                description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                                items:
                                                    type: "string"
                                            "defaultMaxAge":
                                                type: "integer"
                                                description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                format: "int32"
                                            "defaultAcrs":
                                                type: "array"
                                                description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                                items:
                                                    type: "string"
                                            "idTokenSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "idTokenEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "idTokenEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "authTimeRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "subjectType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "PAIRWISE"
                                                description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "zm5yes2y915ld"}
                                            "sectorIdentifierUri":
                                                type: "string"
                                                description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                            "derivedSectorIdentifier":
                                                type: "string"
                                                description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                                readOnly: true
                                            "jwksUri":
                                                type: "string"
                                                description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "jwks":
                                                type: "string"
                                                description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "userInfoSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "userInfoEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "userInfoEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "loginUri":
                                                type: "string"
                                                description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUri":
                                                type: "string"
                                                description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUris":
                                                type: "array"
                                                description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "policyUri":
                                                type: "string"
                                                description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "policyUris":
                                                type: "array"
                                                description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientUri":
                                                type: "string"
                                                description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientUris":
                                                type: "array"
                                                description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "bcDeliveryMode":
                                                type: "string"
                                                description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcNotificationEndpoint":
                                                type: "string"
                                                description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcRequestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "bcUserCodeRequired":
                                                type: "boolean"
                                                description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of this client.\n"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                            "extension":
                                                type: "object"
                                                properties:
                                                    "requestableScopes":
                                                        type: "array"
                                                        description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                        items:
                                                            type: "string"
                                                    "requestableScopesEnabled":
                                                        type: "boolean"
                                                        description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                                    "accessTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "refreshTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "idTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "tokenExchangePermitted":
                                                        type: "boolean"
                                                        description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                                x-stoplight: {"id": "0h8bpbau8xawc"}
                                            "authorizationDetailsTypes":
                                                type: "array"
                                                description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                                items:
                                                    type: "string"
                                            "customMetadata":
                                                type: "string"
                                                description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                            "frontChannelRequestObjectEncryptionRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionAlgMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionEncMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                            "digestAlgorithm":
                                                type: "string"
                                                description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                            "singleAccessTokenPerSubject":
                                                type: "boolean"
                                                description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                            "pkceRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                            "pkceS256Required":
                                                type: "boolean"
                                                description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                            "dpopRequired":
                                                type: "boolean"
                                                description: "If the DPoP is required for this client\n"
                                            "automaticallyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                            "explicitlyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                            "rsRequestSigned":
                                                type: "boolean"
                                                description: "The flag indicating whether this service signs responses from the resource server.\n"
                                            "rsSignedRequestKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                            "clientRegistrationTypes":
                                                type: "array"
                                                description: "The client registration types that the client has declared it may use.\n"
                                                items:
                                                    enum:
                                                        - "AUTOMATIC"
                                                        - "EXPLICIT"
                                                    type: "string"
                                                    description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                            "organizationName":
                                                type: "string"
                                                description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                            "signedJwksUri":
                                                type: "string"
                                                description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of this client.\n"
                                            "trustAnchorId":
                                                type: "string"
                                                description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                            "trustChain":
                                                type: "array"
                                                description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                                items:
                                                    type: "string"
                                            "trustChainExpiresAt":
                                                type: "integer"
                                                description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                                format: "int64"
                                            "trustChainUpdatedAt":
                                                type: "integer"
                                                description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                                format: "int64"
                                            "locked":
                                                type: "boolean"
                                                description: "The flag which indicates whether this client is locked.\n"
                                            "credentialOfferEndpoint":
                                                type: "string"
                                                description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                            "fapiModes":
                                                type: "array"
                                                description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                                items:
                                                    enum:
                                                        - "FAPI1_ADVANCED"
                                                        - "FAPI1_BASELINE"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                        - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                        - "FAPI2_SECURITY"
                                                    type: "string"
                                            "responseModes":
                                                type: "array"
                                                description: "The response modes that this client may use."
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "QUERY"
                                                        - "FRAGMENT"
                                                        - "FORM_POST"
                                                        - "JWT"
                                                        - "QUERY_JWT"
                                                        - "FRAGMENT_JWT"
                                                        - "FORM_POST_JWT"
                                            "credentialResponseEncryptionRequired":
                                                type: "boolean"
                                                description: "True if credential responses to this client must be always encrypted."
                                        type: "object"
                                        x-stoplight: {"id": "q48am9nz6ymbs"}
                            examples:
                                "default":
                                    value: {"resultCode": "A216001", "resultMessage": "[A216001] The client has been deleted.", "action": "DELETED"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/client/registration/delete \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"clientId\": \"26837717140341\", \"token\": \"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\"}'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nClientRegistrationRequest req = new ClientRegistrationRequest();\nreq.setClientId(\"26837717140341\");\nreq.setToken(\"qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA\");\n\napi.dynamicClientDelete(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = new ClientRegistrationRequest()\nreq.clientId = '26837717140341'\nreq.token = 'qs4Tu5TV7qqDYT93bFs6ISyhTByMF9o-54GY4JU5vTA'\n\napi.DynamicClientDelete(req)\n"}]
            x-stoplight: {"id": "6pht5kftipjun"}
    "/api/{serviceId}/backchannel/authentication":
        post:
            tags:
                - "CIBA"
            summary: "Process Backchannel Authentication Request"
            description: "This API parses request parameters of a [backchannel authentication request](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_request)\nand returns necessary data for the authorization server implementation to process the backchannel\nauthentication request further.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the [backchannel authentication\nendpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)\nof the service. The endpoint implementation must extract the request parameters from the\nbackchannel authentication request from the client application and pass them as the value of parameters\nrequest parameter for Authlete's `/backchannel/authentication` API.\n\nThe value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)\nof the request from the client application.\n\nThe following code snippet is an example in JAX-RS showing how to extract request parameters from\nthe backchannel authentication request.\n\n```java\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic Response post(String parameters)\n{\n    // 'parameters' is the entity body of the backchannel authentication request.\n    ......\n}\n```\n\nThe endpoint implementation does not have to parse the request parameters from the client application\nbecause Authlete's `/backchannel/authentication` API does it.\n\nThe response from `/backchannel/authentication` API has various parameters. Among them, it is `action`\nparameter that the authorization server implementation should check first because it denotes the\nnext action that the authorization server implementation should take. According to the value of\n`action`, the service implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used\nas the entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\nis invalid.\n\nThe authorization server implementation should generate a response to the client application with\n\"400 Bad Request\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that client authentication of the backchannel\nauthentication request failed. Note that client authentication is always required at the backchannel\nauthentication endpoint. This implies that public clients are not allowed to use the backchannel\nauthentication endpoint.\n\nThe authorization server implementation should generate a response to the client application with\n\"401 Unauthorized\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: (challenge)\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**USER_IDENTIFICATION**\n\nWhen the value of `action` is `USER_IDENTIFICATION`, it means that the backchannel authentication\nrequest from the client application is valid. The authorization server implementation has to follow\nthe steps below.\n\n[1] END-USER IDENTIFICATION\n\nThe first step is to determine the subject (= unique identifier) of the end-user from whom the\nclient application wants to get authorization.\n\nAccording to the CIBA specification, a backchannel authentication request contains one (and only\none) of the `login_hint_token`, `id_token_hint` and `login_hint` request parameters as a hint\nby which the authorization server identifies the subject of an end-user.<br>\nThe authorization server implementation can know which hint is included in the backchannel authentication\nrequest by the `hintType` parameter. For example, when the value of the parameter `LOGIN_HINT`,\nit means that the backchannel authentication request contains the `login_hint` request parameter\nas a hint.<br>\n\nThe value of the `hint` parameter is the value of the hint. For example, when the value of the\n`hintType` parameter is `LOGIN_HINT`, The value of the `hint` parameter is the value of the `login_hint`\nrequest parameter.<br>\n\nIt is up to the authorization server implementation how to determine the subject of the end-user\nfrom the hint. Only when the `id_token_hint` request parameter is used, authorization server\nimplementation can use the sub response parameter, which holds the value of the sub claim in the\n`id_token_hint` request parameter.\n\n[2] END-USER IDENTIFICATION ERROR\n\nThere are some cases where the authorization server implementation encounters an error during\nthe user identification process. In any error case, the service implementation has to return an\nHTTP response with the error response parameter to the client application. The following is an\nexample of such error responses.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{ \"error\":\"unknown_user_id\" }\n```\n\nAuthlete provides `/backchannel/authentication/fail` API that builds the response body (JSON)\nof an error response. However, because it is easy to build an error response manually, you may\nchoose not to call the API. One good thing in using the API is that the API call can trigger\ndeletion of the ticket which has been issued from Authlete's `/backchannel/authentication` API.\nIf you don't call `/backchannel/authentication/fail` API, the ticket will continue to exist in\nthe database until it is cleaned up by the batch program after the ticket expires.<br>\n\nPossible error cases that the authorization server implementation itself has to handle are as\nfollows. Other error cases have already been covered by `/backchannel/authentication` API.\n\n- <u>`expired_login_hint_token`</u><br>\n  The authorization server implementation detected that the hint presented by the `login_hint_token`\n  request parameter has expired.\n\n  Note that the format of `login_hint_token` is not described in the CIBA Core spec at all and\n  so there is no consensus on how to detect expiration of `login_hint_token`. Interpretation\n  of `login_hint_token` is left to each authorization server implementation.\n\n- <u>`unknown_user_id`</u><br>\n  The authorization server implementation could not determine the subject of the end-user by\n  the presented hint.\n\n- <u>`unauthorized_client`</u><br>\n  The authorization server implementation has custom rules to reject backchannel authentication\n  requests from some particular clients and found that the client which has made the backchannel\n  authentication request is one of the particular clients.\n\n  Note that `/backchannel/authentication` API does not return `action=USER_IDENTIFICATION` in\n  cases where the client does not exist or client authentication has failed. Therefore, the\n  authorization server implementation will never have to use the error code `unauthorized_client`\n  unless the server has intentionally implemented custom rules to reject backchannel authentication\n  requests based on clients.\n\n- <u>`missing_user_code`</u><br>\n  The authorization server implementation has custom rules to require that a backchannel authentication\n  request include a user code for some particular users and found that the user identified by\n  the hint is one of the particular users.\n\n  Note that `/backchannel/authentication` API does not return `action=USER_IDENTIFICATION` when\n  both the `backchannel_user_code_parameter_supported` metadata of the server and the\n  `backchannel_user_code_parameter` metadata of the client are true and the backchannel authentication\n  request does not include the user_code request parameter. In this case, `/backchannel/authentication`\n  API returns action=BAD_REQUEST with JSON containing `\"error\":\"missing_user_code\"`. Therefore,\n  the authorization server implementation will never have to use the error code `missing_user_code`\n  unless the server has intentionally implemented custom rules to require a user code based\n  on users even in the case where the `backchannel_user_code_parameter` metadata of the client\n  which has made the backchannel authentication request is `false`.\n\n- <u>`invalid_user_code`</u><br>\n  The authorization server implementation detected that the presented user code is invalid.\n\n  Note that the format of user_code is not described in the CIBA Core spec at all and so there\n  is no consensus on how to judge whether a user code is valid or not. It is up to each authorization\n  server implementation how to handle user codes.\n\n- <u>`invalid_binding_message`</u><br>\n  The authorization server implementation detected that the presented binding message is invalid.\n\n  Note that the format of binding_message is not described in the CIBA Core spec at all and\n  so there is no consensus on how to judge whether a binding message is valid or not. It is\n  up to each authorization server implementation how to handle binding messages.\n\n- <u>`invalid_target`</u><br>\n  The authorization server implementation rejects the requested target resources.\n\n  The error code invalid_target is from \"Resource Indicators for OAuth 2.0\". The specification\n  defines the resource request parameter. By using the parameter, client applications can request\n  target resources that should be bound to the access token being issued. If the authorization\n  server wants to reject the request, call `/backchannel/authentication/fail` API with `INVALID_TARGET`.\n\n- <u>`access_denined`</u><br>\n  The authorization server implementation has custom rules to reject backchannel authentication\n  requests without asking the end-user and respond to the client as if the end-user had rejected\n  the request in some particular cases and found that the backchannel authentication request\n  is one of the particular cases.\n\n  The authorization server implementation will never have to use the error code `access_denied`\n  at this timing unless the server has intentionally implemented custom rules to reject backchannel\n  authentication requests without asking the end-user and respond to the client as if the end-user\n  had rejected the request.\n\n[3] AUTH_REQ_ID ISSUE\n\nIf the authorization server implementation has successfully determined the subject of the end-user,\nthe next action is to return an HTTP response to the client application which contains `auth_req_id`.\n\nAuthlete provides `/backchannel/authentication/issue` API which generates a JSON containing `auth_req_id`,\nso, your next action is (1) call the API, (2) receive the response from the API, (3) build a response\nto the client application using the content of the API response, and (4) return the response to\nthe client application. See the description of `/backchannel/authentication/issue` API for details.\n\n[4] END-USER AUTHENTICATION AND AUTHORIZATION\n\nAfter sending a JSON containing `auth_req_id` back to the client application, the service implementation\nstarts to communicate with an authentication device of the end-user. It is assumed that end-user\nauthentication is performed on the authentication device and the end-user confirms the content of\nthe backchannel authentication request and grants authorization to the client application if everything\nis okay. The authorization server implementation must be able to receive the result of the end-user\nauthentication and authorization from the authentication device.\n\nHow to communicate with an authentication device and achieve end-user authentication and authorization\nis up to each authorization server implementation, but the following request parameters of the backchannel\nauthentication request should be taken into consideration in any implementation.\n\n- <u>`acr_values`</u><br>\n  A backchannel authentication request may contain an array of ACRs (Authentication Context Class\n  References) in preference order. If multiple authentication devices are registered for the end-user,\n  the authorization server implementation should take the ACRs into consideration when selecting\n  the best authentication device.\n\n- <u>`scope`</u><br>\n  A backchannel authentication request always contains a list of scopes. At least, `openid` is\n  included in the list (otherwise `/backchannel/authentication` API returns `action=BAD_REQUEST`).\n  It would be better to show the requested scopes to the end-user on the authentication device\n  or somewhere appropriate.\n\n  If the scope request parameter contains `address`, `email`, `phone` and/or `profile`, they are\n  interpreted as defined in \"5.4. Requesting Claims using Scope Values of OpenID Connect Core 1.0\".\n  That is, they are expanded into a list of claim names. The claimNames parameter returns the expanded\n  result.\n\n- <u>`binding_message`</u><br>\n  A backchannel authentication request may contain a binding message. It is a human readable identifier\n  or message intended to be displayed on both the consumption device (client application) and the\n  authentication device.\n\n- <u>`user_code`</u><br>\n  A backchannel authentication request may contain a user code. It is a secret code, such as password\n  or pin, known only to the end-user but verifiable by the authorization server. The user code should\n  be used to authorize sending a request to the authentication device.\n\n[5] END-USER AUTHENTICATION AND AUTHORIZATION COMPLETION\n\nAfter receiving the result of end-user authentication and authorization, the authorization server\nimplementation must call Authlete's `/backchannel/authentication/complete` API to tell Authlete\nthe result and pass necessary data so that Authlete can generate an ID token, an access token and\noptionally a refresh token. See the description of the API for details.\n\n[6] CLIENT NOTIFICATION\n\nWhen the backchannel token delivery mode is either `ping` or `push`, the authorization server implementation\nmust send a notification to the pre-registered notification endpoint of the client after the end-user\nauthentication and authorization. In this case, the `action` parameter in a response from `/backchannel/authentication/complete`\nAPI is `NOTIFICATION`. See the description of `/backchannel/authentication/complete` API for details.\n\n[7] TOKEN REQUEST\n\nWhen the backchannel token delivery mode is either `ping` or `poll`, the client application will make\na token request to the token endpoint to get an ID token, an access token and optionally a refresh\ntoken.\n\nA token request that corresponds to a backchannel authentication request uses `urn:openid:params:grant-type:ciba`\nas the value of the `grant_type` request parameter. Authlete's `/auth/token` API recognizes the\ngrant type automatically and behaves properly, so the existing token endpoint implementation does\nnot have to be changed to support CIBA.\n</details>\n"
            operationId: "backchannel_authentication_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "Parameters of a backchannel authentication request which are the request parameters that the\nbackchannel authentication endpoint of the OpenID provider implementation received from the client\napplication.\n\nThe value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)\nof the request from the client application.\n"
                                "clientId":
                                    type: "string"
                                    description: "The client ID extracted from Authorization header of the backchannel authentication request from\nthe client application.\n\nIf the backchannel authentication endpoint of the OpenID provider implementation supports Basic\nAuthentication as a means of client authentication, and the request from the client application\ncontained its client ID in Authorization header, the value should be extracted and set to this parameter.\n"
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret extracted from Authorization header of the backchannel authentication request\nfrom the client application.\n\nIf the backchannel authentication endpoint of the OpenID provider implementation supports Basic\nAuthentication as a means of client authentication, and the request from the client application\ncontained its client secret in Authorization header, the value should be extracted and set to\nthis parameter.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "The client certification used in the TLS connection between the client application and the\nbackchannel authentication endpoint of the OpenID provider.\n"
                                "clientCertificatePath":
                                    type: "string"
                                    description: "The client certificate path presented by the client during client authentication. Each element\nis a string in PEM format.\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "login_hint=john&scope=openid&client_notification_token=my-client-notification-token&user_code=my-user-code", "clientId": "26862190133482", "clientSecret": "8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "USER_IDENTIFICATION"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication. Its format varies depending on the value of `action` parameter.\n"
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID of the client application that has made the backchannel authentication\nrequest.\n"
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias of the client application that has made the backchannel authentication\nrequest.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "`true` if the value of the client_id request parameter included in the backchannel\nauthentication request is the client ID alias. `false` if the value is the original\nnumeric client ID.\n"
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application which has made the backchannel authentication request.\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes requested by the backchannel authentication request.\n\nBasically, this property holds the value of the `scope` request parameter in the backchannel\nauthentication request. However, because unregistered scopes are dropped on Authlete side,\nif the `scope` request parameter contains unknown scopes, the list returned by this\nproperty becomes different from the value of the `scope` request parameter.\n\nNote that `description` property and `descriptions` property of each `scope` object\nin the array contained in this property is always null even if descriptions of the scopes\nare registered.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            type: "object"
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "claimNames":
                                        type: "array"
                                        description: "The names of the claims which were requested indirectly via some special scopes.\nSee [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\nin OpenID Connect Core 1.0 for details.\n"
                                        items:
                                            type: "string"
                                    "clientNotificationToken":
                                        type: "string"
                                        description: "The client notification token included in the backchannel authentication request.\n"
                                    "acrs":
                                        type: "array"
                                        description: "The list of ACR values requested by the backchannel authentication request.\n\nBasically, this property holds the value of the `acr_values` request parameter in the\nbackchannel authentication request. However, because unsupported ACR values are dropped\non Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,\nthe list returned by this property becomes different from the value of the `acr_values`\nrequest parameter.\n"
                                        items:
                                            type: "string"
                                    "hintType":
                                        type: "string"
                                        description: "The type of the hint for end-user identification which was included in the backchannel authentication request.\n"
                                    "hint":
                                        type: "string"
                                        description: "The value of the hint for end-user identification.\n"
                                    "sub":
                                        type: "string"
                                        description: "The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.\n"
                                    "bindingMessage":
                                        type: "string"
                                        description: "The binding message included in the backchannel authentication request.\n"
                                    "userCode":
                                        type: "string"
                                        description: "The binding message included in the backchannel authentication request.\n"
                                    "userCodeRequired":
                                        type: "boolean"
                                        description: "The flag which indicates whether a user code is required.\n\n`true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's\n`bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`\nmetadata of the service (= Service's `backchannelUserCodeParameterSupported` property)\nare `true`.\n"
                                    "requestedExpiry":
                                        type: "integer"
                                        description: "The requested expiry for the authentication request ID (`auth_req_id`).\n"
                                        format: "int32"
                                    "requestContext":
                                        type: "string"
                                        description: "The request context of the backchannel authentication request.\n\nIt is the value of the request_context claim in the signed authentication request and\nits format is JSON. request_context is a new claim added by the FAPI-CIBA profile.\n"
                                    "warnings":
                                        type: "array"
                                        description: "The warnings raised during processing the backchannel authentication request.\n"
                                        items:
                                            type: "string"
                                    "ticket":
                                        type: "string"
                                        description: "The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.\n\nThis parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.\n"
                                    "resources":
                                        type: "array"
                                        description: "The resources specified by the `resource` request parameters or by the `resource` property\nin the request object. If both are given, the values in the request object should be\nset. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "dynamicScopes":
                                        type: "array"
                                        description: "The dynamic scopes which the client application requested by the scope request parameter.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The scope name."
                                                "value":
                                                    type: "string"
                                                    description: "The scope value."
                                            type: "object"
                                            x-stoplight: {"id": "5mot14b0ec5an"}
                                    "deliveryMode":
                                        enum:
                                            - "PING"
                                            - "POLL"
                                            - "PUSH"
                                        type: "string"
                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                    "clientAuthMethod":
                                        type: "string"
                                        description: "The client authentication method that was performed.\n"
                                    "gmAction":
                                        enum:
                                            - "CREATE"
                                            - "QUERY"
                                            - "REPLACE"
                                            - "REVOKE"
                                            - "MERGE"
                                        type: "string"
                                        description: "The grant management action of the device authorization request.\n\nThe `grant_management_action` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n"
                                    "grantId":
                                        type: "string"
                                        description: "the value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "grant":
                                        properties:
                                            "scopes":
                                                type: "array"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "scope":
                                                            type: "string"
                                                            description: "Space-delimited scopes.\n"
                                                        "resource":
                                                            type: "array"
                                                            description: "List of resource indicators.\n"
                                                            items:
                                                                type: "string"
                                            "claims":
                                                type: "array"
                                                description: "The claims associated with the Grant.\n"
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "elements":
                                                        type: "array"
                                                        description: "Elements of this authorization details.\n"
                                                        items:
                                                            type: "object"
                                                            properties:
                                                                "type":
                                                                    type: "string"
                                                                    description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                                "locations":
                                                                    type: "array"
                                                                    description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "actions":
                                                                    type: "array"
                                                                    description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "dataTypes":
                                                                    type: "array"
                                                                    description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "identifier":
                                                                    type: "string"
                                                                    description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                                "privileges":
                                                                    type: "array"
                                                                    description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "otherFields":
                                                                    type: "string"
                                                                    description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                            required:
                                                                - "type"
                                                            x-stoplight: {"id": "cp8779lbx2pfx"}
                                                type: "object"
                                                description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                                x-stoplight: {"id": "1nyzf1nnowolm"}
                                        type: "object"
                                    "grantSubject":
                                        type: "string"
                                        description: "The subject identifying the user who has given the grant identified\nby the `grant_id` request parameter of the device authorization\nrequest.\n\nAuthlete 2.3 and newer versions support <a href=\n\"https://openid.net/specs/fapi-grant-management.html\">Grant Management\nfor OAuth 2.0</a>. An authorization request may contain a `grant_id`\nrequest parameter which is defined in the specification. If the value of\nthe request parameter is valid, {@link #getGrantSubject()} will return\nthe subject of the user who has given the grant to the client application.\nAuthorization server implementations may use the value returned from\n{@link #getGrantSubject()} in order to determine the user to authenticate.\n\nThe user your system will authenticate during the authorization process\n(or has already authenticated) may be different from the user of the\ngrant. The first implementer's draft of \"Grant Management for OAuth 2.0\"\ndoes not mention anything about the case, so the behavior in the case is\nleft to implementations. Authlete will not perform the grant management\naction when the `subject` passed to Authlete does not match the\nuser of the grant.\n"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A179001", "resultMessage": "[A179001] The backchannel authentication request was processed successfully.", "action": "USER_IDENTIFICATION", "clientId": 26862190133482, "clientIdAliasUsed": false, "clientName": "My CIBA Client", "clientNotificationToken": "my-client-notification-token", "deliveryMode": "POLL", "hint": "john", "hintType": "LOGIN_HINT", "requestedExpiry": 0, "scopes": [{"defaultEntry": false, "name": "openid"}], "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "ticket": "Y1qeCf0A-JUz6caceaBfd2AaBYNZ-X-WGTP5Qv47cQI", "userCode": "my-user-code", "userCodeRequired": false}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\": \"login_hint=john&scope=openid&client_notification_token=my-client-notification-token&user_code=my-user-code\", \"clientId\": \"26862190133482\", \"clientSecret\":\"8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nBackchannelAuthenticationRequest req = new BackchannelAuthenticationRequest();\nreq.setParameters(...);\nreq.setClientId(\"26862190133482\");\nreq.setClientSecret(\"8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A\");\n\napi.backchannelAuthentication(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = BackchannelAuthenticationRequest()\nreq.parameters = ...\nreq.clientId = '26862190133482'\nreq.clientSecret = '8J9pAEX6IQw7lYtYGsc_s9N4jlEz_DfkoCHIswJjFjfgKZX-nC4EvKtaHXcP9mHBfS7IU4jytjSZZpaK9UJ77A'\n\napi.backchannelAuthentication(req)\n"}]
            x-stoplight: {"id": "yfwdtngecvg5p"}
    "/api/{serviceId}/backchannel/authentication/issue":
        post:
            tags:
                - "CIBA"
            summary: "Issue Backchannel Authentication Response"
            description: "This API prepares JSON that contains an `auth_req_id`. The JSON should be used as the response body\nof the response which is returned to the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the backchannel authentication\nendpoint of the service in order to generate a successful response to the client application.\n\nThe description of the `/backchannel/authentication` API describes the timing when this API should\nbe called and the meaning of request parameters. See [AUTH_REQ_ID ISSUE] in `USER_IDENTIFICATION`.\n\nThe response from `/backchannel/authentication/issue` API has some parameters. Among them, it is\n`action` parameter that the authorization server implementation should check first because it denotes\nthe next `action` that the authorization server implementation should take. According to the value\nof `action`, the authorization server implementation must take the steps described below.\n\n```java\n@POST\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\npublic Response post(String parameters)\n{\n    // 'parameters' is the entity body of the backchannel authentication request.\n    ......\n}\n```\n\nThe endpoint implementation does not have to parse the request parameters from the client application\nbecause Authlete's `/backchannel/authentication` API does it.\n\nThe response from `/backchannel/authentication` API has various parameters. Among them, it is `action`\nparameter that the authorization server implementation should check first because it denotes the\nnext action that the authorization server implementation should take. According to the value of\n`action`, the service implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\nIn either case, from the viewpoint of the client application, it is an error on the server side.\nTherefore, the service implementation should generate a response to the client application with\nHTTP status of \"500 Internal Server Error\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**INVALID_TICKET**\n\nWhen the value of `action` is `INVALID_TICKET`, it means that the ticket included in the API call\nwas invalid. For example, it does not exist or has expired.\n\nFrom a viewpoint of the client application, this is an error on the server side. Therefore, the\nauthorization server implementation should generate a response to the client application with\n\"500 Internal Server Error\" and `application/json`.\n\nYou can build an error response in the same way as shown in the description for the case of `INTERNAL_SERVER_ERROR`.\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that Authlete has succeeded in preparing JSON that\ncontains an `auth_req_id`. The JSON should be used as the response body of the response that is\nreturned to the client from the backchannel authentication endpoint. `responseContent` contains\nthe JSON.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client application.\n\n```\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n</details>\n"
            operationId: "backchannel_authentication_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket issued from Authlete's `/backchannel/authentication` API.\n"
                            required:
                                - "ticket"
                        examples:
                            "default":
                                value: {"ticket": "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "INVALID_TICKET"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication. Its format varies depending on the value of `action` parameter.\n"
                                    "authReqId":
                                        type: "string"
                                        description: "The newly issued authentication request ID.\n"
                                    "expiresIn":
                                        type: "integer"
                                        description: "The duration of the issued authentication request ID in seconds.\n"
                                        format: "int32"
                                    "interval":
                                        type: "integer"
                                        description: "The minimum amount of time in seconds that the client must wait for between polling\nrequests to the token endpoint.\n"
                                        format: "int32"
                            examples:
                                "default":
                                    value: {"resultCode": "A183001", "resultMessage": "[A183001] An auth_req_id was issued successfully.", "action": "OK", "authReqId": "_mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE", "expiresIn": 3600, "interval": 0, "responseContent": "{\\\"auth_req_id\\\":\\\"_mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE\\\",\\\"interval\\\":0,\\\"expires_in\\\":3600}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication/issue \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nBackchannelAuthenticationIssueRequest req = new BackchannelAuthenticationIssueRequest();\nreq.setTicket(\"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\");\n\napi.backchannelAuthenticationIssue(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = BackchannelAuthenticationIssueRequest()\nreq.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'\n\napi.backchannelAuthenticationIssue(req)\n"}]
            x-stoplight: {"id": "1rdzdhu0475e0"}
    "/api/{serviceId}/backchannel/authentication/fail":
        post:
            tags:
                - "CIBA"
            summary: "Fail Backchannel Authentication Request"
            description: "The API prepares JSON that contains an error. The JSON should be used as the response body of the\nresponse which is returned to the client from the [backchannel authentication endpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint).\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from within the implementation of the [backchannel authentication\nendpoint](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#auth_backchannel_endpoint)\nof the service in order to generate an error response to the client application.\n\nThe response from `/backchannel/authentication/fails` API has some parameters. Among them, it is\n`action` parameter that the authorization server implementation should check first because it denotes\nthe next action that the authorization server implementation should take. According to the value\nof `action`, the authorization server implementation must take the steps described below.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that (1) the `reason` request parameter\nof the API call was `SERVER_ERROR`, (2) an error occurred on Authlete side, or (3) the request parameters\nof the API call were wrong. In this case, the authorization server implementation should return\na \"500 Internal Server Error\" response to the client application. However, in most cases, commercial\nimplementations prefer to use other HTTP status code than 5xx.\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, the authorization server implementation should return a\n\"400 Bad Request\" response to the client application.\n\n**FORBIDDEN**\n\nWhen the value of `action` is `FORBIDDEN`, it means that the `reason` request parameter of the API call\nwas `ACCESS_DENIED`. In this case, the backchannel authentication endpoint of the authorization\nserver implementation should return a \"403 Forbidden\" response to the client application.\n\n</details>\n"
            operationId: "backchannel_authentication_fail_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.\nThis request parameter is not mandatory but optional. If this request parameter is given and the\nticket belongs to the service, the specified ticket is deleted from the database. Giving this\nparameter is recommended to clean up the storage area for the service.\n"
                                "reason":
                                    type: "string"
                                    enum:
                                        - "ACCESS_DENIED"
                                        - "EXPIRED_LOGIN_HINT_TOKEN"
                                        - "INVALID_BINDING_MESSAGE"
                                        - "INVALID_TARGET"
                                        - "INVALID_USER_CODE"
                                        - "MISSING_USER_CODE"
                                        - "SERVER_ERROR"
                                        - "UNAUTHORIZED_CLIENT"
                                        - "UNKNOWN_USER_ID"
                                    description: "The reason of the failure of the backchannel authentication request. This request parameter is\nnot mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`\nis used as a reason.\n"
                                "errorDescription":
                                    type: "string"
                                    description: "The description of the error. This corresponds to the `error_description` property in the response\nto the client.\n"
                                "errorUri":
                                    type: "string"
                                    description: "The URI of a document which describes the error in detail. If this optional request parameter\nis given, its value is used as the value of the `error_uri` property.\n"
                            required:
                                - "ticket"
                                - "reason"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "FORBIDDEN"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication. Its format varies depending on the value of `action` parameter.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A185001", "resultMessage": "[A185001] Successfully generated an error response for the backchannel authentication request.", "action": "FORBIDDEN", "responseContent": "{\\\"error\\\":\\\"access_denied\\\"}"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication/fail \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0\", \"reason\": \"ACCESS_DENIED\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nBackchannelAuthenticationFailRequest req = new BackchannelAuthenticationFailRequest();\nreq.setTicket(\"holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0\");\nreq.setReason(BackchannelAuthenticationFailRequest.Reason.ACCESS_DENIED);\n\napi.backchannelAuthenticationFail(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = BackchannelAuthenticationFailRequest()\nreq.ticket = 'holsZhINBhum6j6MYE4yZefHuQN_kd609veKCst31p0'\nreq.reason = BackchannelAuthenticationFailReason.ACCESS_DENIED\n\napi.backchannelAuthenticationFail(req)\n"}]
            x-stoplight: {"id": "n7ei8nlncau4o"}
    "/api/{serviceId}/backchannel/authentication/complete":
        post:
            tags:
                - "CIBA"
            summary: "Complete Backchannel Authentication"
            description: "This API returns information about what action the authorization server should take after it receives\nthe result of end-user's decision about whether the end-user has approved or rejected a client application's\nrequest on the authentication device.\n\n<br>\n<details>\n<summary>Description</summary>\n\nAfter the implementation of the backchannel authentication endpoint returns JSON containing an\n`auth_req_id` to the client, the authorization server starts a background process that communicates\nwith the authentication device of the end-user. On the authentication device, end-user authentication\nis performed and the end-user is asked whether they give authorization to the client or not. The\nauthorization server will receive the result of end-user authentication and authorization from\nthe authentication device.\n\nAfter the authorization server receives the result from the authentication device, or even in the\ncase where the server gave up receiving a response from the authentication device for some reasons,\nthe server should call the `/backchannel/authentication/complete` API to tell Authlete the result.\n\nWhen the end-user was authenticated and authorization was granted to the client by the end-user,\nthe authorization server should call the API with `result=AUTHORIZED`. In this successful case,\nthe `subject` request parameter is mandatory. If the token delivery mode is `push`, the API will generate\nan access token, an ID token and optionally a refresh token. On the other hand, if the token delivery\nmode is `poll` or `ping`, the API will just update the database record so that `/auth/token` API\ncan generate tokens later.\n\nWhen the authorization server received the decision of the end-user from the authentication device\nand it indicates that the end-user has rejected to give authorization to the client, the authorization\nserver should call the API with `result=ACCESS_DENIED`. In this case, if the token delivery mode\nis `push`, the API will generate an error response that contains the error response parameter and\noptionally the `error_description` and error_uri response parameters (if the `errorDescription`\nand `errorUri` request parameters have been given). On the other hand, if the token delivery mode\nis `poll` or `ping`, the API will just update the database record so that `/auth/token` API can\ngenerate an error response later. In any token delivery mode, the value of the error parameter will\nbecome `access_denied`.\n\nWhen the authorization server could not get the result of end-user authentication and authorization\nfrom the authentication device for some reasons, the authorization server should call the API with\n`result=TRANSACTION_FAILED`. In this error case, the API will behave in the same way as in the case\nof `ACCESS_DENIED`. The only difference is that `expired_token` is used as the value of the `error`\nparameter.\n\nThe response from `/backchannel/authentication/complete` API has various parameters. Among them,\nit is `action` parameter that the authorization server implementation should check first because\nit denotes the next action that the authorization server implementation should take. According to\nthe value of `action`, the service implementation must take the steps described below.\n\n**SERVER_ERROR**\n\nWhen the value of `action` is `SERVER_ERROR`, it means either (1) that the request from the authorization\nserver to Authlete was wrong, or (2) that an error occurred on Authlete side.\n\nWhen the backchannel token delivery mode is `ping` or `push`, `SERVER_ERROR` is used only when\nan error is detected before the record of the ticket (which is included in the API call to `/backchannel/authentication/complete`)\nis retrieved from the database successfully. If an error is detected after the record of the ticket\nis retrieved from the database, `NOTIFICATION` is used instead of `SERVER_ERROR`.\n\nWhen the backchannel token delivery mode is `poll`, `SERVER_ERROR` is used regardless of whether\nit is before or after the record of the ticket is retrieved from the database.\n\n**NO_ACTION**\n\nWhen the value of `action` is `NO_ACTION`, it means that the authorization server does not have\nto take any immediate action.\n\n`NO_ACTION` is returned when the backchannel token delivery mode is `poll`. In this case, the client\nwill receive the final result at the token endpoint.\n\n**NOTIFICATION**\n\nWhen the value of `action` is `NOTIFICATION`, it means that the authorization server must send a\nnotification to the client notification endpoint.\n\nAccording to the CIBA Core specification, the notification is an HTTP POST request whose request\nbody is JSON and whose `Authorization` header contains the client notification token, which was\nincluded in the backchannel authentication request as the value of the `client_notification_token`\nrequest parameter, as a bearer token.\n\nWhen the backchannel token delivery mode is `ping`, the request body of the notification is JSON\nwhich contains the `auth_req_id` property only. When the backchannel token delivery mode is `push`,\nthe request body will additionally contain an access token, an ID token and other properties. Note\nthat when the backchannel token delivery mode is `poll`, a notification does not have to be sent\nto the client notification endpoint.\n\nIn error cases, in the ping mode, however, the content of a notification is not different from the\ncontent in successful cases. That is, the notification contains the `auth_req_id` property only.\nThe client will know the error when it accesses the token endpoint. On the other hand, in the\n`push` mode, in error cases, the content of a notification will include the `error` property instead\nof an access token and an ID token. The client will know the error by detecting that error is included\nin the notification.\n\nIn any case, the value of `responseContent` is JSON which can be used as the request body of the\nnotification.\n\nThe client notification endpoint that the notification should be sent to the value of the `clientNotificationEndpoint`\nparameter. Likewise, the client notification token that the notification should include as a bearer\ntoken is the `clientNotificationToken` parameter. With these methods, the notification can be built\nlike the following.\n\n```\nPOST {clientNotificationEndpoint} HTTP/1.1\nHOST: {The host of clientNotificationEndpoint}\nAuthorization: Bearer {notificationToken}\nContent-Type: application/json\n\n{responseContent}\n```\n</details>\n"
            operationId: "backchannel_authentication_complete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket issued by Authlete's `/backchannel/authentication` API.\n"
                                "result":
                                    type: "string"
                                    enum:
                                        - "TRANSACTION_FAILED"
                                        - "ACCESS_DENIED"
                                        - "AUTHORIZED"
                                    description: "The result of the end-user authentication and authorization. One of the following. Details are\ndescribed in the description.\n"
                                "subject":
                                    type: "string"
                                    description: "The subject (= unique identifier) of the end-user.\n"
                                "sub":
                                    type: "string"
                                    description: "The value of the sub claim that should be used in the ID token.\n"
                                "authTime":
                                    type: "integer"
                                    description: "The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.\n"
                                    format: "int64"
                                "acr":
                                    type: "string"
                                    description: "The reference of the authentication context class which the end-user authentication satisfied.\n"
                                "claims":
                                    type: "string"
                                    description: "Additional claims which will be embedded in the ID token.\n"
                                "properties":
                                    type: "array"
                                    description: "The extra properties associated with the access token.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "scopes":
                                    type: "array"
                                    description: "Scopes to replace the scopes specified in the original backchannel authentication request with.\nWhen nothing is specified for this parameter, replacement is not performed.\n"
                                    items:
                                        type: "string"
                                "idtHeaderParams":
                                    type: "string"
                                    description: "JSON that represents additional JWS header parameters for ID tokens.\n"
                                "errorDescription":
                                    type: "string"
                                    description: "The description of the error. If this optional request parameter is given, its value is used as\nthe value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.\nTo comply with the specification strictly, the description must not include characters outside\nthe set `%x20-21 / %x23-5B / %x5D-7E`.\n"
                                "errorUri":
                                    type: "string"
                                    description: "The URI of a document which describes the error in detail. This corresponds to the `error_uri`\nproperty in the response to the client.\n"
                                "consentedClaims":
                                    type: "array"
                                    description: "the claims that the user has consented for the client application\nto know.\n"
                                    items:
                                        type: "string"
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT access token.\n"
                                "accessToken":
                                    type: "string"
                                    description: "The representation of an access token that may be issued as a result of the Authlete API call.\n"
                            required:
                                - "ticket"
                                - "result"
                                - "subject"
                        examples:
                            "default":
                                value: {"ticket": "NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q", "result": "AUTHORIZED", "subject": "john"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "SERVER_ERROR"
                                            - "NO_ACTION"
                                            - "NOTIFICATION"
                                        description: "The next action that the authorization server implementation should take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication. Its format varies depending on the value of `action` parameter.\n"
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID of the client application that has made the backchannel authentication\nrequest.\n"
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias of the client application that has made the backchannel authentication\nrequest.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "`true` if the value of the client_id request parameter included in the backchannel\nauthentication request is the client ID alias. `false` if the value is the original\nnumeric client ID.\n"
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application which has made the backchannel authentication request.\n"
                                    "deliveryMode":
                                        enum:
                                            - "PING"
                                            - "POLL"
                                            - "PUSH"
                                        type: "string"
                                        x-stoplight: {"id": "rnu65zla2rf18"}
                                    "clientNotificationEndpoint":
                                        type: "string"
                                        description: "The client notification endpoint to which a notification needs to be sent. This corresponds\nto the `client_notification_endpoint` metadata of the client application.\n"
                                    "clientNotificationToken":
                                        type: "string"
                                        description: "The client notification token which needs to be embedded as a Bearer token in the Authorization\nheader in the notification. This is the value of the `client_notification_token` request\nparameter included in the backchannel authentication request.\n"
                                    "authReqId":
                                        type: "string"
                                        description: "The newly issued authentication request ID.\n"
                                    "accessToken":
                                        type: "string"
                                        description: "The issued access token.\n"
                                    "refreshToken":
                                        type: "string"
                                        description: "The issued refresh token.\n"
                                    "idToken":
                                        type: "string"
                                        description: "The issued ID token.\n"
                                    "accessTokenDuration":
                                        type: "integer"
                                        description: "The duration of the access token in seconds.\n"
                                        format: "int64"
                                    "refreshTokenDuration":
                                        type: "integer"
                                        description: "The duration of the refresh token in seconds.\n"
                                        format: "int64"
                                    "idTokenDuration":
                                        type: "integer"
                                        description: "The duration of the ID token in seconds.\n"
                                        format: "int64"
                                    "jwtAccessToken":
                                        type: "string"
                                        description: "The issued access token in JWT format.\n"
                                    "resources":
                                        type: "array"
                                        description: "The resources specified by the `resource` request parameters or by the `resource` property\nin the request object. If both are given, the values in the request object should be\nset. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "grantId":
                                        type: "string"
                                        description: "the value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A198001", "resultMessage": "[A198001] Successfully updated the database so that the token endpoint can generate tokens (mode = poll, result = AUTHORIZED).", "accessTokenDuration": 0, "action": "NO_ACTION", "authReqId": "_mzc-ZQdAhSPuMxTlO-MC_oqaOqYCrdNQ39PVxisaiE", "clientId": 26862190133482, "clientIdAliasUsed": false, "clientName": "My CIBA Client", "deliveryMode": "POLL", "idTokenDuration": 0, "refreshTokenDuration": 0, "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}]}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/backchannel/authentication/complete \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"ticket\": \"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\", \"result\": \"AUTHORIZED\", \"subject\": \"john\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nBackchannelAuthenticationCompleteRequest req = new BackchannelAuthenticationCompleteRequest();\nreq.setTicket(\"NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q\");\nreq.setResult(BackchannelAuthenticationCompleteRequest.Result.AUTHORIZED);\nreq.setSubject(\"john\");\n\napi.backchannelAuthenticationComplete(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = BackchannelAuthenticationCompleteRequest()\nreq.ticket = 'NFIHGx_btVrWmtAD093D-87JxvT4DAtuijEkLVHbS4Q'\nreq.result = BackchannelAuthenticationCompleteResult.AUTHORIZED\nreq.subject = 'john'\n\napi.backchannelAuthenticationComplete(req)\n"}]
            x-stoplight: {"id": "5mx1pijlnqi1u"}
    "/api/{serviceId}/device/authorization":
        post:
            tags:
                - "Device Flow"
            summary: "Process Device Authorization Request"
            description: "This API parses request parameters of a [device authorization request](https://datatracker.ietf.org/doc/html/rfc8628#section-3.1)\nand returns necessary data for the authorization server implementation to process the device authorization\nrequest further.\n\n<br>\n<details>\n<summary>Description</summary>\n\nThis API is supposed to be called from the within the implementation of the device authorization\nendpoint of the service. The service implementation should retrieve the value of `action` from the\nresponse and take the following steps according to the value.\n\n**INTERNAL_SERVER_ERROR**\n\nWhen the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the API call from the authorization\nserver implementation was wrong or that an error occurred in Authlete.\n\nIn either case, from a viewpoint of the client application, it is an error on the server side.\nTherefore, the authorization server implementation should generate a response to the client application\nwith \"500 Internal Server Error\"s and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes t he error, so it can be\nused as the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client application.\n\n```\nHTTP/1.1 500 Internal Server Error\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**BAD_REQUEST**\n\nWhen the value of `action` is `BAD_REQUEST`, it means that the request from the client application\nis wrong.\n\nThe authorization server implementation should generate a response to the client application with\n\"400 Bad Request\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation should generate and return\nto the client application.\n\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**UNAUTHORIZED**\n\nWhen the value of `action` is `UNAUTHORIZED`, it means that client authentication of the device authorization\nrequest failed.\n\nThe authorization server implementation should generate a response to the client application with\n\"401 Unauthorized\" and `application/json`.\n\nThe value of `responseContent` is a JSON string which describes the error, so it can be used as\nthe entity body of the response.\n\nThe following illustrates the response which the service implementation must generate and return\nto the client application.\n\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: (challenge)\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{responseContent}\n```\n\n**OK**\n\nWhen the value of `action` is `OK`, it means that the device authorization request from the client\napplication is valid.\n\nThe authorization server implementation should generate a response to the client application with\n\"200 OK\" and `application/json`.\n\nThe `responseContent` is a JSON string which can be used as the entity body of the response.\n\nThe following illustrates the response which the authorization server implementation should generate\nand return to the client application.\n</details>\n"
            operationId: "device_authorization_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "parameters":
                                    type: "string"
                                    description: "Parameters of a device authorization request which are the request parameters that the device\nauthorization endpoint of the authorization server implementation received from the client application.\n\nThe value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)\nof the request from the client application.\n"
                                "clientId":
                                    type: "string"
                                    description: "The client ID extracted from Authorization header of the device authorization request from the\nclient application.\n\nIf the device authorization endpoint of the authorization server implementation supports Basic\n`Authentication` as a means of client authentication, and the request from the client application\ncontained its client ID in `Authorization` header, the value should be extracted and set to this\nparameter.\n"
                                "clientSecret":
                                    type: "string"
                                    description: "The client secret extracted from `Authorization` header of the device authorization request from\nthe client application.\n\nIf the device authorization endpoint of the authorization server implementation supports Basic\nAuthentication as a means of client authentication, and the request from the client application\ncontained its client secret in `Authorization` header, the value should be extracted and set to\nthis parameter.\n"
                                "clientCertificate":
                                    type: "string"
                                    description: "The client certificate used in the TLS connection between the client application and the device\nauthorization endpoint of the authorization server.\n"
                                "clientCertificatePath":
                                    type: "string"
                                    description: "The client certificate path presented by the client during client authentication. Each element\nis a string in PEM format.\n"
                            required:
                                - "parameters"
                        examples:
                            "default":
                                value: {"parameters": "client_id=26888344961664&scope=history.read", "clientId": "26888344961664", "clientSecret": "SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client\napplication. Its format varies depending on the value of `action` parameter.\n"
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID of the client application that has made the device authorization request.\n"
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias of the client application that has made the device authorization\nrequest.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "`true` if the value of the client_id request parameter included in the device authorization\nrequest is the client ID alias. `false` if the value is the original numeric client ID.\n"
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application which has made the device authorization request.\n"
                                    "clientAuthMethod":
                                        type: "string"
                                        description: "The client authentication method that should be performed at the device authorization\nendpoint.\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes requested by the device authorization request.\n\nBasically, this property holds the value of the scope request parameter in the device\nauthorization request. However, because unregistered scopes are dropped on Authlete\nside, if the `scope` request parameter contains unknown scopes, the list returned by\nthis property becomes different from the value of the `scope` request parameter.\n\nNote that `description` property and `descriptions` property of each scope object in the\narray contained in this property is always `null` even if descriptions of the scopes\nare registered.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            type: "object"
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "claimNames":
                                        type: "array"
                                        description: "The names of the claims which were requested indirectly via some special scopes.\nSee [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\nin OpenID Connect Core 1.0 for details.\n"
                                        items:
                                            type: "string"
                                    "acrs":
                                        type: "array"
                                        description: "The list of ACR values requested by the device authorization request.\n\nBasically, this property holds the value of the `acr_values` request parameter in the\ndevice authorization request. However, because unsupported ACR values are dropped\non Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,\nthe list returned by this property becomes different from the value of the `acr_values`\nrequest parameter.\n"
                                        items:
                                            type: "string"
                                    "deviceCode":
                                        type: "string"
                                        description: "The device verification code. This corresponds to the `device_code` property in the\nresponse to the client.\n"
                                    "userCode":
                                        type: "string"
                                        description: "The end-user verification code. This corresponds to the `user_code` property in the\nresponse to the client.\n"
                                    "verificationUri":
                                        type: "string"
                                        description: "The end-user verification URI. This corresponds to the `verification_uri` property in\nthe response to the client.\n"
                                    "verificationUriComplete":
                                        type: "string"
                                        description: "The end-user verification URI that includes the end-user verification code. This corresponds\nto the `verification_uri_complete` property in the response to the client.\n"
                                    "expiresIn":
                                        type: "integer"
                                        description: "The duration of the device verification code in seconds. This corresponds to the `expires_in`\nproperty in the response to the client.\n"
                                        format: "int32"
                                    "interval":
                                        type: "integer"
                                        description: "The minimum amount of time in seconds that the client must wait for between polling\nrequests to the token endpoint. This corresponds to the `interval` property in the response\nto the client.\n"
                                        format: "int32"
                                    "warnings":
                                        type: "array"
                                        description: "The warnings raised during processing the backchannel authentication request.\n"
                                        items:
                                            type: "string"
                                    "resources":
                                        type: "array"
                                        description: "The resources specified by the `resource` request parameters. See \"Resource Indicators\nfor OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "dynamicScopes":
                                        type: "array"
                                        description: "The dynamic scopes which the client application requested by the scope request parameter.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The scope name."
                                                "value":
                                                    type: "string"
                                                    description: "The scope value."
                                            type: "object"
                                            x-stoplight: {"id": "5mot14b0ec5an"}
                                    "gmAction":
                                        enum:
                                            - "CREATE"
                                            - "QUERY"
                                            - "REPLACE"
                                            - "REVOKE"
                                            - "MERGE"
                                        type: "string"
                                        description: "The grant management action of the device authorization request.\n\nThe `grant_management_action` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n"
                                    "grantId":
                                        type: "string"
                                        description: "the value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "grant":
                                        properties:
                                            "scopes":
                                                type: "array"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "scope":
                                                            type: "string"
                                                            description: "Space-delimited scopes.\n"
                                                        "resource":
                                                            type: "array"
                                                            description: "List of resource indicators.\n"
                                                            items:
                                                                type: "string"
                                            "claims":
                                                type: "array"
                                                description: "The claims associated with the Grant.\n"
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "elements":
                                                        type: "array"
                                                        description: "Elements of this authorization details.\n"
                                                        items:
                                                            type: "object"
                                                            properties:
                                                                "type":
                                                                    type: "string"
                                                                    description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                                "locations":
                                                                    type: "array"
                                                                    description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "actions":
                                                                    type: "array"
                                                                    description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "dataTypes":
                                                                    type: "array"
                                                                    description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "identifier":
                                                                    type: "string"
                                                                    description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                                "privileges":
                                                                    type: "array"
                                                                    description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "otherFields":
                                                                    type: "string"
                                                                    description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                            required:
                                                                - "type"
                                                            x-stoplight: {"id": "cp8779lbx2pfx"}
                                                type: "object"
                                                description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                                x-stoplight: {"id": "1nyzf1nnowolm"}
                                        type: "object"
                                    "grantSubject":
                                        type: "string"
                                        description: "The subject identifying the user who has given the grant identified\nby the `grant_id` request parameter of the device authorization\nrequest.\n\nAuthlete 2.3 and newer versions support <a href=\n\"https://openid.net/specs/fapi-grant-management.html\">Grant Management\nfor OAuth 2.0</a>. An authorization request may contain a `grant_id`\nrequest parameter which is defined in the specification. If the value of\nthe request parameter is valid, {@link #getGrantSubject()} will return\nthe subject of the user who has given the grant to the client application.\nAuthorization server implementations may use the value returned from\n{@link #getGrantSubject()} in order to determine the user to authenticate.\n\nThe user your system will authenticate during the authorization process\n(or has already authenticated) may be different from the user of the\ngrant. The first implementer's draft of \"Grant Management for OAuth 2.0\"\ndoes not mention anything about the case, so the behavior in the case is\nleft to implementations. Authlete will not perform the grant management\naction when the `subject` passed to Authlete does not match the\nuser of the grant.\n"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A220001", "resultMessage": "[A220001] The device authorization request was processed successfully.", "action": "OK", "clientId": 26888344961664, "clientIdAliasUsed": false, "clientName": "My Device Flow Client", "deviceCode": "p0qzXeRav8u6lJY9omjzR47KK58VwYN7j8xGUD7sq5I", "expiresIn": 3600, "interval": 0, "responseContent": "{\"user_code\":\"XWWKPBWVXQ\",\"device_code\":\"p0qzXeRav8u6lJY9omjzR47KK58VwYN7j8xGUD7sq5I\",\"verification_uri_complete\":\"https://my-service.com/df/verification?XWWKPBWVXQ\",\"verification_uri\":\"https://my-service.com/df/verification\",\"expires_in\":3600}", "scopes": [{"defaultEntry": false, "name": "history.read"}], "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}], "userCode": "XWWKPBWVXQ", "verificationUri": "https://my-service.com/df/verification", "verificationUriComplete": "https://my-service.com/df/verification?XWWKPBWVXQ"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/device/authorization \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"parameters\": \"client_id=26888344961664&scope=history.read\", \"clientId\": \"26888344961664\", \"clientSecret\":\"SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nDeviceAuthorizationRequest req = new DeviceAuthorizationRequest();\nreq.setParameters(...);\nreq.setClientId(\"26888344961664\");\nreq.setClientSecret(\"SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog\");\n\napi.deviceAuthorization(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = DeviceAuthorizationRequest()\nreq.parameters = ...\nreq.clientId = '26888344961664'\nreq.clientSecret = 'SfnYOLkJdofrb_66mTd6q03_SDoDEUnpXtvqFaE4k6L6UcpZzbdVJi2GpBj48AvGeDDllwsTruC62WYqQ_LGog'\n\napi.deviceAuthorization(req)\n"}]
            x-stoplight: {"id": "8q5kcfmhmczw6"}
    "/api/{serviceId}/device/verification":
        post:
            tags:
                - "Device Flow"
            summary: "Process Device Verification Request"
            description: "The API returns information associated with a user code.\n\n<br>\n<details>\n<summary>Description</summary>\n\nAfter receiving a response from the device authorization endpoint of the authorization server,\nthe client application shows the end-user the user code and the verification URI which are included\nin the device authorization response. Then, the end-user will access the verification URI using\na web browser on another device (typically, a smart phone). In normal implementations, the verification\nendpoint will return an HTML page with an input form where the end-user inputs a user code. The\nauthorization server will receive a user code from the form.\n\nAfter receiving a user code, the authorization server should call Authlete's `/device/verification`\nAPI with the user code. And then, the authorization server implementation should retrieve the value\nof `action` parameter from the API response and take the following steps according to the value.\n\n**SERVER_ERROR**\n\nWhen the value of `action` is `SERVER_ERROR`, it means that an error occurred on Authlete side. The\nauthorization server implementation should tell the end-user that something wrong happened and\nurge her to re-initiate a device flow.\n\n**NOT_EXIST**\n\nWhen the value of `action` is `NOT_EXIST`, it means that the user code does not exist. The authorization\nserver implementation should tell the end-user that the user code is invalid and urge her to retry\nto input a valid user code.\n\n**EXPIRED**\n\nWhen the value of `action` is `EXPIRED`, it means that the user code has expired. The authorization\nserver implementation should tell the end-user that the user code has expired and urge her to\nre-initiate a device flow.\n\n**VALID**\n\nWhen the value of `action` is `VALID`, it means that the user code exists, has not expired, and\nbelongs to the service. The authorization server implementation should interact with the end-user\nto ask whether she approves or rejects the authorization request from the device.\n</details>\n"
            operationId: "device_verification_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "userCode":
                                    type: "string"
                                    description: "A user code.\n"
                            required:
                                - "userCode"
                        examples:
                            "default":
                                value: {"userCode": "XWWKPBWVXQ"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "NOT_EXIST"
                                            - "EXPIRED"
                                            - "VALID"
                                        description: "The next action that the authorization server implementation should take."
                                    "clientId":
                                        type: "integer"
                                        description: "The client ID of the client application to which the user code has been issued.\n"
                                        format: "int64"
                                    "clientIdAlias":
                                        type: "string"
                                        description: "The client ID alias of the client application to which the user code has been issued.\n"
                                    "clientIdAliasUsed":
                                        type: "boolean"
                                        description: "`true` if the value of the `client_id` request parameter included in the device authorization\nrequest is the client ID alias. `false` if the value is the original numeric client ID.\n"
                                    "clientName":
                                        type: "string"
                                        description: "The name of the client application to which the user code has been issued.\n"
                                    "scopes":
                                        type: "array"
                                        description: "The scopes requested by the device authorization request.\n\nNote that `description` property and `descriptions` property of each scope object in\nthe array contained in this property is always null even if descriptions of the scopes\nare registered.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The name of the scope."
                                                "defaultEntry":
                                                    type: "boolean"
                                                    description: "`true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter. "
                                                "description":
                                                    type: "string"
                                                    description: "The description about the scope."
                                                "descriptions":
                                                    type: "array"
                                                    description: "The descriptions about this scope in multiple languages."
                                                    items:
                                                        type: "object"
                                                        properties:
                                                            "tag":
                                                                type: "string"
                                                                description: "The language tag part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        x-stoplight: {"id": "ggdx34yir4n2c"}
                                                "attributes":
                                                    type: "array"
                                                    description: "The attributes of the scope."
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                        type: "object"
                                                        x-stoplight: {"id": "n57wymw8an6im"}
                                            type: "object"
                                            x-stoplight: {"id": "2l5ay2evehuem"}
                                    "claimNames":
                                        type: "array"
                                        description: "The names of the claims which were requested indirectly via some special scopes.\nSee [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)\nin OpenID Connect Core 1.0 for details.\n\nThis property is always `null` if the `scope` request parameter of the device authorization\nrequest does not include the `openid` scope even if special scopes (such as `profile`)\nare included in the request (unless the openid scope is included in the default set\nof scopes which is used when the `scope` request parameter is omitted).\n"
                                        items:
                                            type: "string"
                                    "acrs":
                                        type: "array"
                                        description: "The list of ACR values requested by the device authorization request.\n"
                                        items:
                                            type: "string"
                                    "resources":
                                        type: "array"
                                        description: "The resources specified by the `resource` request parameters or by the `resource` property\nin the request object. If both are given, the values in the request object should be\nset. See \"Resource Indicators for OAuth 2.0\" for details.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "serviceAttributes":
                                        type: "array"
                                        description: "The attributes of this service that the client application belongs to.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "clientAttributes":
                                        type: "array"
                                        description: "The attributes of the client.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                            type: "object"
                                            x-stoplight: {"id": "n57wymw8an6im"}
                                    "dynamicScopes":
                                        type: "array"
                                        description: "The dynamic scopes which the client application requested by the scope request parameter.\n"
                                        items:
                                            properties:
                                                "name":
                                                    type: "string"
                                                    description: "The scope name."
                                                "value":
                                                    type: "string"
                                                    description: "The scope value."
                                            type: "object"
                                            x-stoplight: {"id": "5mot14b0ec5an"}
                                    "expiresAt":
                                        type: "integer"
                                        description: "Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.\n"
                                        format: "int64"
                                    "gmAction":
                                        enum:
                                            - "CREATE"
                                            - "QUERY"
                                            - "REPLACE"
                                            - "REVOKE"
                                            - "MERGE"
                                        type: "string"
                                        description: "The grant management action of the device authorization request.\n\nThe `grant_management_action` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).\n"
                                    "grantId":
                                        type: "string"
                                        description: "the value of the `grant_id` request parameter of the device authorization request.\n\nThe `grant_id` request parameter is defined in\n[Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)\n, which is supported by Authlete 2.3 and newer versions.\n"
                                    "grant":
                                        properties:
                                            "scopes":
                                                type: "array"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "scope":
                                                            type: "string"
                                                            description: "Space-delimited scopes.\n"
                                                        "resource":
                                                            type: "array"
                                                            description: "List of resource indicators.\n"
                                                            items:
                                                                type: "string"
                                            "claims":
                                                type: "array"
                                                description: "The claims associated with the Grant.\n"
                                                items:
                                                    type: "string"
                                            "authorizationDetails":
                                                properties:
                                                    "elements":
                                                        type: "array"
                                                        description: "Elements of this authorization details.\n"
                                                        items:
                                                            type: "object"
                                                            properties:
                                                                "type":
                                                                    type: "string"
                                                                    description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                                "locations":
                                                                    type: "array"
                                                                    description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "actions":
                                                                    type: "array"
                                                                    description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "dataTypes":
                                                                    type: "array"
                                                                    description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "identifier":
                                                                    type: "string"
                                                                    description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                                "privileges":
                                                                    type: "array"
                                                                    description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                                    items:
                                                                        type: "string"
                                                                "otherFields":
                                                                    type: "string"
                                                                    description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                            required:
                                                                - "type"
                                                            x-stoplight: {"id": "cp8779lbx2pfx"}
                                                type: "object"
                                                description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                                x-stoplight: {"id": "1nyzf1nnowolm"}
                                        type: "object"
                                    "grantSubject":
                                        type: "string"
                                        description: "The subject identifying the user who has given the grant identified\nby the `grant_id` request parameter of the device authorization\nrequest.\n\nAuthlete 2.3 and newer versions support <a href=\n\"https://openid.net/specs/fapi-grant-management.html\">Grant Management\nfor OAuth 2.0</a>. An authorization request may contain a `grant_id`\nrequest parameter which is defined in the specification. If the value of\nthe request parameter is valid, {@link #getGrantSubject()} will return\nthe subject of the user who has given the grant to the client application.\nAuthorization server implementations may use the value returned from\n{@link #getGrantSubject()} in order to determine the user to authenticate.\n\nThe user your system will authenticate during the authorization process\n(or has already authenticated) may be different from the user of the\ngrant. The first implementer's draft of \"Grant Management for OAuth 2.0\"\ndoes not mention anything about the case, so the behavior in the case is\nleft to implementations. Authlete will not perform the grant management\naction when the `subject` passed to Authlete does not match the\nuser of the grant.\n"
                                    "clientEntityId":
                                        type: "string"
                                        description: "The entity ID of the client.\n"
                                    "clientEntityIdUsed":
                                        type: "boolean"
                                        description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A224001", "resultMessage": "[A224001] The user code is valid.", "action": "VALID", "clientId": 26888344961664, "clientIdAliasUsed": false, "clientName": "My Device Flow Client", "expiresAt": 1642001978000, "scopes": [{"defaultEntry": false, "name": "history.read"}], "serviceAttributes": [{"key": "attribute1-key", "value": "attribute1-value"}, {"key": "attribute2-key", "value": "attribute2-value"}]}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/device/verification \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"userCode\": \"XWWKPBWVXQ\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nDeviceVerificationRequest req = new DeviceVerificationRequest();\nreq.setUserCode(\"XWWKPBWVXQ\");\n\napi.deviceVerification(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = DeviceVerificationRequest()\nreq.setUserCode('XWWKPBWVXQ')\n\napi.deviceVerification(req)\n"}]
            x-stoplight: {"id": "de72akj46psuw"}
    "/api/{serviceId}/device/complete":
        post:
            tags:
                - "Device Flow"
            summary: "Complete Device Authorization"
            description: "This API returns information about what action the authorization server should take after it receives\nthe result of end-user's decision about whether the end-user has approved or rejected a client\napplication's request.\n\n<br>\n<details>\n<summary>Description</summary>\n\nIn the device flow, an end-user accesses the verification endpoint of the authorization server where\nshe interacts with the verification endpoint and inputs a user code. The verification endpoint checks\nif the user code is valid and then asks the end-user whether she approves or rejects the authorization\nrequest which the user code represents.\n\nAfter the authorization server receives the decision of the end-user, it should call Authlete's\n`/device/complete` API to tell Authlete the decision.\n\nWhen the end-user was authenticated and authorization was granted to the client by the end-user,\nthe authorization server should call the API with `result=AUTHORIZED`. In this successful case,\nthe subject request parameter is mandatory. The API will update the database record so that `/auth/token`\nAPI can generate an access token later.\n\nIf the `scope` parameter of the device authorization request included the openid scope, an ID token\nis generated. In this case, `sub`, `authTime`, `acr` and `claims` request parameters in the API\ncall to `/device/complete` affect the ID token.\n\nWhen the authorization server receives the decision of the end-user and it indicates that she has\nrejected to give authorization to the client, the authorization server should call the API with\n`result=ACCESS_DENIED`. In this case, the API will update the database record so that the `/auth/token`\nAPI can generate an error response later. If `errorDescription` and `errorUri` request parameters\nare given to the `/device/complete` API, they will be used as the values of `error_description`\nand `error_uri` response parameters in the error response from the token endpoint.\n\nWhen the authorization server could not get decision from the end-user for some reasons, the authorization\nserver should call the API with `result=TRANSACTION_FAILED`. In this error case, the API will behave\nin the same way as in the case of `ACCESS_DENIED`. The only difference is that `expired_token` is\nused as the value of the `error` response parameter instead of `access_denied`.\n\nAfter receiving a response from the `/device/complete` API, the implementation of the authorization\nserver should retrieve the value of `action` from the response and take the following steps according\nto the value.\n\n**SERVER_ERROR**\n\nWhen the value of `action` is `SERVER_ERROR`, it means that an error occurred on Authlete side. The\nauthorization server implementation should tell the end-user that something wrong happened and\nurge her to re-initiate a device flow.\n\n**USER_CODE_NOT_EXIST**\n\nWhen the value of `action` is `USER_CODE_NOT_EXIST`, it means that the user code included in the API\ncall does not exist. The authorization server implementation should tell the end-user that the user\ncode has been invalidated and urge her to re-initiate a device flow.\n\n**USER_CODE_EXPIRED**\n\nWhen the value of `action` is `USER_CODE_EXPIRED`,  it means that the user code included in the API\ncall has expired. The authorization server implementation should tell the end-user that the user\ncode has expired and urge her to re-initiate a device flow.\n\n**INVALID_REQUEST**\n\nWhen the value of `action` is `INVALID_REQUEST`, it means that the API call is invalid. Probably,\nthe authorization server implementation has some bugs.\n\n**SUCCESS**\n\nWhen the value of `action` is `SUCCESS`, it means that the API call has been processed successfully.\nThe authorization server should return a successful response to the web browser the end-user is\nusing.\n</details>\n"
            operationId: "device_complete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "userCode":
                                    type: "string"
                                    description: "A user code.\n"
                                "result":
                                    type: "string"
                                    enum:
                                        - "TRANSACTION_FAILED"
                                        - "ACCESS_DENIED"
                                        - "AUTHORIZED"
                                    description: "The result of the end-user authentication and authorization. One of the following. Details are\ndescribed in the description.\n"
                                "subject":
                                    type: "string"
                                    description: "The subject (= unique identifier) of the end-user.\n"
                                "sub":
                                    type: "string"
                                    description: "The value of the sub claim that should be used in the ID token.\n"
                                "authTime":
                                    type: "integer"
                                    description: "The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.\n"
                                    format: "int64"
                                "acr":
                                    type: "string"
                                    description: "The reference of the authentication context class which the end-user authentication satisfied.\n"
                                "claims":
                                    type: "string"
                                    description: "Additional claims which will be embedded in the ID token.\n"
                                "properties":
                                    type: "array"
                                    description: "The extra properties associated with the access token.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "scopes":
                                    type: "array"
                                    description: "Scopes to replace the scopes specified in the original device authorization request with.\nWhen nothing is specified for this parameter, replacement is not performed.\n"
                                    items:
                                        type: "string"
                                "errorDescription":
                                    type: "string"
                                    description: "The description of the error. If this optional request parameter is given, its value is used as\nthe value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.\nTo comply with the specification strictly, the description must not include characters outside\nthe set `%x20-21 / %x23-5B / %x5D-7E`.\n"
                                "errorUri":
                                    type: "string"
                                    description: "The URI of a document which describes the error in detail. This corresponds to the `error_uri`\nproperty in the response to the client.\n"
                                "idtHeaderParams":
                                    type: "string"
                                    description: "JSON that represents additional JWS header parameters for ID tokens.\n"
                                "consentedClaims":
                                    type: "array"
                                    description: "the claims that the user has consented for the client application\nto know.\n"
                                    items:
                                        type: "string"
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT access token.\n"
                            required:
                                - "userCode"
                                - "result"
                                - "subject"
                        examples:
                            "default":
                                value: {"userCode": "XWWKPBWVXQ", "result": "AUTHORIZED", "subject": "john"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "SERVER_ERROR"
                                            - "USER_CODE_NOT_EXIST"
                                            - "USER_CODE_EXPIRED"
                                            - "INVALID_REQUEST"
                                            - "SUCCESS"
                                        description: "The next action that the authorization server implementation should take.\n"
                            examples:
                                "default":
                                    value: {"resultCode": "A241001", "resultMessage": "[A241001] The API call was processed successfully.", "action": "SUCCESS"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/device/complete \\\n-H 'Content-Type: application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"userCode\": \"XWWKPBWVXQ\", \"result\": \"AUTHORIZED\", \"subject\": \"john\" }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nDeviceCompleteRequest req = new DeviceCompleteRequest();\nreq.setUserCode(\"XWWKPBWVXQ\");\nreq.setResult(DeviceCompleteRequest.Result.AUTHORIZED);\nreq.setSubject(\"john\");\n\napi.deviceComplete(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = DeviceCompleteRequest()\nreq.setUserCode('XWWKPBWVXQ')\nreq.setResult(DeviceCompleteResult.AUTHORIZED)\nreq.setSubject('john')\n\napi.deviceComplete(req)\n"}]
            x-stoplight: {"id": "r2vwbamadp2h2"}
    "/api/{serviceId}/auth/token/get/list":
        get:
            tags:
                - "Token Operations"
            summary: "List Issued Tokens"
            description: "Get the list of access tokens that are associated with the service.\n"
            operationId: "auth_token_get_list_api"
            parameters:
                - name: "clientIdentifier"
                  in: "query"
                  description: "Client Identifier (client ID or client ID alias).\n"
                  required: false
                  schema:
                    type: "string"
                - name: "subject"
                  in: "query"
                  description: "Unique user ID.\n"
                  required: false
                  schema:
                    type: "string"
                - name: "start"
                  in: "query"
                  description: "Start index of search results (inclusive). The default value is 0."
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "end"
                  in: "query"
                  description: "End index of search results (exclusive). The default value is 5.\n"
                  required: false
                  schema:
                    type: "integer"
                    format: "int32"
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "start":
                                        type: "integer"
                                        description: "Start index of search results (inclusive).\n"
                                        format: "int32"
                                    "end":
                                        type: "integer"
                                        description: "End index of search results (exclusive).\n"
                                        format: "int32"
                                    "totalCount":
                                        type: "integer"
                                        description: "Unique ID of a client developer.\n"
                                        format: "int32"
                                    "client":
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "clientName":
                                                type: "string"
                                                description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientNames":
                                                type: "array"
                                                description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "description":
                                                type: "string"
                                                description: "The description about the client application."
                                            "descriptions":
                                                type: "array"
                                                description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientId":
                                                type: "integer"
                                                description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always set to `true`."
                                            "clientType":
                                                enum:
                                                    - "PUBLIC"
                                                    - "CONFIDENTIAL"
                                                type: "string"
                                                description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                        type: "object"
                                    "subject":
                                        type: "string"
                                        description: "Unique user ID of an end-user.\n"
                                    "accessTokens":
                                        type: "array"
                                        description: "An array of access tokens.\n"
                                        items:
                                            type: "object"
                                            properties:
                                                "accessTokenHash":
                                                    type: "string"
                                                    description: "The hash of the access token."
                                                "accessTokenExpiresAt":
                                                    type: "integer"
                                                    description: "The timestamp at which the access token will expire."
                                                    format: "int64"
                                                "refreshTokenHash":
                                                    type: "string"
                                                    description: "The hash of the refresh token."
                                                "refreshTokenExpiresAt":
                                                    type: "integer"
                                                    description: "The timestamp at which the refresh token will expire."
                                                    format: "int64"
                                                "createdAt":
                                                    type: "integer"
                                                    description: "The timestamp at which the access token was first created.\n"
                                                    format: "int64"
                                                "lastRefreshedAt":
                                                    type: "integer"
                                                    description: "The timestamp at which the access token was last refreshed using the refresh token.\n"
                                                    format: "int64"
                                                "clientId":
                                                    type: "integer"
                                                    description: "The ID of the client associated with the access token.\n"
                                                    format: "int64"
                                                "subject":
                                                    type: "string"
                                                    description: "The subject (= unique user ID) associated with the access token.\n"
                                                "grantType":
                                                    enum:
                                                        - "AUTHORIZATION_CODE"
                                                        - "IMPLICIT"
                                                        - "PASSWORD"
                                                        - "CLIENT_CREDENTIALS"
                                                        - "REFRESH_TOKEN"
                                                        - "CIBA"
                                                        - "DEVICE_CODE"
                                                        - "TOKEN_EXCHANGE"
                                                        - "JWT_BEARER"
                                                    type: "string"
                                                    description: "The grant type of the access token when the access token was created.\n"
                                                    x-stoplight: {"id": "033u82mqvyogn"}
                                                "scopes":
                                                    type: "array"
                                                    description: "The scopes associated with the access token.\n"
                                                    items:
                                                        type: "string"
                                                "properties":
                                                    type: "array"
                                                    description: "The properties associated with the access token.\n"
                                                    items:
                                                        properties:
                                                            "key":
                                                                type: "string"
                                                                description: "The key part."
                                                            "value":
                                                                type: "string"
                                                                description: "The value part."
                                                            "hidden":
                                                                type: "boolean"
                                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                                        type: "object"
                                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                            x-stoplight: {"id": "b651vold3xv58"}
                            examples:
                                "default":
                                    value: {"accessTokens": [{"accessTokenExpiresAt": 1642048149000, "accessTokenHash": "tC5hpjGylLiiw-vsd5_tqVHtYSUHblAGimEJ-5xqAco", "clientId": 26888344961664, "createdAt": 1642044549000, "grantType": "AUTHORIZATION_CODE", "lastRefreshedAt": 0, "refreshTokenExpiresAt": 1642048149000, "refreshTokenHash": "jv4B_7_kpY-Rez_E7bYIxGYnZk43w18uigkaeUe6tc4", "scopes": ["history.read"], "subject": "john"}, {"accessTokenExpiresAt": 1642051604000, "accessTokenHash": "Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg", "clientId": 26888344961664, "createdAt": 1642048004000, "grantType": "AUTHORIZATION_CODE", "lastRefreshedAt": 0, "refreshTokenExpiresAt": 1642051604000, "refreshTokenHash": "YHmwk4xETvoIJ_maWCpJDlpvmcFLkxmaaSS-v9KPng4", "scopes": ["history.read", "openid", "timeline.read"], "subject": "john"}, {"accessTokenExpiresAt": 1642052094000, "accessTokenHash": "UUatYXjkqYFbRQlnItjq03DtUYA2MRRtuL88GCbQpbw", "clientId": 26888344961664, "createdAt": 1642048494000, "grantType": "AUTHORIZATION_CODE", "lastRefreshedAt": 0, "refreshTokenExpiresAt": 1642052094000, "refreshTokenHash": "wjc-IXoScxDiVyBmRrB92I-B0zMXSSKw_qwP_WK1lFM", "scopes": ["history.read"], "subject": "john"}], "client": {"clientId": 26888344961664, "clientIdAliasEnabled": false, "clientName": "My Device Flow Client", "clientType": "CONFIDENTIAL", "number": 6260}, "end": 3, "start": 0, "subject": "john", "totalCount": 3}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/auth/token/get/list/?clientIdentifier=26888344961664\\&subject=john\\&start=0\\&end=3 \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nString clientIdentifier = \"26888344961664\";\nString subject = \"john\";\nint start = 0;\nint end = 3;\n\napi.getTokenList(clientIdentifier, subject, start, end);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nclientIdentifier = '26888344961664'\nsubject = 'john'\nstart = 0\nend = 3\n\napi.getTokenList(clientIdentifier, subject, start, end)\n"}]
            x-stoplight: {"id": "4vdleb7joaza2"}
    "/api/{serviceId}/auth/token/create":
        post:
            tags:
                - "Token Operations"
            summary: "Create Access Token"
            description: "Create an access token.\n"
            operationId: "auth_token_create_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "grantType":
                                    enum:
                                        - "AUTHORIZATION_CODE"
                                        - "IMPLICIT"
                                        - "PASSWORD"
                                        - "CLIENT_CREDENTIALS"
                                        - "REFRESH_TOKEN"
                                        - "CIBA"
                                        - "DEVICE_CODE"
                                        - "TOKEN_EXCHANGE"
                                        - "JWT_BEARER"
                                    type: "string"
                                    description: "The grant type of the access token when the access token was created.\n"
                                    x-stoplight: {"id": "033u82mqvyogn"}
                                "clientId":
                                    type: "integer"
                                    description: "The ID of the client application which will be associated with a newly created access token.\n"
                                    format: "int64"
                                "subject":
                                    type: "string"
                                    description: "The subject (= unique identifier) of the user who will be associated with a newly created access\ntoken. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must\nconsist of only ASCII characters and its length must not exceed 100.\n"
                                "scopes":
                                    type: "array"
                                    description: "The scopes which will be associated with a newly created access token. Scopes that are not supported\nby the service cannot be specified and requesting them will cause an error.\n"
                                    items:
                                        type: "string"
                                "accessTokenDuration":
                                    type: "integer"
                                    description: "The duration of a newly created access token in seconds. If the value is 0, the duration is determined\naccording to the settings of the service.\n"
                                    format: "int64"
                                "refreshTokenDuration":
                                    type: "integer"
                                    description: "The duration of a newly created refresh token in seconds. If the value is 0, the duration is\ndetermined according to the settings of the service.\n\nA refresh token is not created (1) if the service does not support `REFRESH_TOKEN`, or (2) if the\nspecified grant type is either `IMPLICIT`or `CLIENT_CREDENTIALS`.\n"
                                    format: "int64"
                                "properties":
                                    type: "array"
                                    description: "Extra properties to associate with a newly created access token. Note that properties parameter\nis accepted only when the HTTP method of the request is POST and Content-Type of the request is\n`application/json`, so don't use `GET` method or `application/x-www-form-urlencoded` if you want\nto specify properties.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "clientIdAliasUsed":
                                    type: "boolean"
                                    description: "A boolean request parameter which indicates whether to emulate that the client ID alias is used\ninstead of the original numeric client ID when a new access token is created.\n\nThis has an effect only on the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).\nWhen you access the UserInfo endpoint (which is expected to be implemented using Authlete's\n`/api/auth/userinfo` API and `/api/auth/userinfo/issue` API) with an access token which has been\ncreated using Authlete's `/api/auth/token/create` API with this property (`clientIdAliasUsed`)\n`true`, the client ID alias is used as the value of the aud claim in a response from the UserInfo\nendpoint.\n\nNote that if a client ID alias is not assigned to the client when Authlete's `/api/auth/token/create`\nAPI is called, this property (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).\n"
                                "accessToken":
                                    type: "string"
                                    description: "The value of the new access token.\n\nThe `/api/auth/token/create` API generates an access token. Therefore, callers of the API do not\nhave to specify values of newly created access tokens. However, in some cases, for example, if\nyou want to migrate existing access tokens from an old system to Authlete, you may want to specify\nvalues of access tokens. In such a case, you can specify the value of a newly created access token\nby passing a non-null value as the value of accessToken request parameter. The implementation\nof the `/api/auth/token/create` uses the value of the accessToken request parameter instead of\ngenerating a new value when the request parameter holds a non-null value.\n\nNote that if the hash value of the specified access token already exists in Authlete's database,\nthe access token cannot be inserted and the `/api/auth/token/create` API will report an error.\n"
                                "refreshToken":
                                    type: "string"
                                    description: "The value of the new refresh token.\n\nThe `/api/auth/token/create` API may generate a refresh token. Therefore, callers of the API do\nnot have to specify values of newly created refresh tokens. However, in some cases, for example,\nif you want to migrate existing refresh tokens from an old system to Authlete, you may want to\nspecify values of refresh tokens. In such a case, you can specify the value of a newly created\nrefresh token by passing a non-null value as the value of refreshToken request parameter. The\nimplementation of the `/api/auth/token/create` uses the value of the refreshToken request parameter\ninstead of generating a new value when the request parameter holds a non-null value.\n\nNote that if the hash value of the specified refresh token already exists in Authlete's database,\nthe refresh token cannot be inserted and the `/api/auth/token/create` API will report an error.\n"
                                "accessTokenPersistent":
                                    type: "boolean"
                                    description: "Get whether the access token expires or not. By default, all access tokens expire after a period\nof time determined by their service.\n\nIf this request parameter is `true`, then the access token will not automatically expire and must\nbe revoked or deleted manually at the service. If this request parameter is true, the `accessTokenDuration`\nrequest parameter is ignored.\n"
                                "certificateThumbprint":
                                    type: "string"
                                    description: "The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate\nwith the corresponding value MUST be presented with the access token when it is used by a client.\nThe value of this property must be a SHA256 certificate thumbprint, base64url encoded.\n"
                                "dpopKeyThumbprint":
                                    type: "string"
                                    description: "The thumbprint of the public key used for DPoP presentation of this token. If this property is\nset, a DPoP proof signed with the corresponding private key MUST be presented with the access\ntoken when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.\n"
                                "authorizationDetails":
                                    properties:
                                        "elements":
                                            type: "array"
                                            description: "Elements of this authorization details.\n"
                                            items:
                                                type: "object"
                                                properties:
                                                    "type":
                                                        type: "string"
                                                        description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                    "locations":
                                                        type: "array"
                                                        description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "actions":
                                                        type: "array"
                                                        description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "dataTypes":
                                                        type: "array"
                                                        description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "identifier":
                                                        type: "string"
                                                        description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                    "privileges":
                                                        type: "array"
                                                        description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "otherFields":
                                                        type: "string"
                                                        description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                required:
                                                    - "type"
                                                x-stoplight: {"id": "cp8779lbx2pfx"}
                                    type: "object"
                                    description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                    x-stoplight: {"id": "1nyzf1nnowolm"}
                                "resources":
                                    type: "array"
                                    description: "The value of the resources to associate with the token. This property represents the value of\none or more `resource` request parameters which is defined in \"RFC8707 Resource Indicators for\nOAuth 2.0\".\n"
                                    items:
                                        type: "string"
                                        format: "uri"
                                "forExternalAttachment":
                                    type: "boolean"
                                    description: "the flag which indicates whether the access token is for an external\nattachment.\n"
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT access token.\n"
                                "acr":
                                    type: "string"
                                    description: "The Authentication Context Class Reference of the user authentication that the authorization server performed \nduring the course of issuing the access token.\n"
                                "authTime":
                                    type: "integer"
                                    description: "The time when the user authentication was performed during the course of issuing the access token.\n"
                                    format: "int64"
                                "clientEntityIdUsed":
                                    type: "boolean"
                                    description: "Flag which indicates whether the entity ID of the client was used when the request for the access token was made.\n"
                            required:
                                - "grantType"
                                - "clientId"
                        examples:
                            "default":
                                value: {"grantType": "AUTHORIZATION_CODE", "clientId": 26888344961664, "subject": "john", "scopes": ["history.read", "timeline.read"]}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "FORBIDDEN"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "accessToken":
                                        type: "string"
                                        description: "The newly issued access token."
                                    "clientId":
                                        type: "integer"
                                        description: "The ID of the client application associated with the access token.\n"
                                        format: "int64"
                                    "expiresAt":
                                        type: "integer"
                                        description: "The time at which the access token expires.\n"
                                        format: "int64"
                                    "expiresIn":
                                        type: "integer"
                                        description: "The duration of the newly issued access token in seconds.\n"
                                        format: "int64"
                                    "grantType":
                                        type: "string"
                                        description: "The grant type for the newly issued access token.\n"
                                    "properties":
                                        type: "array"
                                        description: "The extra properties associated with the access token.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                                "hidden":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                            type: "object"
                                            x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                    "refreshToken":
                                        type: "string"
                                        description: "The newly issued refresh token.\n"
                                    "scopes":
                                        type: "array"
                                        description: "Scopes which are associated with the access token.\n"
                                        items:
                                            type: "string"
                                    "subject":
                                        type: "string"
                                        description: "The subject (= unique identifier) of the user associated with the newly issued access\ntoken.\n"
                                    "tokenType":
                                        type: "string"
                                        description: "The token type of the access token.\n"
                                    "jwtAccessToken":
                                        type: "string"
                                        description: "If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`\nis set to a `non-null` value), a JWT-based access token is issued along with the original\nrandom-string one.\n"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "forExternalAttachment":
                                        type: "boolean"
                                        description: "the flag which indicates whether the access token is for an external\nattachment.\n"
                                    "tokenId":
                                        type: "string"
                                        description: "Set the unique token identifier.\n"
                                    "refreshTokenScopes":
                                        type: "array"
                                        description: "The scopes associated with the refresh token. May be null.\n"
                                        items:
                                            type: "string"
                            examples:
                                "default":
                                    value: {"resultCode": "A109001", "resultMessage": "[A109001] An access token was created successfully: authorization_code, client = 26888344961664", "accessToken": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q", "action": "OK", "clientId": 26888344961664, "expiresAt": 1642048148973, "expiresIn": 3600, "grantType": "AUTHORIZATION_CODE", "refreshToken": "9beh15GWkGLseBBO1tPobnsGpKLHV3mTkm0EWnNBa4g", "scopes": ["history.read", "timeline.read"], "subject": "john", "tokenType": "Bearer"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/create \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"grantType\": \"AUTHORIZATION_CODE\", \"clientId\": 26888344961664, \"subject\": \"john\", \"scopes\": [ \"history.read\", \"timeline.read\" ] }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nTokenCreateRequest req = new TokenCreateRequest();\nreq.setGrantType(GrantType.AUTHORIZATION_CODE)\nreq.setClientId(26888344961664)\nreq.setSubject(\"john\")\nreq.setScopes({ \"history.read\", \"timeline.read\" });\n\napi.tokenCreate(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenCreateRequest()\nreq.grantType = GrantType.AUTHORIZATION_CODE\nreq.clientId = 26888344961664\nreq.subject = 'john'\nreq.scopes = [ 'history.read', 'timeline.read' ]\n\napi.tokenCreate(req)\n"}]
            x-stoplight: {"id": "a6rbhgpqoi6ng"}
    "/api/{serviceId}/auth/token/update":
        post:
            tags:
                - "Token Operations"
            summary: "Update Access Token"
            description: "Update an access token.\n"
            operationId: "auth_token_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "An access token.\n"
                                "accessTokenExpiresAt":
                                    type: "integer"
                                    description: "A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).\nIf the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0\n(or negative), the expiration date of the access token is not changed.\n"
                                    format: "int64"
                                "scopes":
                                    type: "array"
                                    description: "A new set of scopes assigned to the access token. Scopes that are not supported by the service\nand those that the client application associated with the access token is not allowed to request\nare ignored on the server side. If the `scopes` request parameter is not included in a request or\nits value is `null`, the scopes of the access token are not changed. Note that `properties` parameter\nis accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`\nif you want to specify `properties`.\n"
                                    items:
                                        type: "string"
                                "properties":
                                    type: "array"
                                    description: "A new set of properties assigned to the access token. If the `properties` request parameter is\nnot included in a request or its value is null, the properties of the access token are not changed.\n"
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "accessTokenExpiresAtUpdatedOnScopeUpdate":
                                    type: "boolean"
                                    description: "A boolean request parameter which indicates whether the API attempts to update the expiration\ndate of the access token when the scopes linked to the access token are changed by this request.\n"
                                "accessTokenHash":
                                    type: "string"
                                    description: "The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)\nbut the value of the token itself is not. The value of the `accessToken` parameter takes precedence.\n"
                                "accessTokenValueUpdated":
                                    type: "boolean"
                                    description: "A boolean request parameter which indicates whether to update the value of the access token in\nthe data store. If this parameter is set to `true` then a new access token value is generated\nby the server and returned in the response.\n"
                                "accessTokenPersistent":
                                    type: "boolean"
                                    description: "The flag which indicates whether the access token expires or not. By default, all access tokens\nexpire after a period of time determined by their service. If this request parameter is `true`\nthen the access token will not automatically expire and must be revoked or deleted manually at\nthe service.\n\nIf this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.\nIf this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed\nnormally.\n"
                                "certificateThumbprint":
                                    type: "string"
                                    description: "The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate\nwith the corresponding value MUST be presented with the access token when it is used by a client.\nThe value of this property must be a SHA256 certificate thumbprint, base64url encoded.\n"
                                "dpopKeyThumbprint":
                                    type: "string"
                                    description: "The thumbprint of the public key used for DPoP presentation of this token. If this property is\nset, a DPoP proof signed with the corresponding private key MUST be presented with the access\ntoken when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.\n"
                                "authorizationDetails":
                                    properties:
                                        "elements":
                                            type: "array"
                                            description: "Elements of this authorization details.\n"
                                            items:
                                                type: "object"
                                                properties:
                                                    "type":
                                                        type: "string"
                                                        description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                    "locations":
                                                        type: "array"
                                                        description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "actions":
                                                        type: "array"
                                                        description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "dataTypes":
                                                        type: "array"
                                                        description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "identifier":
                                                        type: "string"
                                                        description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                    "privileges":
                                                        type: "array"
                                                        description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                        items:
                                                            type: "string"
                                                    "otherFields":
                                                        type: "string"
                                                        description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                required:
                                                    - "type"
                                                x-stoplight: {"id": "cp8779lbx2pfx"}
                                    type: "object"
                                    description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                    x-stoplight: {"id": "1nyzf1nnowolm"}
                                "forExternalAttachment":
                                    type: "boolean"
                                    description: "the flag which indicates whether the access token is for an external\nattachment.\n"
                            required:
                                - "accessToken"
                        examples:
                            "default":
                                value: {"accessToken": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q", "scopes": ["history.read"]}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "INTERNAL_SERVER_ERROR"
                                            - "BAD_REQUEST"
                                            - "FORBIDDEN"
                                            - "NOT_FOUND"
                                            - "OK"
                                        description: "The next action that the authorization server implementation should take."
                                    "accessToken":
                                        type: "string"
                                        description: "The access token which has been specified by the request."
                                    "accessTokenExpiresAt":
                                        type: "integer"
                                        description: "The date at which the access token will expire.\n"
                                        format: "int64"
                                    "properties":
                                        type: "array"
                                        description: "The extra properties associated with the access token.\n"
                                        items:
                                            properties:
                                                "key":
                                                    type: "string"
                                                    description: "The key part."
                                                "value":
                                                    type: "string"
                                                    description: "The value part."
                                                "hidden":
                                                    type: "boolean"
                                                    description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                            type: "object"
                                            x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                    "scopes":
                                        type: "array"
                                        description: "The scopes associated with the access token.\n"
                                        items:
                                            type: "string"
                                    "authorizationDetails":
                                        properties:
                                            "elements":
                                                type: "array"
                                                description: "Elements of this authorization details.\n"
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "type":
                                                            type: "string"
                                                            description: "The type of this element.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"The type of authorization data as a string.\nThis field MAY define which other elements are allowed in the request. This element is REQUIRED.\"_\n\nThis property is always NOT `null`.\n"
                                                        "locations":
                                                            type: "array"
                                                            description: "The resources and/or resource servers. This property may be `null`.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the location of\nthe resource or resource server. This is typically composed of URIs.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "actions":
                                                            type: "array"
                                                            description: "The actions.\n\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of actions\nto be taken at the resource. The values of the strings are determined by the API being protected.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "dataTypes":
                                                            type: "array"
                                                            description: "From _\"OAuth 2.0 Rich Authorization Requests\"_: _\"An array of strings representing the kinds of data being requested\nfrom the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "identifier":
                                                            type: "string"
                                                            description: "The identifier of a specific resource.\nFrom _\"OAuth 2.0 Rich Authorization Requests\"_: _\"A string identifier indicating a specific resource available at the API.\"_\n\nThis property may be `null`.\n"
                                                        "privileges":
                                                            type: "array"
                                                            description: "The types or levels of privilege.\nFrom \"OAuth 2.0 Rich Authorization Requests\": _\"An array of strings representing the types or\nlevels of privilege being requested at the resource.\"_\n\nThis property may be `null`.\n"
                                                            items:
                                                                type: "string"
                                                        "otherFields":
                                                            type: "string"
                                                            description: "The RAR request in the JSON format excluding the pre-defined attributes such as `type` and `locations`.\nThe content and semantics are specific to the deployment and the use case implemented.\n"
                                                    required:
                                                        - "type"
                                                    x-stoplight: {"id": "cp8779lbx2pfx"}
                                        type: "object"
                                        description: "The authorization details. This represents the value of the `authorization_details`\nrequest parameter in the preceding device authorization request which is defined in\n\"OAuth 2.0 Rich Authorization Requests\".\n"
                                        x-stoplight: {"id": "1nyzf1nnowolm"}
                                    "tokenType":
                                        type: "string"
                                        description: "The token type associated with the access token.\n"
                                    "forExternalAttachment":
                                        type: "boolean"
                                        description: "the flag which indicates whether the access token is for an external\nattachment.\n"
                                    "tokenId":
                                        type: "string"
                                        description: "Set the unique token identifier.\n"
                                    "refreshTokenExpiresAt":
                                        type: "integer"
                                        description: "The datetime at which the newly issued refresh token will expire.\nThe value is represented in milliseconds since the Unix epoch (1970-01-01).\n"
                                        format: "int64"
                            examples:
                                "default":
                                    value: {"resultCode": "A135001", "resultMessage": "[A135001] Updated the access token successfully.", "accessToken": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q", "accessTokenExpiresAt": 1642048149000, "action": "OK", "scopes": ["history.read"], "tokenType": "Bearer"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/update \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"accessToken\": \"Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q\", \"scopes\": [ \"history.read\" ] }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nTokenUpdateRequest req = new TokenUpdateRequest();\nreq.setAccessToken(\"JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs\");\nreq.setScopes({ \"history.read\" });\n\napi.tokenUpdate(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenUpdateRequest()\nreq.accessToken = 'JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs'\nreq.scopes = [ 'history.read' ]\n\napi.tokenUpdate(req)\n"}]
            x-stoplight: {"id": "n8ep3tmhopr6l"}
    "/api/{serviceId}/auth/token/delete/{accessTokenIdentifier}":
        delete:
            tags:
                - "Token Operations"
            summary: "Delete Access Token"
            description: "Delete an access token.\n"
            operationId: "auth_token_delete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "accessTokenIdentifier"
                  in: "path"
                  description: "The identifier of an existing access token. The identifier is the value of the access token\nor the value of the hash of the access token.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "204":
                    description: "The access token was successfully deleted.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X DELETE https://us.authlete.com/api/21653835348762/auth/token/delete/Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nString accessTokenIdentifier = \"Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg\";\n\napi.tokenDelete(accessToken);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\naccessTokenIdentifier = 'Bk1QneTxkoLKw_RRB8ToVL25Plt075RvPK68N9cWWtg'\n\napi.tokenDelete(accessToken)\n"}]
            x-stoplight: {"id": "w6lh6h4q6zm48"}
    "/api/{serviceId}/auth/token/revoke":
        post:
            tags:
                - "Token Operations"
            summary: "Revoke Access Token"
            description: "Revoke an access token.\n"
            operationId: "auth_token_revoke_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessTokenIdentifier":
                                    type: "string"
                                    description: "The identifier of an access token to revoke\n\nThe hash of an access token is recognized as an identifier as well as the access token itself.\n"
                                "refreshTokenIdentifier":
                                    type: "string"
                                    description: "The identifier of a refresh token to revoke.\n\nThe hash of a refresh token is recognized as an identifier as well as the refresh token itself.\n"
                                "clientIdentifier":
                                    type: "string"
                                    description: "The client ID of the access token to be revoked.\n\nBoth the numeric client ID and the alias are recognized as an identifier\nof a client.\n"
                                "subject":
                                    type: "string"
                                    description: "The subject of a resource owner.\n"
                        examples:
                            "default":
                                value: {"accessTokenIdentifier": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "count":
                                        type: "integer"
                                        description: "The number of tokens revoked"
                            examples:
                                "default":
                                    value: {"resultCode": "A135001", "resultMessage": "[A135001] Updated the access token successfully.", "accessToken": "Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q", "accessTokenExpiresAt": 1642048149000, "action": "OK", "scopes": ["history.read"], "tokenType": "Bearer"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v -X POST https://us.authlete.com/api/21653835348762/auth/token/revoke \\\n-H 'Content-Type:application/json' \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d '{ \"accessToken\": \"Z5a40U6dWvw2gMoCOAFbZcM85q4HC0Z--0YKD9-Nf6Q\", \"scopes\": [ \"history.read\" ] }'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nTokenUpdateRequest req = new TokenUpdateRequest();\nreq.setAccessToken(\"JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs\");\nreq.setScopes({ \"history.read\" });\n\napi.tokenUpdate(req);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = TokenUpdateRequest()\nreq.accessToken = 'JDGiiM9PuWT63FIwGjG9eYlGi-aZMq6CQ2IB475JUxs'\nreq.scopes = [ 'history.read' ]\n\napi.tokenUpdate(req)\n"}]
            x-stoplight: {"id": "dswhz9x9ziijo"}
    "/api/{serviceId}/jose/verify":
        post:
            tags:
                - "Jose Object"
            summary: "Verify JOSE"
            description: "This API verifies a JOSE object.\n"
            operationId: "jose_verify_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: false
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "jose":
                                    type: "string"
                                    description: "A JOSE object.\n"
                                "mandatoryClaims":
                                    type: "string"
                                    description: "Mandatory claims that are required to be included in the JOSE object.\n"
                                "clockSkew":
                                    type: "integer"
                                    description: "Allowable clock skew in seconds.\n"
                                    format: "int32"
                                "clientIdentifier":
                                    type: "string"
                                    description: "The identifier of the client application whose keys are required for verification of the JOSE\nobject.\n"
                                "signedByClient":
                                    type: "boolean"
                                    description: "The flag which indicates whether the signature of the JOSE object has been signed by a client\napplication with the client's private key or a shared symmetric key.\n"
                            required:
                                - "jose"
                        examples:
                            "default":
                                value: {"jose": "eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA", "clockSkew": 100, "signedByClient": true, "clientIdentifier": "57297408867"}
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "valid":
                                        type: "boolean"
                                        description: "The result of the verification on the JOSE object.\n"
                                    "signatureValid":
                                        type: "boolean"
                                        description: "The result of the signature verification.\n"
                                    "missingClaims":
                                        type: "array"
                                        description: "The list of missing claims.\n"
                                        items:
                                            type: "string"
                                    "invalidClaims":
                                        type: "array"
                                        description: "The list of invalid claims.\n"
                                        items:
                                            type: "string"
                                    "errorDescriptions":
                                        type: "array"
                                        description: "The list of error messages.\n"
                                        items:
                                            type: "string"
                            examples:
                                "default":
                                    value: {"resultCode": "A160001", "resultMessage": "[A160001] The JOSE is valid.", "signatureValid": true, "valid": true}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/jose/verify \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F' \\\n-d jose=eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtwyxBgMXQqEPD5q5k9FaEWNk37K8uAtSwrA \\\n-d clockSkew=100 \\\n-d signedByClient=true \\\n-d clientIdentifier=57297408867\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\nJoseVerifyRequest req = new JoseVerifyRequest();\nreq.setJose(\"eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw\");\nreq.setClockSkew(100);\nreq.setSinedByClient(true);\nreq.setClientIdentifier(\"57297408867\");\n\napi.verifyJose(request);\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\nreq = JoseVerifyRequest()\nreq.jose = 'eyJhbGciOiJFUzI1NiJ9.eyJleHAiOjE1NTk4MTE3NTAsImlzcyI6IjU3Mjk3NDA4ODY3In0K.csmdholMVcmjqHe59YWgLGNvm7I5Whp4phQCoGxyrlRGMnTgsfxtw'\nreq.clockSkew = 100\nreq.sinedByClient = True\nreq.clientIdentifier = '57297408867'\n\napi.verifyJose(req)\n"}]
            x-stoplight: {"id": "kl9myrnhvicli"}
    "/api/{serviceId}/federation/configuration":
        post:
            tags:
                - "Federation Endpoint"
            summary: "Process Entity Configuration Request"
            description: "This API gathers the federation configuration about a service.\n\nThe authorization server implementation should\nretrieve the value of the <code>action</code>\nresponse parameter from the API response and take the following steps\naccording to the value.\n\n<h3><code>OK</code></h3>\n\nWhen the value of the <code> action</code> response\nparameter is <code>OK</code>, it means that Authlete\ncould prepare an entity configuration successfully.\n\nIn this case, the implementation of the entity configuration endpoint of the\nauthorization server should return an HTTP response to the client application\nwith the HTTP status code \"`200 OK`\" and the content type\n\"`application/entity-statement+jwt`\". The message body (= an entity\nconfiguration in the JWT format) of the response has been prepared by\nAuthlete's `/federation/configuration` API and it is available as the\n<code>responseContent</code> response parameter.\n\nThe implementation of the entity configuration endpoint can construct an\nHTTP response by doing like below.\n\n<pre style=\"border: solid 1px black; padding: 0.5em;\">\n200 OK\nContent-Type: application/entity-statement+jwt\n(Other HTTP headers)\n\n<i>(the value of the responseContent response parameter)</i></pre>\n\n<h3><code>NOT_FOUND</code></h3>\n\nWhen the value of the <code> action</code> response\nparameter is <code>NOT_FOUND</code>, it means that\nthe service configuration has not enabled the feature of <a href=\n\"https://openid.net/specs/openid-connect-federation-1_0.html\">OpenID Connect\nFederation 1.0</a> and so the client application should have not access the\nentity configuration endpoint.\n\nIn this case, the implementation of the entity configuration endpoint of the\nauthorization server should return an HTTP response to the client application\nwith the HTTP status code \"`404 Not Found`\" and the content type\n\"`application/json`\". The message body (= error information in the JSON\nformat) of the response has been prepared by Authlete's\n`/federation/configuration` API and it is available as the\n<code>responseContent</code> response parameter.\n\nThe implementation of the entity configuration endpoint can construct an\nHTTP response by doing like below.\n\n<pre style=\"border: solid 1px black; padding: 0.5em;\">\n404 Not Found\nContent-Type: application/json\n(Other HTTP headers)\n\n<i>(the value of the responseContent response parameter)</i></pre>\n\n<h3><code>INTERNAL_SERVER_ERROR</code></h3>\n\ncould prepare an entity configuration successfully.\n\nIn this case, the implementation of the entity configuration endpoint of the\nauthorization server should return an HTTP response to the client application\nwith the HTTP status code \"`200 OK`\" and the content type\n\"`application/entity-statement+jwt`\". The message body (= an entity\nconfiguration in the JWT format) of the response has been prepared by\nAuthlete's `/federation/configuration` API and it is available as the\n<code>responseContent</code> response parameter.\n\nThe implementation of the entity configuration endpoint can construct an\nHTTP response by doing like below.\n\n<pre style=\"border: solid 1px black; padding: 0.5em;\">\n200 OK\nContent-Type: application/entity-statement+jwt\n(Other HTTP headers)\n\n<i>(the value of the responseContent response parameter)</i></pre>\n\n\n</details>\n"
            operationId: "federation_configuration_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                content:
                    "application/json":
                        schema:
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NOT_FOUND"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation is to return to the client application.\nIts format varies depending on the value of `action` parameter.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-code-samples: [{"lang": "shell", "label": "curl", "source": "curl -v https://us.authlete.com/api/21653835348762/federation/configuration \\\n-u 'Authorization: Bearer V5a40R6dWvw2gMkCOBFdZcM95q4HC0Z-T0YKD9-nR6F'\n"}, {"lang": "java", "label": "java", "source": "AuthleteConfiguration conf = ...;\nAuthleteApi api = AuthleteApiFactory.create(conf);\n\napi.getFederationConfiguration();\n"}, {"lang": "python", "source": "conf = ...\napi = AuthleteApiImpl(conf)\n\napi.getFederationConfiguration(True)\n"}]
            x-stoplight: {"id": "c4fw2gm1sxyls"}
    "/api/{serviceId}/federation/registration":
        post:
            tags:
                - "Federation Endpoint"
            summary: "Process Federation Registration Request"
            description: "The Authlete API is for implementations of the <b>federation registration\nendpoint</b> that accepts \"explicit client registration\". Its details are\ndefined in <a href=\"https://openid.net/specs/openid-connect-federation-1_0.html\"\n>OpenID Connect Federation 1.0</a>.\n</p>\n\n<p>\nThe endpoint accepts `POST` requests whose `Content-Type`\nis either of the following.\n</p>\n\n<ol>\n  <li>`application/entity-statement+jwt`\n  <li>`application/trust-chain+json`\n</ol>\n\n<p>\nWhen the `Content-Type` of a request is\n`application/entity-statement+jwt`, the content of the request is\nthe entity configuration of a relying party that is to be registered.\nIn this case, the implementation of the federation registration endpoint\nshould call Authlete's `/federation/registration` API with the\nentity configuration set to the `entityConfiguration` request\nparameter.\n</p>\n\n<p>\nOn the other hand, when the `Content-Type` of a request is\n`application/trust-chain+json`, the content of the request is a\nJSON array that contains entity statements in JWT format. The sequence\nof the entity statements composes the trust chain of a relying party\nthat is to be registered. In this case, the implementation of the\nfederation registration endpoint should call Authlete's\n`/federation/registration` API with the trust chain set to the\n`trustChain` request parameter.\n</p>\n"
            operationId: "federation_registration_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "entityConfiguration":
                                    type: "string"
                                    description: "The entity configuration of a relying party.\n"
                                "trustChain":
                                    type: "string"
                                    description: "The trust chain of a relying party.\n"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "BAD_REQUEST"
                                            - "NOT_FOUND"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the authorization server implementation should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content that the authorization server implementation can use as the value of `WWW-Authenticate`\nheader on errors.\n"
                                    "client":
                                        properties:
                                            "number":
                                                type: "integer"
                                                description: "The sequential number of the client. The value of this property is assigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "serviceNumber":
                                                type: "integer"
                                                description: "The sequential number of the service of the client application. The value of this property is\nassigned by Authlete.\n"
                                                format: "int32"
                                                readOnly: true
                                            "clientName":
                                                type: "string"
                                                description: "The name of the client application. This property corresponds to `client_name` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientNames":
                                                type: "array"
                                                description: "Client names with language tags. If the client application has different names for different\nlanguages, this property can be used to register the names.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "description":
                                                type: "string"
                                                description: "The description about the client application."
                                            "descriptions":
                                                type: "array"
                                                description: "Descriptions about the client application with language tags. If the client application has different\ndescriptions for different languages, this property can be used to register the descriptions.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientId":
                                                type: "integer"
                                                description: "The client identifier used in Authlete API calls. The value of this property is assigned by Authlete."
                                                format: "int64"
                                                readOnly: true
                                            "clientSecret":
                                                type: "string"
                                                description: "The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this\nproperty is assigned by Authlete.\n\nNote that Authlete issues a client secret even to a \"public\" client application, but the client\napplication should not use the client secret unless it changes its client type to \"confidential\".\nThat is, a public client application should behave as if it had not been issued a client secret.\nTo be specific, a token request from a public client of Authlete should not come along with a\nclient secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)\nsays as follows.\n\n> Confidential clients or other clients issued client credentials MUST authenticate with the\nauthorization server as described in Section 2.3 when making requests to the token endpoint.\n"
                                                readOnly: true
                                            "clientIdAlias":
                                                type: "string"
                                                description: "The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By\ndefault, this is a string version of the `clientId` property.\n"
                                            "clientIdAliasEnabled":
                                                type: "boolean"
                                                description: "Deprecated. Always set to `true`."
                                            "clientType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "CONFIDENTIAL"
                                                description: "The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)\nfor details.\n"
                                            "applicationType":
                                                type: "string"
                                                enum:
                                                    - "WEB"
                                                    - "NATIVE"
                                                description: "The application type. The value of this property affects the validation steps for a redirect URI.\nSee the description about `redirectUris` property for more details.\n"
                                                x-stoplight: {"id": "44dohgvzte9r5"}
                                            "logoUri":
                                                type: "string"
                                                description: "The URL pointing to the logo image of the client application.\n\nThis property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "logoUris":
                                                type: "array"
                                                description: "Logo image URLs with language tags. If the client application has different logo images for\ndifferent languages, this property can be used to register URLs of the images.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "contacts":
                                                type: "array"
                                                description: "An array of email addresses of people responsible for the client application.\n\nThis property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client\nMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    type: "string"
                                            "tlsClientCertificateBoundAccessTokens":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client use TLS client certificate bound access tokens.\n"
                                            "dynamicallyRegistered":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client has been registered dynamically.\nFor more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                                readOnly: true
                                            "softwareId":
                                                type: "string"
                                                description: "The unique identifier string assigned by the client developer or software publisher used by\nregistration endpoints to identify the client software to be dynamically registered.\n\nThis property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "softwareVersion":
                                                type: "string"
                                                description: "The version identifier string for the client software identified by the software ID.\n\nThis property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)\nof [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).\n"
                                            "registrationAccessTokenHash":
                                                type: "string"
                                                description: "The hash of the registration access token for this client.\n"
                                            "createdAt":
                                                type: "integer"
                                                description: "The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "modifiedAt":
                                                type: "integer"
                                                description: "The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01)."
                                                format: "int64"
                                                readOnly: true
                                            "grantTypes":
                                                type: "array"
                                                description: "A string array of grant types which the client application declares that it will restrict itself to using.\nThis property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "AUTHORIZATION_CODE"
                                                        - "IMPLICIT"
                                                        - "PASSWORD"
                                                        - "CLIENT_CREDENTIALS"
                                                        - "REFRESH_TOKEN"
                                                        - "CIBA"
                                                        - "DEVICE_CODE"
                                                        - "TOKEN_EXCHANGE"
                                                        - "JWT_BEARER"
                                                    type: "string"
                                                    description: "The grant type of the access token when the access token was created.\n"
                                                    x-stoplight: {"id": "033u82mqvyogn"}
                                            "responseTypes":
                                                type: "array"
                                                description: "A string array of response types which the client application declares that it will restrict itself to using.\nThis property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,\n2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                items:
                                                    enum:
                                                        - "NONE"
                                                        - "CODE"
                                                        - "TOKEN"
                                                        - "ID_TOKEN"
                                                        - "CODE_TOKEN"
                                                        - "CODE_ID_TOKEN"
                                                        - "ID_TOKEN_TOKEN"
                                                        - "CODE_ID_TOKEN_TOKEN"
                                                    type: "string"
                                                    x-stoplight: {"id": "t7wed2d7tkpy7"}
                                            "redirectUris":
                                                type: "array"
                                                description: "Redirect URIs that the client application uses to receive a response from the authorization endpoint.\nRequirements for a redirect URI are as follows.\n\n**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))\n\n- Must be an absolute URI.\n- Must not have a fragment component.\n\n**Requirements by OpenID Connect** (From \"[OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),\napplication_type\")\n\n- The scheme of the redirect URI used for Implicit Grant by a client application whose application\nis `web` must be `https`. This is checked at runtime by Authlete.\n- The hostname of the redirect URI used for Implicit Grant by a client application whose application\ntype is `web` must not be `localhost`. This is checked at runtime by Authlete.\n- The scheme of the redirect URI used by a client application whose application type is `native`\nmust be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part\nis `localhost`. This is checked at runtime by Authlete.\n\n**Requirements by Authlete**\n\n- Must consist of printable ASCII letters only.\n- Must not exceed 200 letters.\n\nNote that Authlete allows the application type to be `null`. In other words, a client application\ndoes not have to choose `web` or `native` as its application type.\nIf the application type is `null`, the requirements by OpenID Connect are not checked at runtime.\n\nAn authorization request from a client application which has not registered any redirect URI\nfails unless at least all the following conditions are satisfied.\n\n- The client type of the client application is `confidential`.\n- The value of `response_type` request parameter is `code`.\n- The authorization request has the `redirect_uri` request parameter.\n- The value of `scope` request parameter does not contain `openid`.\n\nRFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.\nRegistration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for\ndetails), but OpenID Connect requires exact match.\n"
                                                items:
                                                    type: "string"
                                            "authorizationSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "authorizationEncryptionAlg":
                                                type: "string"
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "authorizationEncryptionEnc":
                                                type: "string"
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "tokenAuthMethod":
                                                enum:
                                                    - "NONE"
                                                    - "CLIENT_SECRET_BASIC"
                                                    - "CLIENT_SECRET_POST"
                                                    - "CLIENT_SECRET_JWT"
                                                    - "PRIVATE_KEY_JWT"
                                                    - "TLS_CLIENT_AUTH"
                                                    - "SELF_SIGNED_TLS_CLIENT_AUTH"
                                                type: "string"
                                                description: "The client authentication method that the client application declares that it uses at the token\nendpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic\nClient Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "mtxqrm8h7jibz"}
                                            "tokenAuthSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "selfSignedCertificateKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing a self-signed certificate of this client.\n"
                                            "tlsClientAuthSubjectDn":
                                                type: "string"
                                                description: "The string representation of the expected subject distinguished name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_subject_dn` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanDns":
                                                type: "string"
                                                description: "The string representation of the expected DNS subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_dns` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanUri":
                                                type: "string"
                                                description: "The string representation of the expected URI subject alternative name of the certificate this\nclient will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_uri` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanIp":
                                                type: "string"
                                                description: "The string representation of the expected IP address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_ip` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "tlsClientAuthSanEmail":
                                                type: "string"
                                                description: "The string representation of the expected email address subject alternative name of the certificate\nthis client will use in mutual TLS authentication.\n\nSee `tls_client_auth_san_email` in \"Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client\nRegistration\" for details.\n"
                                            "parRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client is required to use the pushed authorization request endpoint.\nThis property corresponds to the `require_pushed_authorization_requests` client metadata defined\nin \"OAuth 2.0 Pushed Authorization Requests\".\n"
                                            "requestObjectRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether authorization requests from this client are always required to\nutilize a request object by using either `request` or `request_uri` request parameter.\n\nIf this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is\nset to `false`, authorization requests from this client are processed as if `require_signed_request_object`\nclient metadata of this client is `true`. The metadata is defined in \"JAR (JWT Secured Authorization Request)\".\n"
                                            "requestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "requestEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "requestEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "requestUris":
                                                type: "array"
                                                description: "An array of URLs each of which points to a request object.\n\nAuthlete requires that URLs used as values for `request_uri` request parameter be pre-registered.\nThis property is used for the pre-registration.\nSee [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.\n"
                                                items:
                                                    type: "string"
                                            "defaultMaxAge":
                                                type: "integer"
                                                description: "The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.\n\nThis property corresponds to `default_max_age` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                format: "int32"
                                            "defaultAcrs":
                                                type: "array"
                                                description: "The default ACRs (Authentication Context Class References). This value is used when an authorization\nrequest from the client application has neither `acr_values` request parameter nor `acr` claim\nin claims request parameter.\n"
                                                items:
                                                    type: "string"
                                            "idTokenSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "idTokenEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "idTokenEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "authTimeRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.\n\nThis property corresponds to `require_auth_time` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "subjectType":
                                                type: "string"
                                                enum:
                                                    - "PUBLIC"
                                                    - "PAIRWISE"
                                                description: "The subject type that the client application requests. Details about the subject type are described in\n[OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).\n\nThis property corresponds to `subject_type` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                                x-stoplight: {"id": "zm5yes2y915ld"}
                                            "sectorIdentifierUri":
                                                type: "string"
                                                description: "The value of the sector identifier URI.\nThis represents the `sector_identifier_uri` client metadata which is defined in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)\n"
                                            "derivedSectorIdentifier":
                                                type: "string"
                                                description: "The sector identifier host component as derived from either the `sector_identifier_uri` or the\nregistered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs\nare also registered, the value of this property is `null`.\n"
                                                readOnly: true
                                            "jwksUri":
                                                type: "string"
                                                description: "The URL pointing to the JWK Set of the client application.\nThe content pointed to by the URL is JSON which complies with the format described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\nIf the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)\nand/or signs request objects, it must make available its JWK Set containing public keys for the\nencryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK\nSet from the URL as necessary.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "jwks":
                                                type: "string"
                                                description: "The content of the JWK Set of the client application.\nThe format is described in\n[JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).\nThe JWK Set must not include private keys of the client application.\n\n[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\nsays that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both\nproperties to be registered at the same time. However, Authlete does not use the content of `jwks`\nwhen `jwksUri` is registered.\n\nThis property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.\nClient Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "userInfoSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "userInfoEncryptionAlg":
                                                enum:
                                                    - "RSA1_5"
                                                    - "RSA_OAEP"
                                                    - "RSA_OAEP_256"
                                                    - "A128KW"
                                                    - "A192KW"
                                                    - "A256KW"
                                                    - "DIR"
                                                    - "ECDH_ES"
                                                    - "ECDH_ES_A128KW"
                                                    - "ECDH_ES_A192KW"
                                                    - "ECDH_ES_A256KW"
                                                    - "A128GCMKW"
                                                    - "A192GCMKW"
                                                    - "A256GCMKW"
                                                    - "PBES2_HS256_A128KW"
                                                    - "PBES2_HS384_A192KW"
                                                    - "PBES2_HS512_A256KW"
                                                type: "string"
                                                description: "this is the 'alg' header value for encrypted JWT tokens.\nDepending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:\n- as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects\n- as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object\n- as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens\n\n**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.\n"
                                                x-stoplight: {"id": "vxygld830b5on"}
                                            "userInfoEncryptionEnc":
                                                enum:
                                                    - "A128CBC_HS256"
                                                    - "A192CBC_HS384"
                                                    - "A256CBC_HS512"
                                                    - "A128GCM"
                                                    - "A192GCM"
                                                    - "A256GCM"
                                                type: "string"
                                                description: "This is the encryption algorithm to be used when encrypting a JWT on client or server side.\nDepending upon the context, this refers to encryption done by the client or by the server. For instance:\n  - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response\n  - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object\n  - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens\n"
                                                x-stoplight: {"id": "brcy9frf5xu5k"}
                                            "loginUri":
                                                type: "string"
                                                description: "The URL which a third party can use to initiate a login by the client application.\n\nThis property corresponds to `initiate_login_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUri":
                                                type: "string"
                                                description: "The URL pointing to the \"Terms Of Service\" page.\n\nThis property corresponds to `tos_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "tosUris":
                                                type: "array"
                                                description: "URLs of \"Terms Of Service\" pages with language tags.\n\nIf the client application has different \"Terms Of Service\" pages for different languages,\nthis property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "policyUri":
                                                type: "string"
                                                description: "The URL pointing to the page which describes the policy as to how end-user's profile data is used.\n\nThis property corresponds to `policy_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "policyUris":
                                                type: "array"
                                                description: "URLs of policy pages with language tags.\nIf the client application has different policy pages for different languages, this property can be used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "clientUri":
                                                type: "string"
                                                description: "The URL pointing to the home page of the client application.\n\nThis property corresponds to `client_uri` in\n[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).\n"
                                            "clientUris":
                                                type: "array"
                                                description: "Home page URLs with language tags.\nIf the client application has different home pages for different languages, this property can\nbe used to register the URLs.\n"
                                                items:
                                                    properties:
                                                        "tag":
                                                            type: "string"
                                                            description: "The language tag part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "ggdx34yir4n2c"}
                                            "bcDeliveryMode":
                                                type: "string"
                                                description: "The backchannel token delivery mode.\n\nThis property corresponds to the `backchannel_token_delivery_mode` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcNotificationEndpoint":
                                                type: "string"
                                                description: "The backchannel client notification endpoint.\n\nThis property corresponds to the `backchannel_client_notification_endpoint` metadata.\nThe backchannel token delivery mode is defined in the specification of \"CIBA (Client Initiated\nBackchannel Authentication)\".\n"
                                            "bcRequestSignAlg":
                                                enum:
                                                    - "NONE"
                                                    - "HS256"
                                                    - "HS384"
                                                    - "HS512"
                                                    - "RS256"
                                                    - "RS384"
                                                    - "RS512"
                                                    - "ES256"
                                                    - "ES384"
                                                    - "ES512"
                                                    - "PS256"
                                                    - "PS384"
                                                    - "PS512"
                                                    - "ES256K"
                                                    - "EdDSA"
                                                type: "string"
                                                description: "The signature algorithm for JWT. This value is represented on 'alg' attribute\nof the header of JWT.\n\nit's semantics depends upon where is this defined, for instance:\n  - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).\n  - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).\n  - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).\n"
                                                x-stoplight: {"id": "6hqm3efbv1d5d"}
                                            "bcUserCodeRequired":
                                                type: "boolean"
                                                description: "The boolean flag to indicate whether a user code is required when this client makes a backchannel\nauthentication request.\n\nThis property corresponds to the `backchannel_user_code_parameter` metadata.\n"
                                            "attributes":
                                                type: "array"
                                                description: "The attributes of this client.\n"
                                                items:
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                    type: "object"
                                                    x-stoplight: {"id": "n57wymw8an6im"}
                                            "extension":
                                                type: "object"
                                                properties:
                                                    "requestableScopes":
                                                        type: "array"
                                                        description: "The set of scopes that the client application is allowed to request. This paramter will be one\nof the following.\n\n  - `null`\n  - an empty set\n  - a set with at least one element\n\nWhen the value of this parameter is `null`, it means that the set of scopes that the client\napplication is allowed to request is the set of the scopes that the service supports. When the\nvalue of this parameter is an empty set, it means that the client application is not allowed to\nrequest any scopes. When the value of this parameter is a set with at least one element, it means\nthat the set is the set of scopes that the client application is allowed to request.\n"
                                                        items:
                                                            type: "string"
                                                    "requestableScopesEnabled":
                                                        type: "boolean"
                                                        description: "The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`, you\ncan define the set of scopes which this client application can request. If `false`, this client\napplication can request any scope which is supported by the authorization server.\n"
                                                    "accessTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of access tokens per client in seconds. In normal cases, the value of\nthe service's `accessTokenDuration` property is used as the duration of access tokens issued by\nthe service. However, if this `accessTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof access tokens issued to the client application.\n\nNote that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "refreshTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of refresh tokens per client in seconds. In normal cases, the value\nof the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued\nby the service. However, if this `refreshTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof refresh tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "idTokenDuration":
                                                        type: "integer"
                                                        description: "The value of the duration of ID tokens per client in seconds. In normal cases, the value\nof the service's `idTokenDuration` property is used as the duration of ID tokens issued\nby the service. However, if this `idTokenDuration` property holds a non-zero positive number\nand its value is less than the duration configured by the service, the value is used as the duration\nof ID tokens issued to the client application.\n\nNote that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,\ntoo. Authlete chooses the minimum value among the candidates.\n"
                                                        format: "int64"
                                                    "tokenExchangePermitted":
                                                        type: "boolean"
                                                        description: "Get the flag indicating whether the client is explicitly given a\npermission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])\n"
                                                x-stoplight: {"id": "0h8bpbau8xawc"}
                                            "authorizationDetailsTypes":
                                                type: "array"
                                                description: "The authorization details types that this client may use as values of the `type` field in\n`authorization_details`.\n\nThis property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich\nAuthorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.\n\nNote that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes\nto align with the change made by the 5th draft of the RAR specification.\n"
                                                items:
                                                    type: "string"
                                            "customMetadata":
                                                type: "string"
                                                description: "The custom client metadata in JSON format.\n\nStandard specifications define client metadata as necessary. The following are such examples.\n\n* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)\n* [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)\n* [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)\n* [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)\n* [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)\n* [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)\n* [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)\n* [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)\n\nStandard client metadata included in Client Registration Request and Client Update Request (cf.\n[OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)\nand [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set\nto corresponding properties of the client application. For example, the value of the `client_name`\nclient metadata in Client Registration/Update Request is set to the clientName property. On the\nother hand, unrecognized client metadata are discarded.\n\nBy listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property\nof Service, Authlete can recognize them and stores their values into the database. The stored\ncustom client metadata values can be referenced by this property.\n"
                                            "frontChannelRequestObjectEncryptionRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether encryption of request object is required when the request object\nis passed through the front channel.\n\nThis flag does not affect the processing of request objects at the Pushed Authorization Request\nEndpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).\nUnecrypted request objects are accepted at the endpoint even if this flag is `true`.\n\nThis flag does not indicate whether a request object is always required. There is a different\nflag, `requestObjectRequired`, for the purpose.\n\nEven if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionAlgMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`\nclient metadata.\n\nThe `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_alg\n>\n> OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,\n  since this signals to the OP that a client_secret value needs to be returned from which the\n  symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other\n  supported encryption algorithms or send unencrypted Request Objects, even when this parameter\n  is present. If both signing and encryption are requested, the Request Object will be signed\n  then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,\n  is that the RP is not declaring whether it might encrypt any Request Objects.\n\nThe point here is \"The RP MAY still use other supported encryption algorithms or send unencrypted\nRequest Objects, even when this parameter is present.\"\n\nThe property that represents the client metadata is `requestEncryptionAlg`. See the description\nof `requestEncryptionAlg` for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`\nflag of the service is `true`.\n"
                                            "requestObjectEncryptionEncMatchRequired":
                                                type: "boolean"
                                                description: "The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`\nclient metadata.\n\nThe `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic\nClient Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.\n\n> request_object_encryption_enc\n>\n> OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request\n  Objects sent to the OP. If request_object_encryption_alg is specified, the default for this\n  value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg\n  MUST also be provided.\n\nThe property that represents the client metadata is `requestEncryptionEnc`. See the description\nof `requestEncryptionEnc`  for details.\n\nEven if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`\nflag of the service is `true`.\n"
                                            "digestAlgorithm":
                                                type: "string"
                                                description: "The digest algorithm that this client requests the server to use\nwhen it computes digest values of <a href=\n\"https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments\"\n>external attachments</a>, which may be referenced from within ID tokens\nor userinfo responses (or any place that can have the `verified_claims` claim).\n\nPossible values are listed in the <a href=\n\"https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg\"\n>Hash Algorithm Registry</a> of IANA (Internet Assigned Numbers Authority),\nbut the server does not necessarily support all the values there. When\nthis property is omitted, `sha-256` is used as the default algorithm.\n\nThis property corresponds to the `digest_algorithm` client metadata\nwhich was defined by the third implementer's draft of\n[OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).\n"
                                            "singleAccessTokenPerSubject":
                                                type: "boolean"
                                                description: "If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.\n\nNote that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.\n\nEven if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.\n"
                                            "pkceRequired":
                                                type: "boolean"
                                                description: "The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.\n\nIf `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.\n\nSee [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.\n"
                                            "pkceS256Required":
                                                type: "boolean"
                                                description: "The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.\n\nIf this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request\nwhenever it includes the `code_challenge` request parameter.\nNeither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.\n"
                                            "dpopRequired":
                                                type: "boolean"
                                                description: "If the DPoP is required for this client\n"
                                            "automaticallyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"automatic\" client registration of OIDC Federation.\n"
                                            "explicitlyRegistered":
                                                type: "boolean"
                                                description: "The flag indicating whether this client was registered by the\n\"explicit\" client registration of OIDC Federation.\n"
                                            "rsRequestSigned":
                                                type: "boolean"
                                                description: "The flag indicating whether this service signs responses from the resource server.\n"
                                            "rsSignedRequestKeyId":
                                                type: "string"
                                                description: "The key ID of a JWK containing the public key used by this client to sign requests to the resource server.\n"
                                            "clientRegistrationTypes":
                                                type: "array"
                                                description: "The client registration types that the client has declared it may use.\n"
                                                items:
                                                    enum:
                                                        - "AUTOMATIC"
                                                        - "EXPLICIT"
                                                    type: "string"
                                                    description: "Values for the `client_registration_types` RP metadata and the\n `client_registration_types_supported` OP metadata that are defined in\n [OpenID Connect Federation 1.0](https://openid.net/specs/openid-connect-federation-1_0.html).\n"
                                            "organizationName":
                                                type: "string"
                                                description: "The human-readable name representing the organization that manages this client. This property corresponds\nto the organization_name client metadata that is defined in OpenID Connect Federation 1.0.\n"
                                            "signedJwksUri":
                                                type: "string"
                                                description: "The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property\ncorresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.\n"
                                            "entityId":
                                                type: "string"
                                                description: "the entity ID of this client.\n"
                                            "trustAnchorId":
                                                type: "string"
                                                description: "The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by\nthe mechanism defined in OpenID Connect Federation 1.0\n"
                                            "trustChain":
                                                type: "array"
                                                description: "The trust chain that was used when this client was registered or updated by the mechanism defined in\nOpenID Connect Federation 1.0\n"
                                                items:
                                                    type: "string"
                                            "trustChainExpiresAt":
                                                type: "integer"
                                                description: "the expiration time of the trust chain that was used when this client was registered or updated by the mechanism\ndefined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).\n"
                                                format: "int64"
                                            "trustChainUpdatedAt":
                                                type: "integer"
                                                description: "the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0\n"
                                                format: "int64"
                                            "locked":
                                                type: "boolean"
                                                description: "The flag which indicates whether this client is locked.\n"
                                            "credentialOfferEndpoint":
                                                type: "string"
                                                description: "The URL of the credential offer endpoint at which this client\n(wallet) receives a credential offer from the credential issuer.\n"
                                            "fapiModes":
                                                type: "array"
                                                description: "The FAPI modes for this client.\n\nWhen the value of this property is not `null`, Authlete always processes requests from this client\nbased on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile\nis supported by the service, and the FAPI modes for the service are set to `null`.\n\nFor instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete\nalways processes requests from this client based on \"Financial-grade API Security Profile 1.0 -\nPart 2: Advanced\" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by\nthe service, and the FAPI modes for the service are set to `null`.\n"
                                                items:
                                                    enum:
                                                        - "FAPI1_ADVANCED"
                                                        - "FAPI1_BASELINE"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_REQ"
                                                        - "FAPI2_MESSAGE_SIGNING_AUTH_RES"
                                                        - "FAPI2_MESSAGE_SIGNING_INTROSPECTION_RES"
                                                        - "FAPI2_SECURITY"
                                                    type: "string"
                                            "responseModes":
                                                type: "array"
                                                description: "The response modes that this client may use."
                                                items:
                                                    type: "string"
                                                    enum:
                                                        - "QUERY"
                                                        - "FRAGMENT"
                                                        - "FORM_POST"
                                                        - "JWT"
                                                        - "QUERY_JWT"
                                                        - "FRAGMENT_JWT"
                                                        - "FORM_POST_JWT"
                                            "credentialResponseEncryptionRequired":
                                                type: "boolean"
                                                description: "True if credential responses to this client must be always encrypted."
                                        type: "object"
                                        x-stoplight: {"id": "q48am9nz6ymbs"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "d4l5h7zm0ql1g"}
    "/api/info":
        get:
            tags:
                - "Utility Endpoints"
            summary: "Get Server Metadata"
            description: "get the server version and enabled features\n"
            operationId: "info_api"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "version":
                                        type: "string"
                                        description: "The server version."
                                    "features":
                                        type: "array"
                                        description: "the features that the server supports."
                                        items:
                                            type: "string"
                                required:
                                    - "version"
                                    - "features"
                            examples:
                                "default":
                                    value: {"version": "2.3.0", "features": ["ciba", "dcr", "deviceflow", "fapi", "openbanking", "hsm", "gm", "tc", "oidc_federation"]}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "td7i7uqomhxef"}
    "/api/{serviceId}/client/extension/requestable_scopes/get/{clientId}":
        get:
            tags:
                - "Client Management"
            summary: "Get Requestable Scopes"
            description: "Get the requestable scopes per client\n"
            operationId: "client_extension_requestables_scopes_get_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "requestableScopes":
                                        type: "array"
                                        items:
                                            type: "string"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "ihildvte1fq7s"}
    "/api/{serviceId}/client/extension/requestable_scopes/update/{clientId}":
        put:
            tags:
                - "Client Management"
            summary: "Update Requestable Scopes"
            description: "Update requestable scopes of a client\n"
            operationId: "client_extension_requestables_scopes_update_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "requestableScopes":
                                    type: "array"
                                    description: "The set of scopes that the client application is allowed to request.\nThis parameter will be one of the following. Details are described in the description.\n\n\n- an empty set\n- a set with at least one element\n\nIf this parameter contains scopes that the service does not support, those scopes are just\nignored. Also, if this parameter is `null` or is not included in the request, it is equivalent\nto calling `/client/extension/requestable_scopes/delete` API.\n"
                                    items:
                                        type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "requestableScopes":
                                        type: "array"
                                        items:
                                            type: "string"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "myf3i4sr4qre7"}
    "/api/{serviceId}/client/extension/requestable_scopes/delete/{clientId}":
        delete:
            tags:
                - "Client Management"
            summary: "Delete Requestable Scopes"
            description: "Delete requestable scopes of a client\n"
            operationId: "client_extension_requestables_scopes_delete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "clientId"
                  in: "path"
                  description: "A client ID.\n"
                  required: true
                  schema:
                    type: "string"
            responses:
                "204":
                    description: "Requestable scopes was successfully deleted."
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "olwgb9iaauig4"}
    "/api/{serviceId}/hsk/create":
        post:
            tags:
                - "Hardware Security Key"
            summary: "Create Security Key"
            operationId: "hsk_create_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "kty":
                                    type: "string"
                                    description: "The key type (EC or RSA)\n"
                                "use":
                                    type: "string"
                                    description: "The key on the HSM. \nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                "kid":
                                    type: "string"
                                    description: "Key ID for the key on the HSM.\n"
                                "hsmName":
                                    type: "string"
                                    description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                "handle":
                                    type: "string"
                                    description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                "publicKey":
                                    type: "string"
                                    description: "The public key that corresponds to the key on the HSM.\n"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "SUCCESS"
                                            - "INVALID_REQUEST"
                                            - "NOT_FOUND"
                                            - "SERVER_ERROR"
                                        description: "Result of the API call"
                                    "hsk":
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "primary-color", "label": "\U0001F3E2 Dedicated Cloud Required"}]
            x-stoplight: {"id": "sn453ler8rsan"}
    "/api/{serviceId}/hsk/delete/{handle}":
        delete:
            tags:
                - "Hardware Security Key"
            summary: "Delete Security Key"
            operationId: "hsk_delete_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "handle"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "204":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "SUCCESS"
                                            - "INVALID_REQUEST"
                                            - "NOT_FOUND"
                                            - "SERVER_ERROR"
                                        description: "Result of the API call"
                                    "hsk":
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "primary-color", "label": "\U0001F3E2 Dedicated Cloud Required"}]
            x-stoplight: {"id": "s2n5qedn7loly"}
    "/api/{serviceId}/hsk/get/{handle}":
        get:
            tags:
                - "Hardware Security Key"
            summary: "Get Security Key"
            operationId: "hsk_get_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
                - name: "handle"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "SUCCESS"
                                            - "INVALID_REQUEST"
                                            - "NOT_FOUND"
                                            - "SERVER_ERROR"
                                        description: "Result of the API call"
                                    "hsk":
                                        properties:
                                            "kty":
                                                type: "string"
                                                description: "The key type (EC or RSA)\n"
                                            "use":
                                                type: "string"
                                                description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                            "kid":
                                                type: "string"
                                                description: "Key ID for the key on the HSM.\n"
                                            "hsmName":
                                                type: "string"
                                                description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                            "handle":
                                                type: "string"
                                                description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                            "publicKey":
                                                type: "string"
                                                description: "The public key that corresponds to the key on the HSM.\n"
                                        type: "object"
                                        description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                        x-stoplight: {"id": "1trqwclfmbcwp"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "primary-color", "label": "\U0001F3E2 Dedicated Cloud Required"}]
            x-stoplight: {"id": "0cnfzoouh9d7d"}
    "/api/{serviceId}/hsk/get/list":
        get:
            tags:
                - "Hardware Security Key"
            summary: "List Security Keys"
            operationId: "hsk_get_list_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "SUCCESS"
                                            - "INVALID_REQUEST"
                                            - "SERVER_ERROR"
                                        description: "Result of the API call"
                                    "hsks":
                                        type: "array"
                                        description: "List of HSK"
                                        items:
                                            properties:
                                                "kty":
                                                    type: "string"
                                                    description: "The key type (EC or RSA)\n"
                                                "use":
                                                    type: "string"
                                                    description: "Get the use of the key on the HSM.\nWhen the key use is \"sig\" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.\nWhen the key use is \"enc\" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key\n"
                                                "kid":
                                                    type: "string"
                                                    description: "Key ID for the key on the HSM.\n"
                                                "hsmName":
                                                    type: "string"
                                                    description: "The name of the HSM.\nThe identifier for the HSM that sits behind the Authlete server. For example, \"google\".\n"
                                                "handle":
                                                    type: "string"
                                                    description: "The handle for the key on the HSM.\nA handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API\n"
                                                "publicKey":
                                                    type: "string"
                                                    description: "The public key that corresponds to the key on the HSM.\n"
                                            type: "object"
                                            description: "Holds information about a key managed in an HSM (Hardware Security Module)\n"
                                            x-stoplight: {"id": "1trqwclfmbcwp"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-badges: [{"color": "primary-color", "label": "\U0001F3E2 Dedicated Cloud Required"}]
            x-stoplight: {"id": "144y0pvzlcslz"}
    "/api/misc/echo":
        get:
            tags:
                - "Utility Endpoints"
            summary: "Echo"
            description: "Echo test endpoint. Will return all path parameters in the request\n"
            operationId: "misc_echo_api"
            responses:
                "200":
                    description: "Successfully echoed the request parameters\n"
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "mykiqrf865p36"}
    "/api/{serviceId}/vci/metadata":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/metadata API"
            operationId: "vci_metadata_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "pretty":
                                    type: "boolean"
                                    description: "The flag indicating whether the metadata is written in the pretty\nformat or not.\n"
                            required:
                                - "pretty"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NOT_FOUND"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the implementation of the credential issuer\nmetadata endpoint (`/.well-known/openid-credential-issuer`)\nshould take after getting a response from Authlete's\n`/vci/metadata` API.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "Get the content that the implementation of the credential issuer\nmetadata endpoint should use when it constructs a response.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "oiyy7nszirpjz"}
    "/api/{serviceId}/vci/jwtissuer":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/jwtissuer API"
            operationId: "vci_jwtissuer_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "pretty":
                                    type: "boolean"
                                    description: "The flag indicating whether the metadata is written in the pretty\nformat or not.\n"
                            required:
                                - "pretty"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NOT_FOUND"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the implementation of the JWT issuer metadata\nendpoint (`/.well-known/jwt-issuer`) should take after getting\na response from Authlete's `/vci/jwtissuer` API.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "Get the content that the implementation of the credential issuer\nmetadata endpoint should use when it constructs a response.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "nmflmdnrv8qgf"}
    "/api/{serviceId}/vci/jwks":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/jwks API"
            operationId: "vci_jwks_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "pretty":
                                    type: "boolean"
                                    description: "The flag indicating whether the metadata is written in the pretty\nformat or not.\n"
                            required:
                                - "pretty"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NOT_FOUND"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the implementation of the JWK Set document\nendpoint of the credential issuer should take after getting a\nresponse from Authlete's `/vci/jwks` API.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "Get the content that the implementation of the credential issuer\nmetadata endpoint should use when it constructs a response.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "5viih5omxj70p"}
    "/api/{serviceId}/vci/offer/create":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/offer/create API"
            operationId: "vci_offer_create_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "credentials":
                                    type: "string"
                                    description: "The value of the `credentials` object in the JSON format."
                                "authorizationCodeGrantIncluded":
                                    type: "boolean"
                                    description: "The flag indicating whether the `authorization_code` object is\nincluded in the `grants` object.\n"
                                "issuerStateIncluded":
                                    type: "boolean"
                                    description: "The flag indicating whether the `issuer_state` property is\nincluded in the `authorization_code` object in the `grants`\nobject.\n"
                                "preAuthorizedCodeGrantIncluded":
                                    type: "boolean"
                                    description: "The flag to include the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object\nin the `grants` object.\n"
                                "userPinRequired":
                                    type: "boolean"
                                    description: "The value of the `user_pin_required` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                "userPinLength":
                                    type: "integer"
                                    description: "The length of the user PIN to generate."
                                    format: "int32"
                                "subject":
                                    type: "string"
                                    description: "The subject associated with the credential offer."
                                "duration":
                                    type: "integer"
                                    description: "The duration of the credential offer."
                                    format: "int64"
                                "context":
                                    type: "string"
                                    description: "The general-purpose arbitrary string."
                                "properties":
                                    type: "array"
                                    description: "Extra properties to associate with the credential offer."
                                    items:
                                        properties:
                                            "key":
                                                type: "string"
                                                description: "The key part."
                                            "value":
                                                type: "string"
                                                description: "The value part."
                                            "hidden":
                                                type: "boolean"
                                                description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                        type: "object"
                                        x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                "jwtAtClaims":
                                    type: "string"
                                    description: "Additional claims that are added to the payload part of the JWT\naccess token.\n"
                                "authTime":
                                    type: "integer"
                                    description: "The time at which the user authentication was performed during\nthe course of issuing the credential offer.\n"
                                    format: "int64"
                                "acr":
                                    type: "string"
                                    description: "The Authentication Context Class Reference of the user authentication\nperformed during the course of issuing the credential offer.\n"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "CREATED"
                                            - "FORBIDDEN"
                                            - "CALLER_ERROR"
                                            - "AUTHLETE_ERROR"
                                        description: "The result of the `/vci/offer/create` API call."
                                    "info":
                                        properties:
                                            "identifier":
                                                type: "string"
                                                description: "The identifier of the credential offer."
                                            "credentialOffer":
                                                type: "string"
                                                description: "The credential offer in the JSON format."
                                            "credentialIssuer":
                                                type: "string"
                                                description: "The identifier of the credential issuer."
                                            "credentials":
                                                type: "string"
                                                description: "The value of the `credentials` object in the JSON format."
                                            "authorizationCodeGrantIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the `authorization_code` object is\nincluded in the `grants` object.\n"
                                            "issuerStateIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the `issuer_state` property is\nincluded in the `authorization_code` object in the `grants`\nobject.\n"
                                            "issuerState":
                                                type: "string"
                                                description: "The value of the `issuer_state` property in the\n`authorization_code` object in the `grants` object.\n"
                                            "preAuthorizedCodeGrantIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object is\nincluded in the `grants` object.\n"
                                            "preAuthorizedCode":
                                                type: "string"
                                                description: "The value of the `pre-authorized_code` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                            "userPinRequired":
                                                type: "boolean"
                                                description: "The value of the `user_pin_required` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                            "userPin":
                                                type: "string"
                                                description: "The value of the user PIN associated with the credential offer."
                                            "subject":
                                                type: "string"
                                                description: "The subject associated with the credential offer."
                                            "expiresAt":
                                                type: "integer"
                                                description: "The time at which the credential offer will expire."
                                                format: "int64"
                                            "context":
                                                type: "string"
                                                description: "The general-purpose arbitrary string."
                                            "properties":
                                                type: "array"
                                                description: "Extra properties to associate with the credential offer."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                        "hidden":
                                                            type: "boolean"
                                                            description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                                    x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                            "jwtAtClaims":
                                                type: "string"
                                                description: "Additional claims that are added to the payload part of the JWT\naccess token.\n"
                                            "authTime":
                                                type: "integer"
                                                description: "The time at which the user authentication was performed during\nthe course of issuing the credential offer.\n"
                                                format: "int64"
                                            "acr":
                                                type: "string"
                                                description: "The Authentication Context Class Reference of the user authentication\nperformed during the course of issuing the credential offer.\n"
                                        type: "object"
                                        x-stoplight: {"id": "2b3b8gpjt66hn"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "zpps87z0lzux8"}
    "/api/{serviceId}/vci/offer/info":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/offer/info API"
            operationId: "vci_offer_info_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "identifier":
                                    type: "string"
                                    description: "The identifier of the credential offer."
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "FORBIDDEN"
                                            - "NOT_FOUND"
                                            - "CALLER_ERROR"
                                            - "AUTHLETE_ERROR"
                                        description: "The result of the `/vci/offer/info` API call."
                                    "info":
                                        properties:
                                            "identifier":
                                                type: "string"
                                                description: "The identifier of the credential offer."
                                            "credentialOffer":
                                                type: "string"
                                                description: "The credential offer in the JSON format."
                                            "credentialIssuer":
                                                type: "string"
                                                description: "The identifier of the credential issuer."
                                            "credentials":
                                                type: "string"
                                                description: "The value of the `credentials` object in the JSON format."
                                            "authorizationCodeGrantIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the `authorization_code` object is\nincluded in the `grants` object.\n"
                                            "issuerStateIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the `issuer_state` property is\nincluded in the `authorization_code` object in the `grants`\nobject.\n"
                                            "issuerState":
                                                type: "string"
                                                description: "The value of the `issuer_state` property in the\n`authorization_code` object in the `grants` object.\n"
                                            "preAuthorizedCodeGrantIncluded":
                                                type: "boolean"
                                                description: "The flag indicating whether the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object is\nincluded in the `grants` object.\n"
                                            "preAuthorizedCode":
                                                type: "string"
                                                description: "The value of the `pre-authorized_code` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                            "userPinRequired":
                                                type: "boolean"
                                                description: "The value of the `user_pin_required` property in the\n`urn:ietf:params:oauth:grant-type:pre-authorized_code` object in\nthe `grants` object.\n"
                                            "userPin":
                                                type: "string"
                                                description: "The value of the user PIN associated with the credential offer."
                                            "subject":
                                                type: "string"
                                                description: "The subject associated with the credential offer."
                                            "expiresAt":
                                                type: "integer"
                                                description: "The time at which the credential offer will expire."
                                                format: "int64"
                                            "context":
                                                type: "string"
                                                description: "The general-purpose arbitrary string."
                                            "properties":
                                                type: "array"
                                                description: "Extra properties to associate with the credential offer."
                                                items:
                                                    type: "object"
                                                    properties:
                                                        "key":
                                                            type: "string"
                                                            description: "The key part."
                                                        "value":
                                                            type: "string"
                                                            description: "The value part."
                                                        "hidden":
                                                            type: "boolean"
                                                            description: "The flag to indicate whether this property hidden from or visible to client applications.\nIf `true`, this property is hidden from client applications. Otherwise, this property is visible to client applications.\n"
                                                    x-stoplight: {"id": "mlyk1uxwlmf4w"}
                                            "jwtAtClaims":
                                                type: "string"
                                                description: "Additional claims that are added to the payload part of the JWT\naccess token.\n"
                                            "authTime":
                                                type: "integer"
                                                description: "The time at which the user authentication was performed during\nthe course of issuing the credential offer.\n"
                                                format: "int64"
                                            "acr":
                                                type: "string"
                                                description: "The Authentication Context Class Reference of the user authentication\nperformed during the course of issuing the credential offer.\n"
                                        type: "object"
                                        x-stoplight: {"id": "2b3b8gpjt66hn"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "4qj4s58koqoot"}
    "/api/{serviceId}/vci/single/parse":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/single/parse API"
            operationId: "vci_single_parse_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "The access token that came along with the credential request."
                                "requestContent":
                                    type: "string"
                                    description: "The message body of the credential request."
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the credential endpoint should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content of the response to the request sender."
                                    "info":
                                        type: "object"
                                        properties:
                                            "identifier":
                                                type: "string"
                                                description: "The identifier of the credential offer."
                                            "format":
                                                type: "string"
                                                description: "The value of the format parameter in the credential request."
                                            "bindingKey":
                                                type: "string"
                                                description: "The binding key specified by the proof in the credential request."
                                            "details":
                                                type: "string"
                                                description: "The details about the credential request."
                                        x-stoplight: {"id": "lr94p39d227vx"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "2ykjl3vdat21q"}
    "/api/{serviceId}/vci/single/issue":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/single/issue API"
            operationId: "vci_single_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "The access token that came along with the credential request."
                                "order":
                                    type: "object"
                                    properties:
                                        "requestIdentifier":
                                            type: "string"
                                            description: "The identifier of a credential request."
                                        "credentialPayload":
                                            type: "string"
                                            description: "The additional payload that will be added into a credential to be issued."
                                        "issuanceDeferred":
                                            type: "boolean"
                                            description: "The flag indicating whether to defer credential issuance."
                                        "credentialDuration":
                                            type: "integer"
                                            description: "The duration of a credential to be issued."
                                            format: "int64"
                                        "signingKeyId":
                                            type: "string"
                                            description: "The key ID of a private key that should be used for signing a credential\nto be issued.\n"
                                    x-stoplight: {"id": "qlfpmzeak2r1h"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "ACCEPTED"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "INTERNAL_SERVER_ERROR"
                                            - "CALLER_ERROR"
                                        description: "The next action that the implementation of the credential endpoint\nshould take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content of the response that the implementation of the credential\nendpoint should return.\n"
                                    "transactionId":
                                        type: "string"
                                        description: "The issued transaction ID.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "qlmzb8vc6jz67"}
    "/api/{serviceId}/vci/batch/parse":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/batch/parse API"
            operationId: "vci_batch_parse_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "The access token that came along with the credential request."
                                "requestContent":
                                    type: "string"
                                    description: "The message body of the batch credential request."
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the batch credential endpoint should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content of the response to the request sender."
                                    "info":
                                        type: "array"
                                        description: "Information about the credential requests in the batch credential\nrequest.\n"
                                        items:
                                            properties:
                                                "identifier":
                                                    type: "string"
                                                    description: "The identifier of the credential offer."
                                                "format":
                                                    type: "string"
                                                    description: "The value of the format parameter in the credential request."
                                                "bindingKey":
                                                    type: "string"
                                                    description: "The binding key specified by the proof in the credential request."
                                                "details":
                                                    type: "string"
                                                    description: "The details about the credential request."
                                            type: "object"
                                            x-stoplight: {"id": "lr94p39d227vx"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "do37ev856f7dj"}
    "/api/{serviceId}/vci/batch/issue":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/batch/issue API"
            operationId: "vci_batch_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "The access token that came along with the credential request."
                                "orders":
                                    type: "array"
                                    description: "The instructions for issuance of credentials and/or transaction IDs."
                                    items:
                                        properties:
                                            "requestIdentifier":
                                                type: "string"
                                                description: "The identifier of a credential request."
                                            "credentialPayload":
                                                type: "string"
                                                description: "The additional payload that will be added into a credential to be issued."
                                            "issuanceDeferred":
                                                type: "boolean"
                                                description: "The flag indicating whether to defer credential issuance."
                                            "credentialDuration":
                                                type: "integer"
                                                description: "The duration of a credential to be issued."
                                                format: "int64"
                                            "signingKeyId":
                                                type: "string"
                                                description: "The key ID of a private key that should be used for signing a credential\nto be issued.\n"
                                        type: "object"
                                        x-stoplight: {"id": "qlfpmzeak2r1h"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "INTERNAL_SERVER_ERROR"
                                            - "CALLER_ERROR"
                                        description: "The next action that the implementation of the batch credential\nendpoint should take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content of the response that the implementation of the batch\ncredential endpoint should return.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "07ewp66yg4qun"}
    "/api/{serviceId}/vci/deferred/parse":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/deferred/parse API"
            operationId: "vci_deferred_parse_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "accessToken":
                                    type: "string"
                                    description: "The access token that came along with the deferred credential request."
                                "requestContent":
                                    type: "string"
                                    description: "The message body of the deferred credential request."
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "BAD_REQUEST"
                                            - "UNAUTHORIZED"
                                            - "FORBIDDEN"
                                            - "INTERNAL_SERVER_ERROR"
                                        description: "The next action that the deferred credential endpoint should take."
                                    "responseContent":
                                        type: "string"
                                        description: "The content of the response to the request sender."
                                    "info":
                                        properties:
                                            "identifier":
                                                type: "string"
                                                description: "The identifier of the credential offer."
                                            "format":
                                                type: "string"
                                                description: "The value of the format parameter in the credential request."
                                            "bindingKey":
                                                type: "string"
                                                description: "The binding key specified by the proof in the credential request."
                                            "details":
                                                type: "string"
                                                description: "The details about the credential request."
                                        description: "Information about the credential request bound to the transaction ID."
                                        type: "object"
                                        x-stoplight: {"id": "lr94p39d227vx"}
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "tw5dbjywbb39d"}
    "/api/{serviceId}/vci/deferred/issue":
        post:
            tags:
                - "Verifiable Credential Issuer"
            summary: "/api/{serviceId}/vci/deferred/issue API"
            operationId: "vci_deferred_issue_api"
            parameters:
                - name: "serviceId"
                  in: "path"
                  description: "A service ID."
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "order":
                                    properties:
                                        "requestIdentifier":
                                            type: "string"
                                            description: "The identifier of a credential request."
                                        "credentialPayload":
                                            type: "string"
                                            description: "The additional payload that will be added into a credential to be issued."
                                        "issuanceDeferred":
                                            type: "boolean"
                                            description: "The flag indicating whether to defer credential issuance."
                                        "credentialDuration":
                                            type: "integer"
                                            description: "The duration of a credential to be issued."
                                            format: "int64"
                                        "signingKeyId":
                                            type: "string"
                                            description: "The key ID of a private key that should be used for signing a credential\nto be issued.\n"
                                    type: "object"
                                    x-stoplight: {"id": "qlfpmzeak2r1h"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "FORBIDDEN"
                                            - "INTERNAL_SERVER_ERROR"
                                            - "CALLER_ERROR"
                                        description: "The next action that the implementation of the deferred credential\nendpoint should take.\n"
                                    "responseContent":
                                        type: "string"
                                        description: "The content of the response that the implementation of the deferred\ncredential endpoint should return.\n"
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "2ctxi9wijece0"}
    "/api/{serviceId}/auth/authorization/ticket/info":
        get:
            tags:
                - "Authorization Endpoint"
            summary: "Get Ticket Information"
            parameters:
                - name: "serviceId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "info":
                                        type: "string"
                                        description: "Information about the ticket."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NOT_FOUND"
                                            - "CALLER_ERROR"
                                            - "AUTHLETE_ERROR"
                                        description: "The result of the `/auth/authorization/ticket/info` API call."
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "x6ea38jgortll"}
    "/api/{serviceId}/auth/authorization/ticket/update":
        post:
            tags:
                - "Authorization Endpoint"
            summary: "Update Ticket Information"
            parameters:
                - name: "serviceId"
                  in: "path"
                  required: true
                  schema:
                    type: "string"
            requestBody:
                required: true
                content:
                    "application/json":
                        schema:
                            type: "object"
                            properties:
                                "ticket":
                                    type: "string"
                                    description: "The ticket."
                                "info":
                                    type: "string"
                                    description: "The information about the ticket."
                            required:
                                - "ticket"
                                - "info"
                    "application/x-www-form-urlencoded":
                        schema:
                            properties:
                                "clientLocked":
                                    type: "boolean"
                                    description: "The flag value to be set\n"
                            required:
                                - "clientLocked"
                            type: "object"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "info":
                                        type: "string"
                                        description: "Information about the ticket."
                                    "action":
                                        type: "string"
                                        enum:
                                            - "OK"
                                            - "NOT_FOUND"
                                            - "CALLER_ERROR"
                                            - "AUTHLETE_ERROR"
                                        description: "The result of the /auth/authorization/ticket/info API call."
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                "400":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "resultCode":
                                        type: "string"
                                        description: "The code which represents the result of the API call."
                                    "resultMessage":
                                        type: "string"
                                        description: "A short message which explains the result of the API call."
                            examples:
                                "default":
                                    value: {"resultCode": "A001201", "resultMessage": "[A001201] /auth/authorization, TLS must be used."}
                "401":
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                            examples:
                                "default":
                                    value: {"resultCode": "A001202", "resultMessage": "[A001202] /auth/authorization, Authorization header is missing.", "clientLocked": false}
                "403":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001215", "resultMessage": "[A001215] /auth/authorization, The client (ID = 26837717140341) is locked.", "clientLocked": false}
                "500":
                    content:
                        "application/json":
                            schema:
                                properties:
                                    "clientLocked":
                                        type: "boolean"
                                        description: "The flag value to be set\n"
                                required:
                                    - "clientLocked"
                                type: "object"
                            examples:
                                "default":
                                    value: {"resultCode": "A001101", "resultMessage": "[A001101] /auth/authorization, Authlete Server error.", "clientLocked": false}
            security:
                - authlete: []
                - bearer: []
            servers:
                - url: "https://us.authlete.com"
                  description: "\U0001F1FA\U0001F1F8 US Cluster"
                - url: "https://jp.authlete.com"
                  description: "\U0001F1EF\U0001F1F5 Japan Cluster"
                - url: "https://eu.authlete.com"
                  description: "\U0001F1EA\U0001F1FA Europe Cluster"
                - url: "https://br.authlete.com"
                  description: "\U0001F1E7\U0001F1F7 Brazil Cluster"
            x-stoplight: {"id": "0oun3vx8r023x"}
components:
    securitySchemes:
        "authlete":
            type: "oauth2"
            description: "Click the <strong>Get Token</strong> button below to log in with your Authlete account and retrieve an access token for API access."
            flows:
                authorizationCode:
                    authorizationUrl: "https://login.authlete.com/authorize"
                    scopes:
                        "authlete": "Inherit Authlete Account Permissions"
                    tokenUrl: "https://login.authlete.com/token"
        "bearer":
            type: "http"
            description: "Obtain an **access token** and set it in the following textbox."
            scheme: "bearer"
x-stoplight: {"id": "ciq2ivip8mdy3"}
